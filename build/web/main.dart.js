// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 2.19.2 (stable) (Tue Feb 7 18:37:17 2023 +0000) on "linux_x64"
// Module: zapp_user_main
// Flags: soundNullSafety(true), enableAsserts(true)
define('zapp_user_main', ['dart_sdk', 'flutter_sdk'], (function load__zapp_user_main(dart_sdk, flutter_sdk) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const js = dart_sdk.js;
  const ui = dart_sdk.ui;
  const collection = dart_sdk.collection;
  const _js_helper = dart_sdk._js_helper;
  const html = dart_sdk.html;
  const convert = dart_sdk.convert;
  const _internal = dart_sdk._internal;
  const developer = dart_sdk.developer;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const binding = flutter_sdk.src__widgets__binding;
  const system_chrome = flutter_sdk.src__services__system_chrome;
  const colors = flutter_sdk.src__material__colors;
  const plugin_registry = flutter_sdk.src__plugin_registry;
  const framework = flutter_sdk.src__widgets__framework;
  const basic = flutter_sdk.src__widgets__basic;
  const app = flutter_sdk.src__material__app;
  const change_notifier = flutter_sdk.src__foundation__change_notifier;
  const theme_data = flutter_sdk.src__material__theme_data;
  const input_decorator = flutter_sdk.src__material__input_decorator;
  const input_border = flutter_sdk.src__material__input_border;
  const borders = flutter_sdk.src__painting__borders;
  const border_radius = flutter_sdk.src__painting__border_radius;
  const text_style = flutter_sdk.src__painting__text_style;
  const elevated_button_theme = flutter_sdk.src__material__elevated_button_theme;
  const button_style = flutter_sdk.src__material__button_style;
  const material_state = flutter_sdk.src__material__material_state;
  const navigator = flutter_sdk.src__widgets__navigator;
  const animation = flutter_sdk.src__animation__animation;
  const pages = flutter_sdk.src__widgets__pages;
  const iterable_extensions = flutter_sdk.src__iterable_extensions;
  const key = flutter_sdk.src__foundation__key;
  const diagnostics = flutter_sdk.src__foundation__diagnostics;
  const assertions = flutter_sdk.src__foundation__assertions;
  const sliver = flutter_sdk.src__widgets__sliver;
  const layout_builder = flutter_sdk.src__widgets__layout_builder;
  const equality = flutter_sdk.src__equality;
  const value_listenable_builder = flutter_sdk.src__widgets__value_listenable_builder;
  const theme = flutter_sdk.src__material__theme;
  const tab_controller = flutter_sdk.src__material__tab_controller;
  const scaffold = flutter_sdk.src__material__scaffold;
  const app_bar = flutter_sdk.src__material__app_bar;
  const text = flutter_sdk.src__widgets__text;
  const scroll_notification = flutter_sdk.src__widgets__scroll_notification;
  const tabs = flutter_sdk.src__material__tabs;
  const icon = flutter_sdk.src__widgets__icon;
  const icon_data = flutter_sdk.src__widgets__icon_data;
  const scroll_view = flutter_sdk.src__widgets__scroll_view;
  const list_tile = flutter_sdk.src__material__list_tile;
  const edge_insets = flutter_sdk.src__painting__edge_insets;
  const flex = flutter_sdk.src__rendering__flex;
  const circle_avatar = flutter_sdk.src__material__circle_avatar;
  const image_resolution = flutter_sdk.src__painting__image_resolution;
  const icons = flutter_sdk.src__material__icons;
  const safe_area = flutter_sdk.src__widgets__safe_area;
  const container = flutter_sdk.src__widgets__container;
  const animated_switcher = flutter_sdk.src__widgets__animated_switcher;
  const curves = flutter_sdk.src__animation__curves;
  const transitions = flutter_sdk.src__widgets__transitions;
  const image = flutter_sdk.src__widgets__image;
  const media_query = flutter_sdk.src__widgets__media_query;
  const icon_button = flutter_sdk.src__material__icon_button;
  const focus_manager = flutter_sdk.src__widgets__focus_manager;
  const events = flutter_sdk.src__gestures__events;
  const single_child_scroll_view = flutter_sdk.src__widgets__single_child_scroll_view;
  const box_fit = flutter_sdk.src__painting__box_fit;
  const platform_channel = flutter_sdk.src__services__platform_channel;
  const message_codecs = flutter_sdk.src__services__message_codecs;
  const synchronous_future = flutter_sdk.src__foundation__synchronous_future;
  const router = flutter_sdk.src__widgets__router;
  const page = flutter_sdk.src__material__page;
  const route = flutter_sdk.src__cupertino__route;
  const url_strategy = flutter_sdk.src__navigation__url_strategy;
  const form = flutter_sdk.src__widgets__form;
  const text_form_field = flutter_sdk.src__material__text_form_field;
  const page_scaffold = flutter_sdk.src__cupertino__page_scaffold;
  const nav_bar = flutter_sdk.src__cupertino__nav_bar;
  const box_border = flutter_sdk.src__painting__box_border;
  const button = flutter_sdk.src__cupertino__button;
  const app$ = flutter_sdk.src__cupertino__app;
  const app$0 = flutter_sdk.src__widgets__app;
  const gesture_detector = flutter_sdk.src__widgets__gesture_detector;
  const selectable_text = flutter_sdk.src__material__selectable_text;
  const text_button = flutter_sdk.src__material__text_button;
  var $46zapp_entry = Object.create(dart.library);
  var main = Object.create(dart.library);
  var web_plugin_registrant = Object.create(dart.library);
  var app$1 = Object.create(dart.library);
  var shared_preferences = Object.create(dart.library);
  var shared_preferences_web = Object.create(dart.library);
  var go_router = Object.create(dart.library);
  var provider = Object.create(dart.library);
  var app_router = Object.create(dart.library);
  var app_state_provider = Object.create(dart.library);
  var app_theme = Object.create(dart.library);
  var shared_preferences_platform_interface = Object.create(dart.library);
  var types = Object.create(dart.library);
  var go_router$ = Object.create(dart.library);
  var custom_transition_page = Object.create(dart.library);
  var go_route = Object.create(dart.library);
  var go_router_refresh_stream = Object.create(dart.library);
  var go_router_state = Object.create(dart.library);
  var inherited_go_router = Object.create(dart.library);
  var route_data = Object.create(dart.library);
  var typedefs = Object.create(dart.library);
  var url_path_strategy = Object.create(dart.library);
  var async_provider = Object.create(dart.library);
  var change_notifier_provider = Object.create(dart.library);
  var consumer = Object.create(dart.library);
  var listenable_provider = Object.create(dart.library);
  var provider$ = Object.create(dart.library);
  var proxy_provider = Object.create(dart.library);
  var reassemble_handler = Object.create(dart.library);
  var selector$ = Object.create(dart.library);
  var value_listenable_provider = Object.create(dart.library);
  var router_utils = Object.create(dart.library);
  var home = Object.create(dart.library);
  var onboard_screen = Object.create(dart.library);
  var auth_screen = Object.create(dart.library);
  var plugin_platform_interface = Object.create(dart.library);
  var method_channel_shared_preferences = Object.create(dart.library);
  var go_route_information_parser = Object.create(dart.library);
  var go_router_delegate = Object.create(dart.library);
  var logging = Object.create(dart.library);
  var path_strategy_web = Object.create(dart.library);
  var path_parser = Object.create(dart.library);
  var go_route_match = Object.create(dart.library);
  var nested = Object.create(dart.library);
  var auth_form_widget = Object.create(dart.library);
  var go_router_cupertino = Object.create(dart.library);
  var go_router_error_page = Object.create(dart.library);
  var go_router_material = Object.create(dart.library);
  var logging$ = Object.create(dart.library);
  var auth_validators = Object.create(dart.library);
  var level = Object.create(dart.library);
  var log_record = Object.create(dart.library);
  var logger = Object.create(dart.library);
  var $toString = dartx.toString;
  var $keys = dartx.keys;
  var $_get = dartx._get;
  var $containsKey = dartx.containsKey;
  var $cast = dartx.cast;
  var $toList = dartx.toList;
  var $_set = dartx._set;
  var $remove = dartx.remove;
  var $clear = dartx.clear;
  var $addAll = dartx.addAll;
  var $isEmpty = dartx.isEmpty;
  var $startsWith = dartx.startsWith;
  var $substring = dartx.substring;
  var $map = dartx.map;
  var $localStorage = dartx.localStorage;
  var $forEach = dartx.forEach;
  var $where = dartx.where;
  var $removeWhere = dartx.removeWhere;
  var $isNotEmpty = dartx.isNotEmpty;
  var $_equals = dartx._equals;
  var $entries = dartx.entries;
  var $length = dartx.length;
  var $join = dartx.join;
  var $endsWith = dartx.endsWith;
  var $matchAsPrefix = dartx.matchAsPrefix;
  var $runtimeType = dartx.runtimeType;
  var $add = dartx.add;
  var $isOdd = dartx.isOdd;
  var $toLowerCase = dartx.toLowerCase;
  var $last = dartx.last;
  var $contains = dartx.contains;
  var $any = dartx.any;
  var $first = dartx.first;
  var $padLeft = dartx.padLeft;
  var $replaceFirst = dartx.replaceFirst;
  var $replaceFirstMapped = dartx.replaceFirstMapped;
  var $reversed = dartx.reversed;
  var $indexOf = dartx.indexOf;
  var $allMatches = dartx.allMatches;
  var $compareTo = dartx.compareTo;
  var $putIfAbsent = dartx.putIfAbsent;
  var $lastIndexOf = dartx.lastIndexOf;
  var $values = dartx.values;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T$ = {
    VoidTovoid: () => (T$.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    ListOfString: () => (T$.ListOfString = dart.constFn(core.List$(core.String)))(),
    ListOfStringTodynamic: () => (T$.ListOfStringTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T$.ListOfString()])))(),
    JSArrayOfString: () => (T$.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    dynamicToNull: () => (T$.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))(),
    VoidToNull: () => (T$.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    ObjectAndStackTraceTovoid: () => (T$.ObjectAndStackTraceTovoid = dart.constFn(dart.fnType(dart.void, [core.Object, core.StackTrace])))(),
    ZoneAndZoneDelegateAndZone__Tovoid: () => (T$.ZoneAndZoneDelegateAndZone__Tovoid = dart.constFn(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.String])))(),
    ChangeNotifierProviderOfAppStateProvider: () => (T$.ChangeNotifierProviderOfAppStateProvider = dart.constFn(change_notifier_provider.ChangeNotifierProvider$(app_state_provider.AppStateProvider)))(),
    BuildContextToAppStateProvider: () => (T$.BuildContextToAppStateProvider = dart.constFn(dart.fnType(app_state_provider.AppStateProvider, [framework.BuildContext])))(),
    ProxyProviderOfAppStateProvider$AppRouter: () => (T$.ProxyProviderOfAppStateProvider$AppRouter = dart.constFn(proxy_provider.ProxyProvider$(app_state_provider.AppStateProvider, app_router.AppRouter)))(),
    AppRouterN: () => (T$.AppRouterN = dart.constFn(dart.nullable(app_router.AppRouter)))(),
    BuildContextAndAppStateProviderAndAppRouterNToAppRouter: () => (T$.BuildContextAndAppStateProviderAndAppRouterNToAppRouter = dart.constFn(dart.fnType(app_router.AppRouter, [framework.BuildContext, app_state_provider.AppStateProvider, T$.AppRouterN()])))(),
    JSArrayOfSingleChildWidget: () => (T$.JSArrayOfSingleChildWidget = dart.constFn(_interceptors.JSArray$(nested.SingleChildWidget)))(),
    BuildContextToMaterialApp: () => (T$.BuildContextToMaterialApp = dart.constFn(dart.fnType(app.MaterialApp, [framework.BuildContext])))(),
    CompleterOfSharedPreferences: () => (T$.CompleterOfSharedPreferences = dart.constFn(async.Completer$(shared_preferences.SharedPreferences)))(),
    LinkedHashSetOfString: () => (T$.LinkedHashSetOfString = dart.constFn(collection.LinkedHashSet$(core.String)))(),
    boolN: () => (T$.boolN = dart.constFn(dart.nullable(core.bool)))(),
    intN: () => (T$.intN = dart.constFn(dart.nullable(core.int)))(),
    doubleN: () => (T$.doubleN = dart.constFn(dart.nullable(core.double)))(),
    StringN: () => (T$.StringN = dart.constFn(dart.nullable(core.String)))(),
    ListN: () => (T$.ListN = dart.constFn(dart.nullable(core.List)))(),
    ListNOfString: () => (T$.ListNOfString = dart.constFn(dart.nullable(T$.ListOfString())))(),
    IdentityMapOfString$Object: () => (T$.IdentityMapOfString$Object = dart.constFn(_js_helper.IdentityMap$(core.String, core.Object)))(),
    MapOfString$Object: () => (T$.MapOfString$Object = dart.constFn(core.Map$(core.String, core.Object)))(),
    MapEntryOfString$Object: () => (T$.MapEntryOfString$Object = dart.constFn(core.MapEntry$(core.String, core.Object)))(),
    StringAndObjectToMapEntryOfString$Object: () => (T$.StringAndObjectToMapEntryOfString$Object = dart.constFn(dart.fnType(T$.MapEntryOfString$Object(), [core.String, core.Object])))(),
    StringTobool: () => (T$.StringTobool = dart.constFn(dart.fnType(core.bool, [core.String])))(),
    VoidTobool: () => (T$.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    ExpandoOfObject: () => (T$.ExpandoOfObject = dart.constFn(core.Expando$(core.Object)))(),
    MapOfString$String: () => (T$.MapOfString$String = dart.constFn(core.Map$(core.String, core.String)))(),
    String__ToString: () => (T$.String__ToString = dart.constFn(dart.fnType(core.String, [core.String], {params: T$.MapOfString$String(), queryParams: T$.MapOfString$String()}, {})))(),
    ObjectN: () => (T$.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    String__Tovoid: () => (T$.String__Tovoid = dart.constFn(dart.fnType(dart.void, [core.String], {extra: T$.ObjectN()}, {})))(),
    String__Tovoid$1: () => (T$.String__Tovoid$1 = dart.constFn(dart.fnType(dart.void, [core.String], {extra: T$.ObjectN(), params: T$.MapOfString$String(), queryParams: T$.MapOfString$String()}, {})))(),
    BuildContextAndGoRouterStateToHome: () => (T$.BuildContextAndGoRouterStateToHome = dart.constFn(dart.fnType(home.Home, [framework.BuildContext, go_router_state.GoRouterState])))(),
    BuildContextAndGoRouterStateToOnBoardScreen: () => (T$.BuildContextAndGoRouterStateToOnBoardScreen = dart.constFn(dart.fnType(onboard_screen.OnBoardScreen, [framework.BuildContext, go_router_state.GoRouterState])))(),
    BuildContextAndGoRouterStateToAuthScreen: () => (T$.BuildContextAndGoRouterStateToAuthScreen = dart.constFn(dart.fnType(auth_screen.AuthScreen, [framework.BuildContext, go_router_state.GoRouterState])))(),
    JSArrayOfGoRoute: () => (T$.JSArrayOfGoRoute = dart.constFn(_interceptors.JSArray$(go_route.GoRoute)))(),
    GoRouterStateToStringN: () => (T$.GoRouterStateToStringN = dart.constFn(dart.fnType(T$.StringN(), [go_router_state.GoRouterState])))(),
    LinkedHashMapOfString$Object: () => (T$.LinkedHashMapOfString$Object = dart.constFn(collection.LinkedHashMap$(core.String, core.Object)))(),
    StringAndObjectTobool: () => (T$.StringAndObjectTobool = dart.constFn(dart.fnType(core.bool, [core.String, core.Object])))(),
    GoRouterStateToNull: () => (T$.GoRouterStateToNull = dart.constFn(dart.fnType(core.Null, [go_router_state.GoRouterState])))(),
    ListOfNavigatorObserver: () => (T$.ListOfNavigatorObserver = dart.constFn(core.List$(navigator.NavigatorObserver)))(),
    JSArrayOfNavigatorObserver: () => (T$.JSArrayOfNavigatorObserver = dart.constFn(_interceptors.JSArray$(navigator.NavigatorObserver)))(),
    BuildContextAndGoRouterStateAndNavigatorToInheritedGoRouter: () => (T$.BuildContextAndGoRouterStateAndNavigatorToInheritedGoRouter = dart.constFn(dart.fnType(inherited_go_router.InheritedGoRouter, [framework.BuildContext, go_router_state.GoRouterState, navigator.Navigator])))(),
    AnimationOfdouble: () => (T$.AnimationOfdouble = dart.constFn(animation.Animation$(core.double)))(),
    BuildContextAndAnimationOfdoubleAndAnimationOfdouble__ToWidget: () => (T$.BuildContextAndAnimationOfdoubleAndAnimationOfdouble__ToWidget = dart.constFn(dart.fnType(framework.Widget, [framework.BuildContext, T$.AnimationOfdouble(), T$.AnimationOfdouble(), framework.Widget])))(),
    BuildContextAndGoRouterStateToWidget: () => (T$.BuildContextAndGoRouterStateToWidget = dart.constFn(dart.fnType(framework.Widget, [framework.BuildContext, go_router_state.GoRouterState])))(),
    StringToString: () => (T$.StringToString = dart.constFn(dart.fnType(core.String, [core.String])))(),
    MapOfString$ListOfString: () => (T$.MapOfString$ListOfString = dart.constFn(core.Map$(core.String, T$.ListOfString())))(),
    MapEntryOfString$ListOfString: () => (T$.MapEntryOfString$ListOfString = dart.constFn(core.MapEntry$(core.String, T$.ListOfString())))(),
    MapEntryOfString$ListOfStringTobool: () => (T$.MapEntryOfString$ListOfStringTobool = dart.constFn(dart.fnType(core.bool, [T$.MapEntryOfString$ListOfString()])))(),
    RegExpMatchN: () => (T$.RegExpMatchN = dart.constFn(dart.nullable(core.RegExpMatch)))(),
    dynamicTovoid: () => (T$.dynamicTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic])))(),
    ValueKeyOfString: () => (T$.ValueKeyOfString = dart.constFn(key.ValueKey$(core.String)))(),
    DiagnosticsPropertyOfGoRouter: () => (T$.DiagnosticsPropertyOfGoRouter = dart.constFn(diagnostics.DiagnosticsProperty$(go_router$.GoRouter)))(),
    PageOfvoid: () => (T$.PageOfvoid = dart.constFn(navigator.Page$(dart.void)))(),
    BuildContextAndGoRouterStateToPageOfvoid: () => (T$.BuildContextAndGoRouterStateToPageOfvoid = dart.constFn(dart.fnType(T$.PageOfvoid(), [framework.BuildContext, go_router_state.GoRouterState])))(),
    ExpandoOfGoRouteData: () => (T$.ExpandoOfGoRouteData = dart.constFn(core.Expando$(route_data.GoRouteData)))(),
    TypedGoRouteOfGoRouteData: () => (T$.TypedGoRouteOfGoRouteData = dart.constFn(route_data.TypedGoRoute$(route_data.GoRouteData)))(),
    BuildContextToWidget: () => (T$.BuildContextToWidget = dart.constFn(dart.fnType(framework.Widget, [framework.BuildContext])))(),
    ObjectNToNull: () => (T$.ObjectNToNull = dart.constFn(dart.fnType(core.Null, [T$.ObjectN()])))(),
    ChangeNotifierN: () => (T$.ChangeNotifierN = dart.constFn(dart.nullable(change_notifier.ChangeNotifier)))(),
    BuildContextAndChangeNotifierNTovoid: () => (T$.BuildContextAndChangeNotifierNTovoid = dart.constFn(dart.fnType(dart.void, [framework.BuildContext, T$.ChangeNotifierN()])))(),
    ListenableN: () => (T$.ListenableN = dart.constFn(dart.nullable(change_notifier.Listenable)))(),
    InheritedContextOfListenableN: () => (T$.InheritedContextOfListenableN = dart.constFn(provider$.InheritedContext$(T$.ListenableN())))(),
    InheritedContextOfListenableNAndListenableNToFn: () => (T$.InheritedContextOfListenableNAndListenableNToFn = dart.constFn(dart.fnType(T$.VoidTovoid(), [T$.InheritedContextOfListenableN(), T$.ListenableN()])))(),
    TTovoid$1: () => (T$.TTovoid$1 = dart.constFn(dart.gFnType(T => [dart.void, [T]], T => [T$.ObjectN()])))(),
    JSArrayOfPostEventCall: () => (T$.JSArrayOfPostEventCall = dart.constFn(_interceptors.JSArray$(provider$.PostEventCall)))(),
    IdentityMapOfString$ProviderNode: () => (T$.IdentityMapOfString$ProviderNode = dart.constFn(_js_helper.IdentityMap$(core.String, provider$.ProviderNode)))(),
    ElementTovoid: () => (T$.ElementTovoid = dart.constFn(dart.fnType(dart.void, [framework.Element])))(),
    _NestedHookElementN: () => (T$._NestedHookElementN = dart.constFn(dart.nullable(nested._NestedHookElement)))(),
    ElementTobool: () => (T$.ElementTobool = dart.constFn(dart.fnType(core.bool, [framework.Element])))(),
    LinkedHashMapOfString$ProviderNode: () => (T$.LinkedHashMapOfString$ProviderNode = dart.constFn(collection.LinkedHashMap$(core.String, provider$.ProviderNode)))(),
    FutureOfNull: () => (T$.FutureOfNull = dart.constFn(async.Future$(core.Null)))(),
    JSArrayOfDiagnosticsNode: () => (T$.JSArrayOfDiagnosticsNode = dart.constFn(_interceptors.JSArray$(diagnostics.DiagnosticsNode)))(),
    DefaultEqualityOfNever: () => (T$.DefaultEqualityOfNever = dart.constFn(equality.DefaultEquality$(dart.Never)))(),
    FnToR: () => (T$.FnToR = dart.constFn(dart.gFnType((T, R) => {
      var __t$TToR = () => (__t$TToR = dart.constFn(dart.fnType(R, [T])))();
      return [R, [__t$TToR()]];
    }, (T, R) => {
      var __t$TToR = () => (__t$TToR = dart.constFn(dart.fnType(R, [T])))();
      return [T$.ObjectN(), T$.ObjectN()];
    })))(),
    VoidToT: () => (T$.VoidToT = dart.constFn(dart.gFnType(T => [T, []], T => [T$.ObjectN()])))(),
    JSArrayOfintN: () => (T$.JSArrayOfintN = dart.constFn(_interceptors.JSArray$(T$.intN())))(),
    ListOfint: () => (T$.ListOfint = dart.constFn(core.List$(core.int)))(),
    WidgetN: () => (T$.WidgetN = dart.constFn(dart.nullable(framework.Widget)))(),
    ScrollNotificationTobool: () => (T$.ScrollNotificationTobool = dart.constFn(dart.fnType(core.bool, [scroll_notification.ScrollNotification])))(),
    JSArrayOfWidget: () => (T$.JSArrayOfWidget = dart.constFn(_interceptors.JSArray$(framework.Widget)))(),
    BuildContextAndintToListTile: () => (T$.BuildContextAndintToListTile = dart.constFn(dart.fnType(list_tile.ListTile, [framework.BuildContext, core.int])))(),
    WidgetAndAnimationOfdoubleToScaleTransition: () => (T$.WidgetAndAnimationOfdoubleToScaleTransition = dart.constFn(dart.fnType(transitions.ScaleTransition, [framework.Widget, T$.AnimationOfdouble()])))(),
    ValueKeyOfint: () => (T$.ValueKeyOfint = dart.constFn(key.ValueKey$(core.int)))(),
    PointerDownEventTovoid: () => (T$.PointerDownEventTovoid = dart.constFn(dart.fnType(dart.void, [events.PointerDownEvent])))(),
    IdentityMapOfString$dynamic: () => (T$.IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))(),
    SynchronousFutureOfUri: () => (T$.SynchronousFutureOfUri = dart.constFn(synchronous_future.SynchronousFuture$(core.Uri)))(),
    GlobalKeyOfNavigatorState: () => (T$.GlobalKeyOfNavigatorState = dart.constFn(framework.GlobalKey$(navigator.NavigatorState)))(),
    JSArrayOfGoRouteMatch: () => (T$.JSArrayOfGoRouteMatch = dart.constFn(_interceptors.JSArray$(go_route_match.GoRouteMatch)))(),
    IdentityMapOfString$GoRouteMatch: () => (T$.IdentityMapOfString$GoRouteMatch = dart.constFn(_js_helper.IdentityMap$(core.String, go_route_match.GoRouteMatch)))(),
    IdentityMapOfString$int: () => (T$.IdentityMapOfString$int = dart.constFn(_js_helper.IdentityMap$(core.String, core.int)))(),
    IdentityMapOfString$String: () => (T$.IdentityMapOfString$String = dart.constFn(_js_helper.IdentityMap$(core.String, core.String)))(),
    SynchronousFutureOfvoid: () => (T$.SynchronousFutureOfvoid = dart.constFn(synchronous_future.SynchronousFuture$(dart.void)))(),
    StringNTobool: () => (T$.StringNTobool = dart.constFn(dart.fnType(core.bool, [T$.StringN()])))(),
    ListOfGoRouteMatch: () => (T$.ListOfGoRouteMatch = dart.constFn(core.List$(go_route_match.GoRouteMatch)))(),
    SyncIterableOfListOfGoRouteMatch: () => (T$.SyncIterableOfListOfGoRouteMatch = dart.constFn(_js_helper.SyncIterable$(T$.ListOfGoRouteMatch())))(),
    JSArrayOfPage: () => (T$.JSArrayOfPage = dart.constFn(_interceptors.JSArray$(navigator.Page)))(),
    RouteAnddynamicTobool: () => (T$.RouteAnddynamicTobool = dart.constFn(dart.fnType(core.bool, [navigator.Route, dart.dynamic])))(),
    LinkedHashMapOfString$String: () => (T$.LinkedHashMapOfString$String = dart.constFn(collection.LinkedHashMap$(core.String, core.String)))(),
    SyncIterableOfPage: () => (T$.SyncIterableOfPage = dart.constFn(_js_helper.SyncIterable$(navigator.Page)))(),
    MaterialPageOfvoid: () => (T$.MaterialPageOfvoid = dart.constFn(page.MaterialPage$(dart.void)))(),
    __ToMaterialPageOfvoid: () => (T$.__ToMaterialPageOfvoid = dart.constFn(dart.fnType(T$.MaterialPageOfvoid(), [], {}, {arguments: T$.ObjectN(), child: framework.Widget, key: key.LocalKey, name: T$.StringN(), restorationId: core.String})))(),
    BuildContextAndGoRouterStateToGoRouterMaterialErrorScreen: () => (T$.BuildContextAndGoRouterStateToGoRouterMaterialErrorScreen = dart.constFn(dart.fnType(go_router_material.GoRouterMaterialErrorScreen, [framework.BuildContext, go_router_state.GoRouterState])))(),
    CupertinoPageOfvoid: () => (T$.CupertinoPageOfvoid = dart.constFn(route.CupertinoPage$(dart.void)))(),
    __ToCupertinoPageOfvoid: () => (T$.__ToCupertinoPageOfvoid = dart.constFn(dart.fnType(T$.CupertinoPageOfvoid(), [], {}, {arguments: T$.ObjectN(), child: framework.Widget, key: key.LocalKey, name: T$.StringN(), restorationId: core.String})))(),
    BuildContextAndGoRouterStateToGoRouterCupertinoErrorScreen: () => (T$.BuildContextAndGoRouterStateToGoRouterCupertinoErrorScreen = dart.constFn(dart.fnType(go_router_cupertino.GoRouterCupertinoErrorScreen, [framework.BuildContext, go_router_state.GoRouterState])))(),
    BuildContextAndGoRouterStateToGoRouterErrorScreen: () => (T$.BuildContextAndGoRouterStateToGoRouterErrorScreen = dart.constFn(dart.fnType(go_router_error_page.GoRouterErrorScreen, [framework.BuildContext, go_router_state.GoRouterState])))(),
    NoTransitionPageOfvoid: () => (T$.NoTransitionPageOfvoid = dart.constFn(custom_transition_page.NoTransitionPage$(dart.void)))(),
    LogRecordTovoid: () => (T$.LogRecordTovoid = dart.constFn(dart.fnType(dart.void, [log_record.LogRecord])))(),
    MatchToString: () => (T$.MatchToString = dart.constFn(dart.fnType(core.String, [core.Match])))(),
    LinkedHashSetOf_NestedHookElement: () => (T$.LinkedHashSetOf_NestedHookElement = dart.constFn(collection.LinkedHashSet$(nested._NestedHookElement)))(),
    SingleChildStateOfSingleChildStatefulWidget: () => (T$.SingleChildStateOfSingleChildStatefulWidget = dart.constFn(nested.SingleChildState$(nested.SingleChildStatefulWidget)))(),
    SingleChildStateMixinOfStatefulWidget: () => (T$.SingleChildStateMixinOfStatefulWidget = dart.constFn(nested.SingleChildStateMixin$(framework.StatefulWidget)))(),
    GlobalKeyOfFormState: () => (T$.GlobalKeyOfFormState = dart.constFn(framework.GlobalKey$(form.FormState)))(),
    UnmodifiableMapViewOfString$Logger: () => (T$.UnmodifiableMapViewOfString$Logger = dart.constFn(collection.UnmodifiableMapView$(core.String, logger.Logger)))(),
    VoidToLogger: () => (T$.VoidToLogger = dart.constFn(dart.fnType(logger.Logger, [])))(),
    IdentityMapOfString$Logger: () => (T$.IdentityMapOfString$Logger = dart.constFn(_js_helper.IdentityMap$(core.String, logger.Logger)))(),
    LevelN: () => (T$.LevelN = dart.constFn(dart.nullable(level.Level)))(),
    StreamControllerOfLevelN: () => (T$.StreamControllerOfLevelN = dart.constFn(async.StreamController$(T$.LevelN())))(),
    VoidToObjectN: () => (T$.VoidToObjectN = dart.constFn(dart.fnType(T$.ObjectN(), [])))(),
    StreamControllerOfLogRecord: () => (T$.StreamControllerOfLogRecord = dart.constFn(async.StreamController$(log_record.LogRecord)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.fn(main.main, T$.VoidTovoid());
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: core.Object.prototype
      });
    },
    get C2() {
      return C[2] = dart.constMap(core.String, core.String, []);
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: home.Home.prototype,
        [Widget_key]: null
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: onboard_screen.OnBoardScreen.prototype,
        [Widget_key]: null
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: auth_screen.AuthScreen.prototype,
        [Widget_key]: null
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4292811532
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4293194724
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: borders.BorderStyle.prototype,
        [_Enum__name]: "solid",
        [_Enum_index]: 1
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278190080
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: borders.BorderSide.prototype,
        [BorderSide_strokeAlign]: -1,
        [BorderSide_style]: C[11] || CT.C11,
        [BorderSide_width]: 1,
        [BorderSide_color]: C[12] || CT.C12
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: ui.Radius.prototype,
        [Radius_y]: 4,
        [Radius_x]: 4
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: border_radius.BorderRadius.prototype,
        [BorderRadius_bottomRight]: C[14] || CT.C14,
        [BorderRadius_bottomLeft]: C[14] || CT.C14,
        [BorderRadius_topRight]: C[14] || CT.C14,
        [BorderRadius_topLeft]: C[14] || CT.C14
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: input_border.OutlineInputBorder.prototype,
        [InputBorder_borderSide]: C[10] || CT.C10,
        [OutlineInputBorder_borderRadius]: C[13] || CT.C13,
        [OutlineInputBorder_gapPadding]: 4
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: input_decorator.FloatingLabelAlignment.prototype,
        [FloatingLabelAlignment__x]: -1
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: input_decorator.FloatingLabelBehavior.prototype,
        [_Enum__name]: "auto",
        [_Enum_index]: 1
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [TextStyle_overflow]: null,
        [TextStyle_fontVariations]: null,
        [TextStyle_fontFeatures]: null,
        [TextStyle_shadows]: null,
        [TextStyle_debugLabel]: null,
        [TextStyle_decorationThickness]: null,
        [TextStyle_decorationStyle]: null,
        [TextStyle_decorationColor]: null,
        [TextStyle_decoration]: null,
        [TextStyle_background]: null,
        [TextStyle_foreground]: null,
        [TextStyle_locale]: null,
        [TextStyle_leadingDistribution]: null,
        [TextStyle_height]: null,
        [TextStyle_textBaseline]: null,
        [TextStyle_wordSpacing]: null,
        [TextStyle_letterSpacing]: null,
        [TextStyle_fontStyle]: null,
        [TextStyle_fontWeight]: null,
        [TextStyle_fontSize]: null,
        [TextStyle__package]: null,
        [TextStyle__fontFamilyFallback]: null,
        [TextStyle_fontFamily]: null,
        [TextStyle_backgroundColor]: null,
        [TextStyle_color]: C[12] || CT.C12,
        [TextStyle_inherit]: true
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: input_decorator.InputDecorationTheme.prototype,
        [InputDecorationTheme_constraints]: null,
        [InputDecorationTheme_alignLabelWithHint]: false,
        [InputDecorationTheme_border]: null,
        [InputDecorationTheme_enabledBorder]: null,
        [InputDecorationTheme_disabledBorder]: null,
        [InputDecorationTheme_focusedErrorBorder]: null,
        [InputDecorationTheme_focusedBorder]: C[9] || CT.C9,
        [InputDecorationTheme_errorBorder]: null,
        [InputDecorationTheme_hoverColor]: null,
        [InputDecorationTheme_focusColor]: null,
        [InputDecorationTheme_activeIndicatorBorder]: null,
        [InputDecorationTheme_outlineBorder]: null,
        [InputDecorationTheme_fillColor]: null,
        [InputDecorationTheme_filled]: false,
        [InputDecorationTheme_counterStyle]: null,
        [InputDecorationTheme_suffixIconColor]: null,
        [InputDecorationTheme_suffixStyle]: null,
        [InputDecorationTheme_prefixIconColor]: null,
        [InputDecorationTheme_prefixStyle]: null,
        [InputDecorationTheme_iconColor]: null,
        [InputDecorationTheme_isCollapsed]: false,
        [InputDecorationTheme_contentPadding]: null,
        [InputDecorationTheme_isDense]: false,
        [InputDecorationTheme_floatingLabelAlignment]: C[15] || CT.C15,
        [InputDecorationTheme_floatingLabelBehavior]: C[16] || CT.C16,
        [InputDecorationTheme_errorMaxLines]: null,
        [InputDecorationTheme_errorStyle]: null,
        [InputDecorationTheme_hintStyle]: null,
        [InputDecorationTheme_helperMaxLines]: null,
        [InputDecorationTheme_helperStyle]: null,
        [InputDecorationTheme_floatingLabelStyle]: null,
        [InputDecorationTheme_labelStyle]: C[17] || CT.C17
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 300000
      });
    },
    get C19() {
      return C[19] = dart.fn(custom_transition_page.NoTransitionPage._transitionsBuilder, T$.BuildContextAndAnimationOfdoubleAndAnimationOfdouble__ToWidget());
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 1
      });
    },
    get C21() {
      return C[21] = dart.fn(go_route.GoRoute._invalidBuilder, T$.BuildContextAndGoRouterStateToWidget());
    },
    get C22() {
      return C[22] = dart.constList([], go_route.GoRoute);
    },
    get C23() {
      return C[23] = dart.fn(go_route.GoRoute._noRedirection, T$.GoRouterStateToStringN());
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: basic.SizedBox.prototype,
        [Widget_key]: null,
        [SingleChildRenderObjectWidget_child]: null,
        [SizedBox_height]: 0,
        [SizedBox_width]: 0
      });
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: route_data.NoOpPage.prototype,
        [RouteSettings_arguments]: null,
        [RouteSettings_name]: null,
        [Page_restorationId]: null,
        [Page_key]: null
      });
    },
    get C26() {
      return C[26] = dart.constList([], T$.TypedGoRouteOfGoRouteData());
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: url_path_strategy.UrlPathStrategy.prototype,
        [_Enum__name]: "hash",
        [_Enum_index]: 0
      });
    },
    get C29() {
      return C[29] = dart.const({
        __proto__: url_path_strategy.UrlPathStrategy.prototype,
        [_Enum__name]: "path",
        [_Enum_index]: 1
      });
    },
    get C27() {
      return C[27] = dart.constList([C[28] || CT.C28, C[29] || CT.C29], url_path_strategy.UrlPathStrategy);
    },
    get C30() {
      return C[30] = dart.fn(change_notifier_provider.ChangeNotifierProvider._dispose, T$.BuildContextAndChangeNotifierNTovoid());
    },
    get C31() {
      return C[31] = dart.fn(listenable_provider.ListenableProvider._startListening, T$.InheritedContextOfListenableNAndListenableNToFn());
    },
    get C32() {
      return C[32] = dart.constList([], core.String);
    },
    get C33() {
      return C[33] = dart.constMap(T$.ObjectN(), T$.ObjectN(), []);
    },
    get C35() {
      return C[35] = dart.const({
        __proto__: T$.DefaultEqualityOfNever().prototype
      });
    },
    get C34() {
      return C[34] = dart.const({
        __proto__: equality.DeepCollectionEquality.prototype,
        [DeepCollectionEquality__unordered]: false,
        [DeepCollectionEquality__base]: C[35] || CT.C35
      });
    },
    get C37() {
      return C[37] = dart.const({
        __proto__: router_utils.APP_PAGE.prototype,
        [_Enum__name]: "onboard",
        [_Enum_index]: 0
      });
    },
    get C38() {
      return C[38] = dart.const({
        __proto__: router_utils.APP_PAGE.prototype,
        [_Enum__name]: "auth",
        [_Enum_index]: 1
      });
    },
    get C39() {
      return C[39] = dart.const({
        __proto__: router_utils.APP_PAGE.prototype,
        [_Enum__name]: "home",
        [_Enum_index]: 2
      });
    },
    get C40() {
      return C[40] = dart.const({
        __proto__: router_utils.APP_PAGE.prototype,
        [_Enum__name]: "search",
        [_Enum_index]: 3
      });
    },
    get C36() {
      return C[36] = dart.constList([C[37] || CT.C37, C[38] || CT.C38, C[39] || CT.C39, C[40] || CT.C40], router_utils.APP_PAGE);
    },
    get C42() {
      return C[42] = dart.const({
        __proto__: icon_data.IconData.prototype,
        [IconData_matchTextDirection]: false,
        [IconData_fontPackage]: null,
        [IconData_fontFamily]: "MaterialIcons",
        [IconData_codePoint]: 58911
      });
    },
    get C41() {
      return C[41] = dart.const({
        __proto__: icon.Icon.prototype,
        [Widget_key]: null,
        [Icon_textDirection]: null,
        [Icon_semanticLabel]: null,
        [Icon_shadows]: null,
        [Icon_color]: null,
        [Icon_opticalSize]: null,
        [Icon_grade]: null,
        [Icon_weight]: null,
        [Icon_fill]: null,
        [Icon_size]: null,
        [Icon_icon]: C[42] || CT.C42
      });
    },
    get C44() {
      return C[44] = dart.const({
        __proto__: icon_data.IconData.prototype,
        [IconData_matchTextDirection]: false,
        [IconData_fontPackage]: null,
        [IconData_fontFamily]: "MaterialIcons",
        [IconData_codePoint]: 58949
      });
    },
    get C43() {
      return C[43] = dart.const({
        __proto__: icon.Icon.prototype,
        [Widget_key]: null,
        [Icon_textDirection]: null,
        [Icon_semanticLabel]: null,
        [Icon_shadows]: null,
        [Icon_color]: null,
        [Icon_opticalSize]: null,
        [Icon_grade]: null,
        [Icon_weight]: null,
        [Icon_fill]: null,
        [Icon_size]: null,
        [Icon_icon]: C[44] || CT.C44
      });
    },
    get C46() {
      return C[46] = dart.const({
        __proto__: icon_data.IconData.prototype,
        [IconData_matchTextDirection]: false,
        [IconData_fontPackage]: null,
        [IconData_fontFamily]: "MaterialIcons",
        [IconData_codePoint]: 58513
      });
    },
    get C45() {
      return C[45] = dart.const({
        __proto__: icon.Icon.prototype,
        [Widget_key]: null,
        [Icon_textDirection]: null,
        [Icon_semanticLabel]: null,
        [Icon_shadows]: null,
        [Icon_color]: null,
        [Icon_opticalSize]: null,
        [Icon_grade]: null,
        [Icon_weight]: null,
        [Icon_fill]: null,
        [Icon_size]: null,
        [Icon_icon]: C[46] || CT.C46
      });
    },
    get C47() {
      return C[47] = dart.const({
        __proto__: text.Text.prototype,
        [Widget_key]: null,
        [Text_selectionColor]: null,
        [Text_textHeightBehavior]: null,
        [Text_textWidthBasis]: null,
        [Text_semanticsLabel]: null,
        [Text_maxLines]: null,
        [Text_textScaleFactor]: null,
        [Text_overflow]: null,
        [Text_softWrap]: null,
        [Text_locale]: null,
        [Text_textDirection]: null,
        [Text_textAlign]: null,
        [Text_strutStyle]: null,
        [Text_style]: null,
        [Text_textSpan]: null,
        [Text_data]: "Выход"
      });
    },
    get C48() {
      return C[48] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294955430
      });
    },
    get C49() {
      return C[49] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 10,
        [EdgeInsets_right]: 10,
        [EdgeInsets_top]: 10,
        [EdgeInsets_left]: 10
      });
    },
    get C50() {
      return C[50] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 800000
      });
    },
    get C51() {
      return C[51] = dart.const({
        __proto__: icon.Icon.prototype,
        [Widget_key]: null,
        [Icon_textDirection]: null,
        [Icon_semanticLabel]: null,
        [Icon_shadows]: null,
        [Icon_color]: null,
        [Icon_opticalSize]: null,
        [Icon_grade]: null,
        [Icon_weight]: null,
        [Icon_fill]: null,
        [Icon_size]: null,
        [Icon_icon]: null
      });
    },
    get C53() {
      return C[53] = dart.const({
        __proto__: icon_data.IconData.prototype,
        [IconData_matchTextDirection]: true,
        [IconData_fontPackage]: null,
        [IconData_fontFamily]: "MaterialIcons",
        [IconData_codePoint]: 57490
      });
    },
    get C52() {
      return C[52] = dart.const({
        __proto__: icon.Icon.prototype,
        [Widget_key]: null,
        [Icon_textDirection]: null,
        [Icon_semanticLabel]: null,
        [Icon_shadows]: null,
        [Icon_color]: null,
        [Icon_opticalSize]: null,
        [Icon_grade]: null,
        [Icon_weight]: null,
        [Icon_fill]: null,
        [Icon_size]: null,
        [Icon_icon]: C[53] || CT.C53
      });
    },
    get C55() {
      return C[55] = dart.const({
        __proto__: icon_data.IconData.prototype,
        [IconData_matchTextDirection]: false,
        [IconData_fontPackage]: null,
        [IconData_fontFamily]: "MaterialIcons",
        [IconData_codePoint]: 57846
      });
    },
    get C54() {
      return C[54] = dart.const({
        __proto__: icon.Icon.prototype,
        [Widget_key]: null,
        [Icon_textDirection]: null,
        [Icon_semanticLabel]: null,
        [Icon_shadows]: null,
        [Icon_color]: null,
        [Icon_opticalSize]: null,
        [Icon_grade]: null,
        [Icon_weight]: null,
        [Icon_fill]: null,
        [Icon_size]: null,
        [Icon_icon]: C[55] || CT.C55
      });
    },
    get C57() {
      return C[57] = dart.const({
        __proto__: icon_data.IconData.prototype,
        [IconData_matchTextDirection]: true,
        [IconData_fontPackage]: null,
        [IconData_fontFamily]: "MaterialIcons",
        [IconData_codePoint]: 57499
      });
    },
    get C56() {
      return C[56] = dart.const({
        __proto__: icon.Icon.prototype,
        [Widget_key]: null,
        [Icon_textDirection]: null,
        [Icon_semanticLabel]: null,
        [Icon_shadows]: null,
        [Icon_color]: null,
        [Icon_opticalSize]: null,
        [Icon_grade]: null,
        [Icon_weight]: null,
        [Icon_fill]: null,
        [Icon_size]: null,
        [Icon_icon]: C[57] || CT.C57
      });
    },
    get C58() {
      return C[58] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 8,
        [EdgeInsets_right]: 8,
        [EdgeInsets_top]: 8,
        [EdgeInsets_left]: 8
      });
    },
    get C59() {
      return C[59] = dart.const({
        __proto__: auth_form_widget.AuthFormWidget.prototype,
        [Widget_key]: null
      });
    },
    get C62() {
      return C[62] = dart.const({
        __proto__: message_codecs.StandardMessageCodec.prototype
      });
    },
    get C61() {
      return C[61] = dart.const({
        __proto__: message_codecs.StandardMethodCodec.prototype,
        [StandardMethodCodec_messageCodec]: C[62] || CT.C62
      });
    },
    get C60() {
      return C[60] = dart.const({
        __proto__: platform_channel.MethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C[61] || CT.C61,
        [MethodChannel_name]: "plugins.flutter.io/shared_preferences"
      });
    },
    get C63() {
      return C[63] = dart.fn(go_router_material.pageBuilderForMaterialApp, T$.__ToMaterialPageOfvoid());
    },
    get C64() {
      return C[64] = dart.fn(go_router_cupertino.pageBuilderForCupertinoApp, T$.__ToCupertinoPageOfvoid());
    },
    get C66() {
      return C[66] = dart.const({
        __proto__: url_strategy.BrowserPlatformLocation.prototype
      });
    },
    get C65() {
      return C[65] = dart.const({
        __proto__: url_strategy.HashUrlStrategy.prototype,
        [HashUrlStrategy__platformLocation]: C[66] || CT.C66
      });
    },
    get C68() {
      return C[68] = dart.const({
        __proto__: nav_bar._HeroTag.prototype,
        [_HeroTag_navigator]: null
      });
    },
    get C71() {
      return C[71] = dart.const({
        __proto__: borders.BorderStyle.prototype,
        [_Enum__name]: "none",
        [_Enum_index]: 0
      });
    },
    get C70() {
      return C[70] = dart.const({
        __proto__: borders.BorderSide.prototype,
        [BorderSide_strokeAlign]: -1,
        [BorderSide_style]: C[71] || CT.C71,
        [BorderSide_width]: 0,
        [BorderSide_color]: C[12] || CT.C12
      });
    },
    get C73() {
      return C[73] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 1291845632
      });
    },
    get C72() {
      return C[72] = dart.const({
        __proto__: borders.BorderSide.prototype,
        [BorderSide_strokeAlign]: -1,
        [BorderSide_style]: C[11] || CT.C11,
        [BorderSide_width]: 0,
        [BorderSide_color]: C[73] || CT.C73
      });
    },
    get C69() {
      return C[69] = dart.const({
        __proto__: box_border.Border.prototype,
        [Border_left]: C[70] || CT.C70,
        [Border_bottom]: C[72] || CT.C72,
        [Border_right]: C[70] || CT.C70,
        [Border_top]: C[70] || CT.C70
      });
    },
    get C74() {
      return C[74] = dart.const({
        __proto__: text.Text.prototype,
        [Widget_key]: null,
        [Text_selectionColor]: null,
        [Text_textHeightBehavior]: null,
        [Text_textWidthBasis]: null,
        [Text_semanticsLabel]: null,
        [Text_maxLines]: null,
        [Text_textScaleFactor]: null,
        [Text_overflow]: null,
        [Text_softWrap]: null,
        [Text_locale]: null,
        [Text_textDirection]: null,
        [Text_textAlign]: null,
        [Text_strutStyle]: null,
        [Text_style]: null,
        [Text_textSpan]: null,
        [Text_data]: "Page Not Found"
      });
    },
    get C67() {
      return C[67] = dart.const({
        __proto__: nav_bar.CupertinoNavigationBar.prototype,
        [Widget_key]: null,
        [CupertinoNavigationBar_heroTag]: C[68] || CT.C68,
        [CupertinoNavigationBar_transitionBetweenRoutes]: true,
        [CupertinoNavigationBar_border]: C[69] || CT.C69,
        [CupertinoNavigationBar_padding]: null,
        [CupertinoNavigationBar_brightness]: null,
        [CupertinoNavigationBar_backgroundColor]: null,
        [CupertinoNavigationBar_trailing]: null,
        [CupertinoNavigationBar_middle]: C[74] || CT.C74,
        [CupertinoNavigationBar_previousPageTitle]: null,
        [CupertinoNavigationBar_automaticallyImplyMiddle]: true,
        [CupertinoNavigationBar_automaticallyImplyLeading]: true,
        [CupertinoNavigationBar_leading]: null
      });
    },
    get C75() {
      return C[75] = dart.const({
        __proto__: text.Text.prototype,
        [Widget_key]: null,
        [Text_selectionColor]: null,
        [Text_textHeightBehavior]: null,
        [Text_textWidthBasis]: null,
        [Text_semanticsLabel]: null,
        [Text_maxLines]: null,
        [Text_textScaleFactor]: null,
        [Text_overflow]: null,
        [Text_softWrap]: null,
        [Text_locale]: null,
        [Text_textDirection]: null,
        [Text_textAlign]: null,
        [Text_strutStyle]: null,
        [Text_style]: null,
        [Text_textSpan]: null,
        [Text_data]: "Home"
      });
    },
    get C78() {
      return C[78] = dart.const({
        __proto__: ui.FontWeight.prototype,
        [FontWeight_value]: 700,
        [FontWeight_index]: 6
      });
    },
    get C77() {
      return C[77] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [TextStyle_overflow]: null,
        [TextStyle_fontVariations]: null,
        [TextStyle_fontFeatures]: null,
        [TextStyle_shadows]: null,
        [TextStyle_debugLabel]: null,
        [TextStyle_decorationThickness]: null,
        [TextStyle_decorationStyle]: null,
        [TextStyle_decorationColor]: null,
        [TextStyle_decoration]: null,
        [TextStyle_background]: null,
        [TextStyle_foreground]: null,
        [TextStyle_locale]: null,
        [TextStyle_leadingDistribution]: null,
        [TextStyle_height]: null,
        [TextStyle_textBaseline]: null,
        [TextStyle_wordSpacing]: null,
        [TextStyle_letterSpacing]: null,
        [TextStyle_fontStyle]: null,
        [TextStyle_fontWeight]: C[78] || CT.C78,
        [TextStyle_fontSize]: null,
        [TextStyle__package]: null,
        [TextStyle__fontFamilyFallback]: null,
        [TextStyle_fontFamily]: null,
        [TextStyle_backgroundColor]: null,
        [TextStyle_color]: null,
        [TextStyle_inherit]: true
      });
    },
    get C76() {
      return C[76] = dart.const({
        __proto__: text.Text.prototype,
        [Widget_key]: null,
        [Text_selectionColor]: null,
        [Text_textHeightBehavior]: null,
        [Text_textWidthBasis]: null,
        [Text_semanticsLabel]: null,
        [Text_maxLines]: null,
        [Text_textScaleFactor]: null,
        [Text_overflow]: null,
        [Text_softWrap]: null,
        [Text_locale]: null,
        [Text_textDirection]: null,
        [Text_textAlign]: null,
        [Text_strutStyle]: null,
        [Text_style]: C[77] || CT.C77,
        [Text_textSpan]: null,
        [Text_data]: "Page Not Found"
      });
    },
    get C79() {
      return C[79] = dart.const({
        __proto__: basic.SizedBox.prototype,
        [Widget_key]: null,
        [SingleChildRenderObjectWidget_child]: null,
        [SizedBox_height]: 16,
        [SizedBox_width]: null
      });
    },
    get C82() {
      return C[82] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294967295
      });
    },
    get C81() {
      return C[81] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [TextStyle_overflow]: null,
        [TextStyle_fontVariations]: null,
        [TextStyle_fontFeatures]: null,
        [TextStyle_shadows]: null,
        [TextStyle_debugLabel]: null,
        [TextStyle_decorationThickness]: null,
        [TextStyle_decorationStyle]: null,
        [TextStyle_decorationColor]: null,
        [TextStyle_decoration]: null,
        [TextStyle_background]: null,
        [TextStyle_foreground]: null,
        [TextStyle_locale]: null,
        [TextStyle_leadingDistribution]: null,
        [TextStyle_height]: null,
        [TextStyle_textBaseline]: null,
        [TextStyle_wordSpacing]: null,
        [TextStyle_letterSpacing]: null,
        [TextStyle_fontStyle]: null,
        [TextStyle_fontWeight]: null,
        [TextStyle_fontSize]: null,
        [TextStyle__package]: null,
        [TextStyle__fontFamilyFallback]: null,
        [TextStyle_fontFamily]: null,
        [TextStyle_backgroundColor]: null,
        [TextStyle_color]: C[82] || CT.C82,
        [TextStyle_inherit]: true
      });
    },
    get C80() {
      return C[80] = dart.const({
        __proto__: text.Text.prototype,
        [Widget_key]: null,
        [Text_selectionColor]: null,
        [Text_textHeightBehavior]: null,
        [Text_textWidthBasis]: null,
        [Text_semanticsLabel]: null,
        [Text_maxLines]: null,
        [Text_textScaleFactor]: null,
        [Text_overflow]: null,
        [Text_softWrap]: null,
        [Text_locale]: null,
        [Text_textDirection]: null,
        [Text_textAlign]: null,
        [Text_strutStyle]: null,
        [Text_style]: C[81] || CT.C81,
        [Text_textSpan]: null,
        [Text_data]: "Go to home page"
      });
    },
    get C83() {
      return C[83] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4280391411
      });
    },
    get C84() {
      return C[84] = dart.const({
        __proto__: level.Level.prototype,
        [value$0]: 0,
        [name$1]: "ALL"
      });
    },
    get C85() {
      return C[85] = dart.const({
        __proto__: level.Level.prototype,
        [value$0]: 2000,
        [name$1]: "OFF"
      });
    },
    get C86() {
      return C[86] = dart.const({
        __proto__: level.Level.prototype,
        [value$0]: 300,
        [name$1]: "FINEST"
      });
    },
    get C87() {
      return C[87] = dart.const({
        __proto__: level.Level.prototype,
        [value$0]: 400,
        [name$1]: "FINER"
      });
    },
    get C88() {
      return C[88] = dart.const({
        __proto__: level.Level.prototype,
        [value$0]: 500,
        [name$1]: "FINE"
      });
    },
    get C89() {
      return C[89] = dart.const({
        __proto__: level.Level.prototype,
        [value$0]: 700,
        [name$1]: "CONFIG"
      });
    },
    get C90() {
      return C[90] = dart.const({
        __proto__: level.Level.prototype,
        [value$0]: 800,
        [name$1]: "INFO"
      });
    },
    get C91() {
      return C[91] = dart.const({
        __proto__: level.Level.prototype,
        [value$0]: 900,
        [name$1]: "WARNING"
      });
    },
    get C92() {
      return C[92] = dart.const({
        __proto__: level.Level.prototype,
        [value$0]: 1000,
        [name$1]: "SEVERE"
      });
    },
    get C93() {
      return C[93] = dart.const({
        __proto__: level.Level.prototype,
        [value$0]: 1200,
        [name$1]: "SHOUT"
      });
    },
    get C94() {
      return C[94] = dart.constList([C[84] || CT.C84, C[86] || CT.C86, C[87] || CT.C87, C[88] || CT.C88, C[89] || CT.C89, C[90] || CT.C90, C[91] || CT.C91, C[92] || CT.C92, C[93] || CT.C93, C[85] || CT.C85], level.Level);
    }
  }, false);
  var C = Array(95).fill(void 0);
  var I = [
    "package:flutter_app/app.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/shared_preferences-2.2.2/lib/shared_preferences.dart",
    "package:shared_preferences/shared_preferences.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/plugin_platform_interface-2.1.6/lib/plugin_platform_interface.dart",
    "package:plugin_platform_interface/plugin_platform_interface.dart",
    "package:shared_preferences_platform_interface/shared_preferences_platform_interface.dart",
    "package:shared_preferences_web/shared_preferences_web.dart",
    "package:flutter_app/app_router.dart",
    "package:flutter_app/app_state_provider.dart",
    "package:shared_preferences_platform_interface/types.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/go_router-3.1.1/lib/src/go_router.dart",
    "package:go_router/src/go_router.dart",
    "package:go_router/src/custom_transition_page.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/go_router-3.1.1/lib/src/go_route.dart",
    "package:go_router/src/go_route.dart",
    "package:go_router/src/go_router_refresh_stream.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/go_router-3.1.1/lib/src/go_router_state.dart",
    "package:go_router/src/go_router_state.dart",
    "package:go_router/src/inherited_go_router.dart",
    "package:go_router/src/route_data.dart",
    "package:go_router/src/url_path_strategy.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/provider-6.1.1/lib/src/inherited_provider.dart",
    "package:nested/nested.dart",
    "package:provider/src/provider.dart",
    "package:provider/src/async_provider.dart",
    "package:provider/src/listenable_provider.dart",
    "package:provider/src/change_notifier_provider.dart",
    "package:provider/src/consumer.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/nested-1.0.0/lib/nested.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/provider-6.1.1/lib/src/provider.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/provider-6.1.1/lib/src/deferred_inherited_provider.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/provider-6.1.1/lib/src/devtool.dart",
    "package:provider/src/proxy_provider.dart",
    "package:provider/src/reassemble_handler.dart",
    "package:provider/src/selector.dart",
    "package:provider/src/value_listenable_provider.dart",
    "package:flutter_app/router_utils.dart",
    "package:flutter_app/home.dart",
    "package:flutter_app/onboard_screen.dart",
    "package:flutter_app/auth_screen.dart",
    "package:shared_preferences_platform_interface/method_channel_shared_preferences.dart",
    "package:go_router/src/go_route_information_parser.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/go_router-3.1.1/lib/src/go_router_delegate.dart",
    "package:go_router/src/go_router_delegate.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/go_router-3.1.1/lib/src/go_route_match.dart",
    "package:go_router/src/go_route_match.dart",
    "package:flutter_app/auth_form_widget.dart",
    "package:go_router/src/go_router_cupertino.dart",
    "package:go_router/src/go_router_error_page.dart",
    "package:go_router/src/go_router_material.dart",
    "package:flutter_app/auth_validators.dart",
    "package:logging/src/level.dart",
    "package:logging/src/log_record.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/logging-1.2.0/lib/src/logger.dart",
    "package:logging/src/logger.dart"
  ];
  $46zapp_entry.runAppGuarded = function runAppGuarded() {
    async.runZonedGuarded(core.Null, dart.fn(() => {
      if (T$.ListOfStringTodynamic().is(C[0] || CT.C0)) {
        T$.ListOfStringTodynamic().as(C[0] || CT.C0)(T$.JSArrayOfString().of([]));
      } else {
        (C[0] || CT.C0)();
      }
      if (js.context.hasProperty("__notifyFlutterRendered")) {
        async.Future.delayed(new core.Duration.new({milliseconds: 250})).then(core.Null, dart.fn(_ => {
          js.context.callMethod("__notifyFlutterRendered", [false]);
        }, T$.dynamicToNull()));
      }
    }, T$.VoidToNull()), dart.fn((e, stackTrace) => {
      if (js.context.hasProperty("zappHandlerUserError")) {
        js.context.callMethod("zappHandlerUserError", [e[$toString](), stackTrace.toString()]);
      }
    }, T$.ObjectAndStackTraceTovoid()), {zoneSpecification: new async._ZoneSpecification.new({print: dart.fn((self, parent, zone, line) => {
          if (js.context.hasProperty("zappHandlerUserPrint")) {
            js.context.callMethod("zappHandlerUserPrint", [line]);
          }
        }, T$.ZoneAndZoneDelegateAndZone__Tovoid())})});
  };
  $46zapp_entry.main = function main$() {
    return async.async(dart.void, function* main() {
      yield ui.webOnlyWarmupEngine({runApp: dart.fn(() => {
          $46zapp_entry.runAppGuarded();
        }, T$.VoidToNull()), registerPlugins: dart.fn(() => {
          web_plugin_registrant.registerPlugins();
        }, T$.VoidToNull())});
    });
  };
  main.main = function main$0() {
    return async.async(dart.void, function* main() {
      binding.WidgetsFlutterBinding.ensureInitialized();
      let prefs = (yield shared_preferences.SharedPreferences.getInstance());
      system_chrome.SystemChrome.setSystemUIOverlayStyle(system_chrome.SystemUiOverlayStyle.dark.copyWith({statusBarColor: colors.Colors.black38}));
      binding.runApp(new app$1.MyApp.new({prefs: prefs}));
    });
  };
  web_plugin_registrant.registerPlugins = function registerPlugins(pluginRegistrar = null) {
    let t0;
    let registrar = (t0 = pluginRegistrar, t0 == null ? plugin_registry.webPluginRegistrar : t0);
    shared_preferences_web.SharedPreferencesPlugin.registerWith(registrar);
    registrar.registerMessageHandler();
  };
  var prefs$ = dart.privateName(app$1, "MyApp.prefs");
  app$1.MyApp = class MyApp extends framework.StatefulWidget {
    get prefs() {
      return this[prefs$];
    }
    set prefs(value) {
      this[prefs$] = value;
    }
    static ['_#new#tearOff'](opts) {
      let prefs = opts && 'prefs' in opts ? opts.prefs : null;
      let key = opts && 'key' in opts ? opts.key : null;
      return new app$1.MyApp.new({prefs: prefs, key: key});
    }
    createState() {
      return new app$1._MyAppState.new();
    }
  };
  (app$1.MyApp.new = function(opts) {
    let prefs = opts && 'prefs' in opts ? opts.prefs : null;
    let key = opts && 'key' in opts ? opts.key : null;
    this[prefs$] = prefs;
    app$1.MyApp.__proto__.new.call(this, {key: key});
    ;
  }).prototype = app$1.MyApp.prototype;
  dart.addTypeTests(app$1.MyApp);
  dart.addTypeCaches(app$1.MyApp);
  dart.setMethodSignature(app$1.MyApp, () => ({
    __proto__: dart.getMethods(app$1.MyApp.__proto__),
    createState: dart.fnType(framework.State$(app$1.MyApp), [])
  }));
  dart.setLibraryUri(app$1.MyApp, I[0]);
  dart.setFieldSignature(app$1.MyApp, () => ({
    __proto__: dart.getFields(app$1.MyApp.__proto__),
    prefs: dart.fieldType(shared_preferences.SharedPreferences)
  }));
  app$1._MyAppState = class _MyAppState extends framework.State$(app$1.MyApp) {
    build(context) {
      return new provider$.MultiProvider.new({providers: T$.JSArrayOfSingleChildWidget().of([new (T$.ChangeNotifierProviderOfAppStateProvider()).new({create: dart.fn(context => new app_state_provider.AppStateProvider.new(), T$.BuildContextToAppStateProvider())}), new (T$.ProxyProviderOfAppStateProvider$AppRouter()).new({update: dart.fn((context, appStateProvider, _) => new app_router.AppRouter.new({appStateProvider: appStateProvider, prefs: this.widget.prefs}), T$.BuildContextAndAppStateProviderAndAppRouterNToAppRouter())})]), child: new basic.Builder.new({builder: dart.fn(context => {
            let router = go_router$.GoRouter.as(provider$.Provider.of(app_router.AppRouter, context).router);
            return new app.MaterialApp.router({routeInformationParser: router.routeInformationParser, theme: app_theme.defaultTheme, routerDelegate: router.routerDelegate});
          }, T$.BuildContextToMaterialApp())})});
    }
    static ['_#new#tearOff']() {
      return new app$1._MyAppState.new();
    }
  };
  (app$1._MyAppState.new = function() {
    app$1._MyAppState.__proto__.new.call(this);
    ;
  }).prototype = app$1._MyAppState.prototype;
  dart.addTypeTests(app$1._MyAppState);
  dart.addTypeCaches(app$1._MyAppState);
  dart.setMethodSignature(app$1._MyAppState, () => ({
    __proto__: dart.getMethods(app$1._MyAppState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(app$1._MyAppState, I[0]);
  var _preferenceCache$ = dart.privateName(shared_preferences, "_preferenceCache");
  var _setValue = dart.privateName(shared_preferences, "_setValue");
  shared_preferences.SharedPreferences = class SharedPreferences extends core.Object {
    static ['_#_#tearOff'](_preferenceCache) {
      return new shared_preferences.SharedPreferences.__(_preferenceCache);
    }
    static get _store() {
      return shared_preferences_platform_interface.SharedPreferencesStorePlatform.instance;
    }
    static setPrefix(prefix, opts) {
      let allowList = opts && 'allowList' in opts ? opts.allowList : null;
      if (shared_preferences.SharedPreferences._completer != null) {
        dart.throw(new core.StateError.new("setPrefix cannot be called after getInstance"));
      }
      shared_preferences.SharedPreferences._prefix = prefix;
      shared_preferences.SharedPreferences._prefixHasBeenChanged = true;
      shared_preferences.SharedPreferences._allowList = allowList;
    }
    static resetStatic() {
      shared_preferences.SharedPreferences._completer = null;
      shared_preferences.SharedPreferences._prefix = "flutter.";
      shared_preferences.SharedPreferences._prefixHasBeenChanged = false;
      shared_preferences.SharedPreferences._allowList = null;
    }
    static getInstance() {
      return async.async(shared_preferences.SharedPreferences, function* getInstance() {
        if (shared_preferences.SharedPreferences._completer == null) {
          let completer = T$.CompleterOfSharedPreferences().new();
          shared_preferences.SharedPreferences._completer = completer;
          try {
            let preferencesMap = (yield shared_preferences.SharedPreferences._getSharedPreferencesMap());
            completer.complete(new shared_preferences.SharedPreferences.__(preferencesMap));
          } catch (e$) {
            let e = dart.getThrown(e$);
            if (core.Object.is(e)) {
              completer.completeError(e);
              let sharedPrefsFuture = completer.future;
              shared_preferences.SharedPreferences._completer = null;
              return sharedPrefsFuture;
            } else
              throw e$;
          }
        }
        return dart.nullCheck(shared_preferences.SharedPreferences._completer).future;
      });
    }
    getKeys() {
      return T$.LinkedHashSetOfString().from(this[_preferenceCache$][$keys]);
    }
    get(key) {
      return this[_preferenceCache$][$_get](key);
    }
    getBool(key) {
      return T$.boolN().as(this[_preferenceCache$][$_get](key));
    }
    getInt(key) {
      return T$.intN().as(this[_preferenceCache$][$_get](key));
    }
    getDouble(key) {
      return T$.doubleN().as(this[_preferenceCache$][$_get](key));
    }
    getString(key) {
      return T$.StringN().as(this[_preferenceCache$][$_get](key));
    }
    containsKey(key) {
      return this[_preferenceCache$][$containsKey](key);
    }
    getStringList(key) {
      let t1;
      let list = T$.ListN().as(this[_preferenceCache$][$_get](key));
      if (list != null && !T$.ListOfString().is(list)) {
        list = list[$cast](core.String)[$toList]();
        this[_preferenceCache$][$_set](key, list);
      }
      return T$.ListNOfString().as((t1 = list, t1 == null ? null : t1[$toList]()));
    }
    setBool(key, value) {
      return this[_setValue]("Bool", key, value);
    }
    setInt(key, value) {
      return this[_setValue]("Int", key, value);
    }
    setDouble(key, value) {
      return this[_setValue]("Double", key, value);
    }
    setString(key, value) {
      return this[_setValue]("String", key, value);
    }
    setStringList(key, value) {
      return this[_setValue]("StringList", key, value);
    }
    remove(key) {
      let prefixedKey = shared_preferences.SharedPreferences._prefix + key;
      this[_preferenceCache$][$remove](key);
      return shared_preferences.SharedPreferences._store.remove(prefixedKey);
    }
    [_setValue](valueType, key, value) {
      core.ArgumentError.checkNotNull(core.Object, value, "value");
      let prefixedKey = shared_preferences.SharedPreferences._prefix + key;
      if (T$.ListOfString().is(value)) {
        this[_preferenceCache$][$_set](key, value[$toList]());
      } else {
        this[_preferenceCache$][$_set](key, value);
      }
      return shared_preferences.SharedPreferences._store.setValue(valueType, prefixedKey, value);
    }
    commit() {
      return async.async(core.bool, function* commit() {
        return true;
      });
    }
    clear() {
      this[_preferenceCache$][$clear]();
      if (shared_preferences.SharedPreferences._prefixHasBeenChanged) {
        try {
          return shared_preferences.SharedPreferences._store.clearWithParameters(new types.ClearParameters.new({filter: new types.PreferencesFilter.new({prefix: shared_preferences.SharedPreferences._prefix, allowList: shared_preferences.SharedPreferences._allowList})}));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            if (core.UnimplementedError.is(e)) {
              dart.throw(new core.UnimplementedError.new("This implementation of Shared Preferences doesn't yet support the setPrefix method.\nEither update the implementation to support setPrefix, or do not call setPrefix.\n        "));
            } else {
              dart.rethrow(e$);
            }
          } else
            throw e$;
        }
      }
      return shared_preferences.SharedPreferences._store.clear();
    }
    reload() {
      return async.async(dart.void, (function* reload() {
        let preferences = (yield shared_preferences.SharedPreferences._getSharedPreferencesMap());
        this[_preferenceCache$][$clear]();
        this[_preferenceCache$][$addAll](preferences);
      }).bind(this));
    }
    static _getSharedPreferencesMap() {
      return async.async(T$.MapOfString$Object(), function* _getSharedPreferencesMap() {
        let fromSystem = new (T$.IdentityMapOfString$Object()).new();
        if (shared_preferences.SharedPreferences._prefixHasBeenChanged) {
          try {
            fromSystem[$addAll](yield shared_preferences.SharedPreferences._store.getAllWithParameters(new types.GetAllParameters.new({filter: new types.PreferencesFilter.new({prefix: shared_preferences.SharedPreferences._prefix, allowList: shared_preferences.SharedPreferences._allowList})})));
          } catch (e$) {
            let e = dart.getThrown(e$);
            if (core.Object.is(e)) {
              if (core.UnimplementedError.is(e)) {
                dart.throw(new core.UnimplementedError.new("This implementation of Shared Preferences doesn't yet support the setPrefix method.\nEither update the implementation to support setPrefix, or do not call setPrefix.\n        "));
              } else {
                dart.rethrow(e$);
              }
            } else
              throw e$;
          }
        } else {
          fromSystem[$addAll](yield shared_preferences.SharedPreferences._store.getAll());
        }
        if (shared_preferences.SharedPreferences._prefix[$isEmpty]) {
          return fromSystem;
        }
        let preferencesMap = new (T$.IdentityMapOfString$Object()).new();
        for (let key of fromSystem[$keys]) {
          if (!key[$startsWith](shared_preferences.SharedPreferences._prefix)) dart.assertFailed(null, I[1], 264, 14, "key.startsWith(_prefix)");
          preferencesMap[$_set](key[$substring](shared_preferences.SharedPreferences._prefix.length), dart.nullCheck(fromSystem[$_get](key)));
        }
        return preferencesMap;
      });
    }
    static setMockInitialValues(values) {
      let newValues = values[$map](core.String, core.Object, dart.fn((key, value) => {
        let newKey = key;
        if (!key[$startsWith](shared_preferences.SharedPreferences._prefix)) {
          newKey = shared_preferences.SharedPreferences._prefix + key;
        }
        return new (T$.MapEntryOfString$Object()).__(newKey, value);
      }, T$.StringAndObjectToMapEntryOfString$Object()));
      shared_preferences_platform_interface.SharedPreferencesStorePlatform.instance = new shared_preferences_platform_interface.InMemorySharedPreferencesStore.withData(newValues);
      shared_preferences.SharedPreferences._completer = null;
    }
  };
  (shared_preferences.SharedPreferences.__ = function(_preferenceCache) {
    this[_preferenceCache$] = _preferenceCache;
    ;
  }).prototype = shared_preferences.SharedPreferences.prototype;
  dart.addTypeTests(shared_preferences.SharedPreferences);
  dart.addTypeCaches(shared_preferences.SharedPreferences);
  dart.setMethodSignature(shared_preferences.SharedPreferences, () => ({
    __proto__: dart.getMethods(shared_preferences.SharedPreferences.__proto__),
    getKeys: dart.fnType(core.Set$(core.String), []),
    get: dart.fnType(dart.nullable(core.Object), [core.String]),
    getBool: dart.fnType(dart.nullable(core.bool), [core.String]),
    getInt: dart.fnType(dart.nullable(core.int), [core.String]),
    getDouble: dart.fnType(dart.nullable(core.double), [core.String]),
    getString: dart.fnType(dart.nullable(core.String), [core.String]),
    containsKey: dart.fnType(core.bool, [core.String]),
    getStringList: dart.fnType(dart.nullable(core.List$(core.String)), [core.String]),
    setBool: dart.fnType(async.Future$(core.bool), [core.String, core.bool]),
    setInt: dart.fnType(async.Future$(core.bool), [core.String, core.int]),
    setDouble: dart.fnType(async.Future$(core.bool), [core.String, core.double]),
    setString: dart.fnType(async.Future$(core.bool), [core.String, core.String]),
    setStringList: dart.fnType(async.Future$(core.bool), [core.String, core.List$(core.String)]),
    remove: dart.fnType(async.Future$(core.bool), [core.String]),
    [_setValue]: dart.fnType(async.Future$(core.bool), [core.String, core.String, core.Object]),
    commit: dart.fnType(async.Future$(core.bool), []),
    clear: dart.fnType(async.Future$(core.bool), []),
    reload: dart.fnType(async.Future$(dart.void), [])
  }));
  dart.setStaticMethodSignature(shared_preferences.SharedPreferences, () => ['setPrefix', 'resetStatic', 'getInstance', '_getSharedPreferencesMap', 'setMockInitialValues']);
  dart.setStaticGetterSignature(shared_preferences.SharedPreferences, () => ['_store']);
  dart.setLibraryUri(shared_preferences.SharedPreferences, I[2]);
  dart.setFieldSignature(shared_preferences.SharedPreferences, () => ({
    __proto__: dart.getFields(shared_preferences.SharedPreferences.__proto__),
    [_preferenceCache$]: dart.finalFieldType(core.Map$(core.String, core.Object))
  }));
  dart.setStaticFieldSignature(shared_preferences.SharedPreferences, () => ['_prefix', '_prefixHasBeenChanged', '_allowList', '_completer']);
  dart.defineLazy(shared_preferences.SharedPreferences, {
    /*shared_preferences.SharedPreferences._prefix*/get _prefix() {
      return "flutter.";
    },
    set _prefix(value) {},
    /*shared_preferences.SharedPreferences._prefixHasBeenChanged*/get _prefixHasBeenChanged() {
      return false;
    },
    set _prefixHasBeenChanged(value) {},
    /*shared_preferences.SharedPreferences._allowList*/get _allowList() {
      return null;
    },
    set _allowList(value) {},
    /*shared_preferences.SharedPreferences._completer*/get _completer() {
      return null;
    },
    set _completer(value) {}
  }, false);
  var _getFilteredKeys = dart.privateName(shared_preferences_web, "_getFilteredKeys");
  var _decodeValue = dart.privateName(shared_preferences_web, "_decodeValue");
  var _encodeValue = dart.privateName(shared_preferences_web, "_encodeValue");
  plugin_platform_interface.PlatformInterface = class PlatformInterface extends core.Object {
    static verify(instance, token) {
      plugin_platform_interface.PlatformInterface._verify(instance, token, {preventConstObject: true});
    }
    static verifyToken(instance, token) {
      plugin_platform_interface.PlatformInterface._verify(instance, token, {preventConstObject: false});
    }
    static _verify(instance, token, opts) {
      let preventConstObject = opts && 'preventConstObject' in opts ? opts.preventConstObject : null;
      if (plugin_platform_interface.MockPlatformInterfaceMixin.is(instance)) {
        let assertionsEnabled = false;
        if (!dart.fn(() => {
          assertionsEnabled = true;
          return true;
        }, T$.VoidTobool())()) dart.assertFailed(null, I[3], 92, 14, "() {\n        assertionsEnabled = true;\n        return true;\n      }()");
        if (!assertionsEnabled) {
          dart.throw(new core.AssertionError.new("`MockPlatformInterfaceMixin` is not intended for use in release builds."));
        }
        return;
      }
      if (preventConstObject && plugin_platform_interface.PlatformInterface._instanceTokens._get(instance) === (C[1] || CT.C1)) {
        dart.throw(new core.AssertionError.new("`const Object()` cannot be used as the token."));
      }
      if (token !== plugin_platform_interface.PlatformInterface._instanceTokens._get(instance)) {
        dart.throw(new core.AssertionError.new("Platform interfaces must not be implemented with `implements`"));
      }
    }
  };
  (plugin_platform_interface.PlatformInterface.new = function(opts) {
    let token = opts && 'token' in opts ? opts.token : null;
    plugin_platform_interface.PlatformInterface._instanceTokens._set(this, token);
  }).prototype = plugin_platform_interface.PlatformInterface.prototype;
  dart.addTypeTests(plugin_platform_interface.PlatformInterface);
  dart.addTypeCaches(plugin_platform_interface.PlatformInterface);
  dart.setStaticMethodSignature(plugin_platform_interface.PlatformInterface, () => ['verify', 'verifyToken', '_verify']);
  dart.setLibraryUri(plugin_platform_interface.PlatformInterface, I[4]);
  dart.setStaticFieldSignature(plugin_platform_interface.PlatformInterface, () => ['_instanceTokens']);
  dart.defineLazy(plugin_platform_interface.PlatformInterface, {
    /*plugin_platform_interface.PlatformInterface._instanceTokens*/get _instanceTokens() {
      return new (T$.ExpandoOfObject()).new();
    }
  }, false);
  shared_preferences_platform_interface.SharedPreferencesStorePlatform = class SharedPreferencesStorePlatform extends plugin_platform_interface.PlatformInterface {
    static get instance() {
      return shared_preferences_platform_interface.SharedPreferencesStorePlatform._instance;
    }
    static set instance(instance) {
      if (!instance.isMock) {
        plugin_platform_interface.PlatformInterface.verify(instance, shared_preferences_platform_interface.SharedPreferencesStorePlatform._token);
      }
      shared_preferences_platform_interface.SharedPreferencesStorePlatform._instance = instance;
    }
    get isMock() {
      return false;
    }
    clearWithPrefix(prefix) {
      dart.throw(new core.UnimplementedError.new("clearWithPrefix is not implemented."));
    }
    clearWithParameters(parameters) {
      dart.throw(new core.UnimplementedError.new("clearWithParameters is not implemented."));
    }
    getAllWithPrefix(prefix) {
      dart.throw(new core.UnimplementedError.new("getAllWithPrefix is not implemented."));
    }
    getAllWithParameters(parameters) {
      dart.throw(new core.UnimplementedError.new("getAllWithParameters is not implemented."));
    }
  };
  (shared_preferences_platform_interface.SharedPreferencesStorePlatform.new = function() {
    shared_preferences_platform_interface.SharedPreferencesStorePlatform.__proto__.new.call(this, {token: shared_preferences_platform_interface.SharedPreferencesStorePlatform._token});
    ;
  }).prototype = shared_preferences_platform_interface.SharedPreferencesStorePlatform.prototype;
  dart.addTypeTests(shared_preferences_platform_interface.SharedPreferencesStorePlatform);
  dart.addTypeCaches(shared_preferences_platform_interface.SharedPreferencesStorePlatform);
  dart.setMethodSignature(shared_preferences_platform_interface.SharedPreferencesStorePlatform, () => ({
    __proto__: dart.getMethods(shared_preferences_platform_interface.SharedPreferencesStorePlatform.__proto__),
    clearWithPrefix: dart.fnType(async.Future$(core.bool), [core.String]),
    clearWithParameters: dart.fnType(async.Future$(core.bool), [types.ClearParameters]),
    getAllWithPrefix: dart.fnType(async.Future$(core.Map$(core.String, core.Object)), [core.String]),
    getAllWithParameters: dart.fnType(async.Future$(core.Map$(core.String, core.Object)), [types.GetAllParameters])
  }));
  dart.setGetterSignature(shared_preferences_platform_interface.SharedPreferencesStorePlatform, () => ({
    __proto__: dart.getGetters(shared_preferences_platform_interface.SharedPreferencesStorePlatform.__proto__),
    isMock: core.bool
  }));
  dart.setStaticGetterSignature(shared_preferences_platform_interface.SharedPreferencesStorePlatform, () => ['instance']);
  dart.setStaticSetterSignature(shared_preferences_platform_interface.SharedPreferencesStorePlatform, () => ['instance']);
  dart.setLibraryUri(shared_preferences_platform_interface.SharedPreferencesStorePlatform, I[5]);
  dart.setStaticFieldSignature(shared_preferences_platform_interface.SharedPreferencesStorePlatform, () => ['_token', '_instance']);
  dart.defineLazy(shared_preferences_platform_interface.SharedPreferencesStorePlatform, {
    /*shared_preferences_platform_interface.SharedPreferencesStorePlatform._token*/get _token() {
      return new core.Object.new();
    },
    /*shared_preferences_platform_interface.SharedPreferencesStorePlatform._instance*/get _instance() {
      return new method_channel_shared_preferences.MethodChannelSharedPreferencesStore.new();
    },
    set _instance(value) {}
  }, false);
  shared_preferences_web.SharedPreferencesPlugin = class SharedPreferencesPlugin extends shared_preferences_platform_interface.SharedPreferencesStorePlatform {
    static registerWith(registrar) {
      shared_preferences_platform_interface.SharedPreferencesStorePlatform.instance = new shared_preferences_web.SharedPreferencesPlugin.new();
    }
    clear() {
      return async.async(core.bool, (function* clear() {
        return this.clearWithParameters(new types.ClearParameters.new({filter: new types.PreferencesFilter.new({prefix: "flutter."})}));
      }).bind(this));
    }
    clearWithPrefix(prefix) {
      return async.async(core.bool, (function* clearWithPrefix() {
        return this.clearWithParameters(new types.ClearParameters.new({filter: new types.PreferencesFilter.new({prefix: prefix})}));
      }).bind(this));
    }
    clearWithParameters(parameters) {
      return async.async(core.bool, (function* clearWithParameters() {
        let filter = parameters.filter;
        this[_getFilteredKeys](filter.prefix, {allowList: filter.allowList})[$forEach](dart.bind(html.window[$localStorage], $remove));
        return true;
      }).bind(this));
    }
    getAll() {
      return async.async(T$.MapOfString$Object(), (function* getAll() {
        return this.getAllWithParameters(new types.GetAllParameters.new({filter: new types.PreferencesFilter.new({prefix: "flutter."})}));
      }).bind(this));
    }
    getAllWithPrefix(prefix) {
      return async.async(T$.MapOfString$Object(), (function* getAllWithPrefix() {
        return this.getAllWithParameters(new types.GetAllParameters.new({filter: new types.PreferencesFilter.new({prefix: prefix})}));
      }).bind(this));
    }
    getAllWithParameters(parameters) {
      return async.async(T$.MapOfString$Object(), (function* getAllWithParameters() {
        let filter = parameters.filter;
        let allData = new (T$.IdentityMapOfString$Object()).new();
        for (let key of this[_getFilteredKeys](filter.prefix, {allowList: filter.allowList})) {
          allData[$_set](key, this[_decodeValue](dart.nullCheck(html.window[$localStorage][$_get](key))));
        }
        return allData;
      }).bind(this));
    }
    remove(key) {
      return async.async(core.bool, function* remove() {
        html.window[$localStorage][$remove](key);
        return true;
      });
    }
    setValue(valueType, key, value) {
      return async.async(core.bool, (function* setValue() {
        html.window[$localStorage][$_set](key, this[_encodeValue](value));
        return true;
      }).bind(this));
    }
    [_getFilteredKeys](prefix, opts) {
      let allowList = opts && 'allowList' in opts ? opts.allowList : null;
      return html.window[$localStorage][$keys][$where](dart.fn(key => {
        let t3, t3$;
        return key[$startsWith](prefix) && dart.test((t3$ = (t3 = allowList, t3 == null ? null : t3.contains(key)), t3$ == null ? true : t3$));
      }, T$.StringTobool()));
    }
    [_encodeValue](value) {
      return convert.json.encode(value);
    }
    [_decodeValue](encodedValue) {
      let decodedValue = convert.json.decode(encodedValue);
      if (core.List.is(decodedValue)) {
        return decodedValue[$cast](core.String);
      }
      return dart.nullCheck(decodedValue);
    }
    static ['_#new#tearOff']() {
      return new shared_preferences_web.SharedPreferencesPlugin.new();
    }
  };
  (shared_preferences_web.SharedPreferencesPlugin.new = function() {
    shared_preferences_web.SharedPreferencesPlugin.__proto__.new.call(this);
    ;
  }).prototype = shared_preferences_web.SharedPreferencesPlugin.prototype;
  dart.addTypeTests(shared_preferences_web.SharedPreferencesPlugin);
  dart.addTypeCaches(shared_preferences_web.SharedPreferencesPlugin);
  dart.setMethodSignature(shared_preferences_web.SharedPreferencesPlugin, () => ({
    __proto__: dart.getMethods(shared_preferences_web.SharedPreferencesPlugin.__proto__),
    clear: dart.fnType(async.Future$(core.bool), []),
    getAll: dart.fnType(async.Future$(core.Map$(core.String, core.Object)), []),
    remove: dart.fnType(async.Future$(core.bool), [core.String]),
    setValue: dart.fnType(async.Future$(core.bool), [core.String, core.String, dart.nullable(core.Object)]),
    [_getFilteredKeys]: dart.fnType(core.Iterable$(core.String), [core.String], {allowList: dart.nullable(core.Set$(core.String))}, {}),
    [_encodeValue]: dart.fnType(core.String, [dart.nullable(core.Object)]),
    [_decodeValue]: dart.fnType(core.Object, [core.String])
  }));
  dart.setStaticMethodSignature(shared_preferences_web.SharedPreferencesPlugin, () => ['registerWith']);
  dart.setLibraryUri(shared_preferences_web.SharedPreferencesPlugin, I[6]);
  dart.setStaticFieldSignature(shared_preferences_web.SharedPreferencesPlugin, () => ['_defaultPrefix']);
  dart.defineLazy(shared_preferences_web.SharedPreferencesPlugin, {
    /*shared_preferences_web.SharedPreferencesPlugin._defaultPrefix*/get _defaultPrefix() {
      return "flutter.";
    }
  }, false);
  go_router['GoRouterHelper|namedLocation'] = function GoRouterHelper$124namedLocation($this, name, opts) {
    let params = opts && 'params' in opts ? opts.params : C[2] || CT.C2;
    let queryParams = opts && 'queryParams' in opts ? opts.queryParams : C[2] || CT.C2;
    return go_router$.GoRouter.of($this).namedLocation(name, {params: params, queryParams: queryParams});
  };
  go_router['GoRouterHelper|get#namedLocation'] = function GoRouterHelper$124get$35namedLocation($this) {
    return dart.fn((name, opts) => {
      let params = opts && 'params' in opts ? opts.params : C[2] || CT.C2;
      let queryParams = opts && 'queryParams' in opts ? opts.queryParams : C[2] || CT.C2;
      return go_router['GoRouterHelper|namedLocation']($this, name, {params: params, queryParams: queryParams});
    }, T$.String__ToString());
  };
  go_router['GoRouterHelper|go'] = function GoRouterHelper$124go($this, location, opts) {
    let extra = opts && 'extra' in opts ? opts.extra : null;
    return go_router$.GoRouter.of($this).go(location, {extra: extra});
  };
  go_router['GoRouterHelper|get#go'] = function GoRouterHelper$124get$35go($this) {
    return dart.fn((location, opts) => {
      let extra = opts && 'extra' in opts ? opts.extra : null;
      return go_router['GoRouterHelper|go']($this, location, {extra: extra});
    }, T$.String__Tovoid());
  };
  go_router['GoRouterHelper|goNamed'] = function GoRouterHelper$124goNamed($this, name, opts) {
    let params = opts && 'params' in opts ? opts.params : C[2] || CT.C2;
    let queryParams = opts && 'queryParams' in opts ? opts.queryParams : C[2] || CT.C2;
    let extra = opts && 'extra' in opts ? opts.extra : null;
    return go_router$.GoRouter.of($this).goNamed(name, {params: params, queryParams: queryParams, extra: extra});
  };
  go_router['GoRouterHelper|get#goNamed'] = function GoRouterHelper$124get$35goNamed($this) {
    return dart.fn((name, opts) => {
      let params = opts && 'params' in opts ? opts.params : C[2] || CT.C2;
      let queryParams = opts && 'queryParams' in opts ? opts.queryParams : C[2] || CT.C2;
      let extra = opts && 'extra' in opts ? opts.extra : null;
      return go_router['GoRouterHelper|goNamed']($this, name, {params: params, queryParams: queryParams, extra: extra});
    }, T$.String__Tovoid$1());
  };
  go_router['GoRouterHelper|push'] = function GoRouterHelper$124push($this, location, opts) {
    let extra = opts && 'extra' in opts ? opts.extra : null;
    return go_router$.GoRouter.of($this).push(location, {extra: extra});
  };
  go_router['GoRouterHelper|get#push'] = function GoRouterHelper$124get$35push($this) {
    return dart.fn((location, opts) => {
      let extra = opts && 'extra' in opts ? opts.extra : null;
      return go_router['GoRouterHelper|push']($this, location, {extra: extra});
    }, T$.String__Tovoid());
  };
  go_router['GoRouterHelper|pushNamed'] = function GoRouterHelper$124pushNamed($this, name, opts) {
    let params = opts && 'params' in opts ? opts.params : C[2] || CT.C2;
    let queryParams = opts && 'queryParams' in opts ? opts.queryParams : C[2] || CT.C2;
    let extra = opts && 'extra' in opts ? opts.extra : null;
    return go_router$.GoRouter.of($this).pushNamed(name, {params: params, queryParams: queryParams, extra: extra});
  };
  go_router['GoRouterHelper|get#pushNamed'] = function GoRouterHelper$124get$35pushNamed($this) {
    return dart.fn((name, opts) => {
      let params = opts && 'params' in opts ? opts.params : C[2] || CT.C2;
      let queryParams = opts && 'queryParams' in opts ? opts.queryParams : C[2] || CT.C2;
      let extra = opts && 'extra' in opts ? opts.extra : null;
      return go_router['GoRouterHelper|pushNamed']($this, name, {params: params, queryParams: queryParams, extra: extra});
    }, T$.String__Tovoid$1());
  };
  go_router['GoRouterHelper|pop'] = function GoRouterHelper$124pop($this) {
    return go_router$.GoRouter.of($this).pop();
  };
  go_router['GoRouterHelper|get#pop'] = function GoRouterHelper$124get$35pop($this) {
    return dart.fn(() => go_router['GoRouterHelper|pop']($this), T$.VoidTovoid());
  };
  var appStateProvider$ = dart.privateName(app_router, "AppRouter.appStateProvider");
  var __AppRouter_prefs = dart.privateName(app_router, "_#AppRouter#prefs");
  var __AppRouter__router = dart.privateName(app_router, "_#AppRouter#_router");
  var __AppRouter__router_isSet = dart.privateName(app_router, "_#AppRouter#_router#isSet");
  var _router = dart.privateName(app_router, "_router");
  var Widget_key = dart.privateName(framework, "Widget.key");
  app_router.AppRouter = class AppRouter extends core.Object {
    get appStateProvider() {
      return this[appStateProvider$];
    }
    set appStateProvider(value) {
      this[appStateProvider$] = value;
    }
    static ['_#new#tearOff'](opts) {
      let appStateProvider = opts && 'appStateProvider' in opts ? opts.appStateProvider : null;
      let prefs = opts && 'prefs' in opts ? opts.prefs : null;
      return new app_router.AppRouter.new({appStateProvider: appStateProvider, prefs: prefs});
    }
    get prefs() {
      let t15;
      t15 = this[__AppRouter_prefs];
      return t15 == null ? dart.throw(new _internal.LateError.fieldNI("prefs")) : t15;
    }
    set prefs(prefs$35param) {
      this[__AppRouter_prefs] = prefs$35param;
    }
    get router() {
      return this[_router];
    }
    get [_router]() {
      let t16, t15;
      t15 = this[__AppRouter__router];
      return t15 == null ? (t16 = new go_router$.GoRouter.new({refreshListenable: this.appStateProvider, initialLocation: "/", routes: T$.JSArrayOfGoRoute().of([new go_route.GoRoute.new({path: router_utils['AppPageExtension|get#routePath'](router_utils.APP_PAGE.home), name: router_utils['AppPageExtension|get#routeName'](router_utils.APP_PAGE.home), builder: dart.fn((context, state) => C[3] || CT.C3, T$.BuildContextAndGoRouterStateToHome())}), new go_route.GoRoute.new({path: router_utils['AppPageExtension|get#routePath'](router_utils.APP_PAGE.onboard), name: router_utils['AppPageExtension|get#routeName'](router_utils.APP_PAGE.onboard), builder: dart.fn((context, state) => C[4] || CT.C4, T$.BuildContextAndGoRouterStateToOnBoardScreen())}), new go_route.GoRoute.new({path: router_utils['AppPageExtension|get#routePath'](router_utils.APP_PAGE.auth), name: router_utils['AppPageExtension|get#routeName'](router_utils.APP_PAGE.auth), builder: dart.fn((context, state) => C[5] || CT.C5, T$.BuildContextAndGoRouterStateToAuthScreen())})]), redirect: dart.fn(state => {
          let onboardPath = state.namedLocation(router_utils['AppPageExtension|get#routeName'](router_utils.APP_PAGE.onboard));
          let isOnboarding = state.subloc === onboardPath;
          let toOnboard = this.prefs.containsKey("onBoardCount") ? false : true;
          if (toOnboard) {
            return isOnboarding ? null : onboardPath;
          }
          return null;
        }, T$.GoRouterStateToStringN())}), this[__AppRouter__router] == null ? this[__AppRouter__router] = t16 : dart.throw(new _internal.LateError.fieldADI("_router"))) : t15;
    }
  };
  (app_router.AppRouter.new = function(opts) {
    let appStateProvider = opts && 'appStateProvider' in opts ? opts.appStateProvider : null;
    let prefs = opts && 'prefs' in opts ? opts.prefs : null;
    this[__AppRouter_prefs] = null;
    this[__AppRouter__router] = null;
    this[__AppRouter__router_isSet] = false;
    this[appStateProvider$] = appStateProvider;
    this[__AppRouter_prefs] = prefs;
    ;
  }).prototype = app_router.AppRouter.prototype;
  dart.addTypeTests(app_router.AppRouter);
  dart.addTypeCaches(app_router.AppRouter);
  dart.setGetterSignature(app_router.AppRouter, () => ({
    __proto__: dart.getGetters(app_router.AppRouter.__proto__),
    prefs: shared_preferences.SharedPreferences,
    router: dart.dynamic,
    [_router]: go_router$.GoRouter
  }));
  dart.setSetterSignature(app_router.AppRouter, () => ({
    __proto__: dart.getSetters(app_router.AppRouter.__proto__),
    prefs: shared_preferences.SharedPreferences
  }));
  dart.setLibraryUri(app_router.AppRouter, I[7]);
  dart.setFieldSignature(app_router.AppRouter, () => ({
    __proto__: dart.getFields(app_router.AppRouter.__proto__),
    appStateProvider: dart.fieldType(app_state_provider.AppStateProvider),
    [__AppRouter_prefs]: dart.fieldType(dart.nullable(shared_preferences.SharedPreferences)),
    [__AppRouter__router]: dart.fieldType(dart.nullable(go_router$.GoRouter)),
    [__AppRouter__router_isSet]: dart.fieldType(core.bool)
  }));
  const Object_ChangeNotifier$36 = class Object_ChangeNotifier extends core.Object {};
  (Object_ChangeNotifier$36.new = function() {
    change_notifier.ChangeNotifier.new.call(this);
  }).prototype = Object_ChangeNotifier$36.prototype;
  dart.applyMixin(Object_ChangeNotifier$36, change_notifier.ChangeNotifier);
  app_state_provider.AppStateProvider = class AppStateProvider extends Object_ChangeNotifier$36 {
    hasOnboarded() {
      return async.async(dart.void, (function* hasOnboarded() {
        let prefs = (yield shared_preferences.SharedPreferences.getInstance());
        yield prefs.setInt("onBoardCount", 1);
        this.notifyListeners();
      }).bind(this));
    }
    static ['_#new#tearOff']() {
      return new app_state_provider.AppStateProvider.new();
    }
  };
  (app_state_provider.AppStateProvider.new = function() {
    app_state_provider.AppStateProvider.__proto__.new.call(this);
    ;
  }).prototype = app_state_provider.AppStateProvider.prototype;
  dart.addTypeTests(app_state_provider.AppStateProvider);
  dart.addTypeCaches(app_state_provider.AppStateProvider);
  dart.setMethodSignature(app_state_provider.AppStateProvider, () => ({
    __proto__: dart.getMethods(app_state_provider.AppStateProvider.__proto__),
    hasOnboarded: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(app_state_provider.AppStateProvider, I[8]);
  var Color_value = dart.privateName(ui, "Color.value");
  var InputDecorationTheme_constraints = dart.privateName(input_decorator, "InputDecorationTheme.constraints");
  var InputDecorationTheme_alignLabelWithHint = dart.privateName(input_decorator, "InputDecorationTheme.alignLabelWithHint");
  var InputDecorationTheme_border = dart.privateName(input_decorator, "InputDecorationTheme.border");
  var InputDecorationTheme_enabledBorder = dart.privateName(input_decorator, "InputDecorationTheme.enabledBorder");
  var InputDecorationTheme_disabledBorder = dart.privateName(input_decorator, "InputDecorationTheme.disabledBorder");
  var InputDecorationTheme_focusedErrorBorder = dart.privateName(input_decorator, "InputDecorationTheme.focusedErrorBorder");
  var BorderSide_strokeAlign = dart.privateName(borders, "BorderSide.strokeAlign");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  var BorderSide_style = dart.privateName(borders, "BorderSide.style");
  var BorderSide_width = dart.privateName(borders, "BorderSide.width");
  var BorderSide_color = dart.privateName(borders, "BorderSide.color");
  var InputBorder_borderSide = dart.privateName(input_border, "InputBorder.borderSide");
  var Radius_y = dart.privateName(ui, "Radius.y");
  var Radius_x = dart.privateName(ui, "Radius.x");
  var BorderRadius_bottomRight = dart.privateName(border_radius, "BorderRadius.bottomRight");
  var BorderRadius_bottomLeft = dart.privateName(border_radius, "BorderRadius.bottomLeft");
  var BorderRadius_topRight = dart.privateName(border_radius, "BorderRadius.topRight");
  var BorderRadius_topLeft = dart.privateName(border_radius, "BorderRadius.topLeft");
  var OutlineInputBorder_borderRadius = dart.privateName(input_border, "OutlineInputBorder.borderRadius");
  var OutlineInputBorder_gapPadding = dart.privateName(input_border, "OutlineInputBorder.gapPadding");
  var InputDecorationTheme_focusedBorder = dart.privateName(input_decorator, "InputDecorationTheme.focusedBorder");
  var InputDecorationTheme_errorBorder = dart.privateName(input_decorator, "InputDecorationTheme.errorBorder");
  var InputDecorationTheme_hoverColor = dart.privateName(input_decorator, "InputDecorationTheme.hoverColor");
  var InputDecorationTheme_focusColor = dart.privateName(input_decorator, "InputDecorationTheme.focusColor");
  var InputDecorationTheme_activeIndicatorBorder = dart.privateName(input_decorator, "InputDecorationTheme.activeIndicatorBorder");
  var InputDecorationTheme_outlineBorder = dart.privateName(input_decorator, "InputDecorationTheme.outlineBorder");
  var InputDecorationTheme_fillColor = dart.privateName(input_decorator, "InputDecorationTheme.fillColor");
  var InputDecorationTheme_filled = dart.privateName(input_decorator, "InputDecorationTheme.filled");
  var InputDecorationTheme_counterStyle = dart.privateName(input_decorator, "InputDecorationTheme.counterStyle");
  var InputDecorationTheme_suffixIconColor = dart.privateName(input_decorator, "InputDecorationTheme.suffixIconColor");
  var InputDecorationTheme_suffixStyle = dart.privateName(input_decorator, "InputDecorationTheme.suffixStyle");
  var InputDecorationTheme_prefixIconColor = dart.privateName(input_decorator, "InputDecorationTheme.prefixIconColor");
  var InputDecorationTheme_prefixStyle = dart.privateName(input_decorator, "InputDecorationTheme.prefixStyle");
  var InputDecorationTheme_iconColor = dart.privateName(input_decorator, "InputDecorationTheme.iconColor");
  var InputDecorationTheme_isCollapsed = dart.privateName(input_decorator, "InputDecorationTheme.isCollapsed");
  var InputDecorationTheme_contentPadding = dart.privateName(input_decorator, "InputDecorationTheme.contentPadding");
  var InputDecorationTheme_isDense = dart.privateName(input_decorator, "InputDecorationTheme.isDense");
  var FloatingLabelAlignment__x = dart.privateName(input_decorator, "FloatingLabelAlignment._x");
  var InputDecorationTheme_floatingLabelAlignment = dart.privateName(input_decorator, "InputDecorationTheme.floatingLabelAlignment");
  var InputDecorationTheme_floatingLabelBehavior = dart.privateName(input_decorator, "InputDecorationTheme.floatingLabelBehavior");
  var InputDecorationTheme_errorMaxLines = dart.privateName(input_decorator, "InputDecorationTheme.errorMaxLines");
  var InputDecorationTheme_errorStyle = dart.privateName(input_decorator, "InputDecorationTheme.errorStyle");
  var InputDecorationTheme_hintStyle = dart.privateName(input_decorator, "InputDecorationTheme.hintStyle");
  var InputDecorationTheme_helperMaxLines = dart.privateName(input_decorator, "InputDecorationTheme.helperMaxLines");
  var InputDecorationTheme_helperStyle = dart.privateName(input_decorator, "InputDecorationTheme.helperStyle");
  var InputDecorationTheme_floatingLabelStyle = dart.privateName(input_decorator, "InputDecorationTheme.floatingLabelStyle");
  var TextStyle_overflow = dart.privateName(text_style, "TextStyle.overflow");
  var TextStyle_fontVariations = dart.privateName(text_style, "TextStyle.fontVariations");
  var TextStyle_fontFeatures = dart.privateName(text_style, "TextStyle.fontFeatures");
  var TextStyle_shadows = dart.privateName(text_style, "TextStyle.shadows");
  var TextStyle_debugLabel = dart.privateName(text_style, "TextStyle.debugLabel");
  var TextStyle_decorationThickness = dart.privateName(text_style, "TextStyle.decorationThickness");
  var TextStyle_decorationStyle = dart.privateName(text_style, "TextStyle.decorationStyle");
  var TextStyle_decorationColor = dart.privateName(text_style, "TextStyle.decorationColor");
  var TextStyle_decoration = dart.privateName(text_style, "TextStyle.decoration");
  var TextStyle_background = dart.privateName(text_style, "TextStyle.background");
  var TextStyle_foreground = dart.privateName(text_style, "TextStyle.foreground");
  var TextStyle_locale = dart.privateName(text_style, "TextStyle.locale");
  var TextStyle_leadingDistribution = dart.privateName(text_style, "TextStyle.leadingDistribution");
  var TextStyle_height = dart.privateName(text_style, "TextStyle.height");
  var TextStyle_textBaseline = dart.privateName(text_style, "TextStyle.textBaseline");
  var TextStyle_wordSpacing = dart.privateName(text_style, "TextStyle.wordSpacing");
  var TextStyle_letterSpacing = dart.privateName(text_style, "TextStyle.letterSpacing");
  var TextStyle_fontStyle = dart.privateName(text_style, "TextStyle.fontStyle");
  var TextStyle_fontWeight = dart.privateName(text_style, "TextStyle.fontWeight");
  var TextStyle_fontSize = dart.privateName(text_style, "TextStyle.fontSize");
  var TextStyle__package = dart.privateName(text_style, "TextStyle._package");
  var TextStyle__fontFamilyFallback = dart.privateName(text_style, "TextStyle._fontFamilyFallback");
  var TextStyle_fontFamily = dart.privateName(text_style, "TextStyle.fontFamily");
  var TextStyle_backgroundColor = dart.privateName(text_style, "TextStyle.backgroundColor");
  var TextStyle_color = dart.privateName(text_style, "TextStyle.color");
  var TextStyle_inherit = dart.privateName(text_style, "TextStyle.inherit");
  var InputDecorationTheme_labelStyle = dart.privateName(input_decorator, "InputDecorationTheme.labelStyle");
  app_theme._defaultTheme = function _defaultTheme() {
    let base = theme_data.ThemeData.light();
    return base.copyWith({colorScheme: base.colorScheme.copyWith({primary: new ui.Color.fromARGB(255, 51, 197, 255), onPrimary: colors.Colors.white, secondary: C[6] || CT.C6, onSecondary: colors.Colors.white, background: C[7] || CT.C7, onBackground: colors.Colors.black}), elevatedButtonTheme: app_theme._elevatedButtonTheme(base.elevatedButtonTheme), inputDecorationTheme: app_theme._inputDecorationTheme(base.inputDecorationTheme)});
  };
  app_theme._inputDecorationTheme = function _inputDecorationTheme(base) {
    return C[8] || CT.C8;
  };
  app_theme._elevatedButtonTheme = function _elevatedButtonTheme(base) {
    return new elevated_button_theme.ElevatedButtonThemeData.new({style: new button_style.ButtonStyle.new({backgroundColor: material_state.MaterialStateProperty.all(ui.Color, C[6] || CT.C6), foregroundColor: material_state.MaterialStateProperty.all(ui.Color, colors.Colors.white)})});
  };
  dart.defineLazy(app_theme, {
    /*app_theme.defaultTheme*/get defaultTheme() {
      return app_theme._defaultTheme();
    }
  }, false);
  var _data = dart.privateName(shared_preferences_platform_interface, "_data");
  shared_preferences_platform_interface.InMemorySharedPreferencesStore = class InMemorySharedPreferencesStore extends shared_preferences_platform_interface.SharedPreferencesStorePlatform {
    static ['_#empty#tearOff']() {
      return new shared_preferences_platform_interface.InMemorySharedPreferencesStore.empty();
    }
    static ['_#withData#tearOff'](data) {
      return new shared_preferences_platform_interface.InMemorySharedPreferencesStore.withData(data);
    }
    clear() {
      return async.async(core.bool, (function* clear() {
        return this.clearWithParameters(new types.ClearParameters.new({filter: new types.PreferencesFilter.new({prefix: "flutter."})}));
      }).bind(this));
    }
    clearWithPrefix(prefix) {
      return async.async(core.bool, (function* clearWithPrefix() {
        return this.clearWithParameters(new types.ClearParameters.new({filter: new types.PreferencesFilter.new({prefix: prefix})}));
      }).bind(this));
    }
    clearWithParameters(parameters) {
      return async.async(core.bool, (function* clearWithParameters() {
        let filter = parameters.filter;
        if (filter.allowList != null) {
          this[_data][$removeWhere](dart.fn((key, _) => key[$startsWith](filter.prefix) && dart.nullCheck(filter.allowList).contains(key), T$.StringAndObjectTobool()));
        } else {
          this[_data][$removeWhere](dart.fn((key, _) => key[$startsWith](filter.prefix), T$.StringAndObjectTobool()));
        }
        return true;
      }).bind(this));
    }
    getAll() {
      return async.async(T$.MapOfString$Object(), (function* getAll() {
        return this.getAllWithParameters(new types.GetAllParameters.new({filter: new types.PreferencesFilter.new({prefix: "flutter."})}));
      }).bind(this));
    }
    getAllWithPrefix(prefix) {
      return async.async(T$.MapOfString$Object(), (function* getAllWithPrefix() {
        return this.getAllWithParameters(new types.GetAllParameters.new({filter: new types.PreferencesFilter.new({prefix: prefix})}));
      }).bind(this));
    }
    getAllWithParameters(parameters) {
      return async.async(T$.MapOfString$Object(), (function* getAllWithParameters() {
        let filter = parameters.filter;
        let preferences = T$.LinkedHashMapOfString$Object().from(this[_data]);
        preferences[$removeWhere](dart.fn((key, _) => !key[$startsWith](filter.prefix) || filter.allowList != null && !dart.nullCheck(filter.allowList).contains(key), T$.StringAndObjectTobool()));
        return preferences;
      }).bind(this));
    }
    remove(key) {
      return async.async(core.bool, (function* remove() {
        this[_data][$remove](key);
        return true;
      }).bind(this));
    }
    setValue(valueType, key, value) {
      return async.async(core.bool, (function* setValue() {
        this[_data][$_set](key, value);
        return true;
      }).bind(this));
    }
  };
  (shared_preferences_platform_interface.InMemorySharedPreferencesStore.empty = function() {
    this[_data] = new (T$.IdentityMapOfString$Object()).new();
    shared_preferences_platform_interface.InMemorySharedPreferencesStore.__proto__.new.call(this);
    ;
  }).prototype = shared_preferences_platform_interface.InMemorySharedPreferencesStore.prototype;
  (shared_preferences_platform_interface.InMemorySharedPreferencesStore.withData = function(data) {
    this[_data] = T$.LinkedHashMapOfString$Object().from(data);
    shared_preferences_platform_interface.InMemorySharedPreferencesStore.__proto__.new.call(this);
    ;
  }).prototype = shared_preferences_platform_interface.InMemorySharedPreferencesStore.prototype;
  dart.addTypeTests(shared_preferences_platform_interface.InMemorySharedPreferencesStore);
  dart.addTypeCaches(shared_preferences_platform_interface.InMemorySharedPreferencesStore);
  dart.setMethodSignature(shared_preferences_platform_interface.InMemorySharedPreferencesStore, () => ({
    __proto__: dart.getMethods(shared_preferences_platform_interface.InMemorySharedPreferencesStore.__proto__),
    clear: dart.fnType(async.Future$(core.bool), []),
    getAll: dart.fnType(async.Future$(core.Map$(core.String, core.Object)), []),
    remove: dart.fnType(async.Future$(core.bool), [core.String]),
    setValue: dart.fnType(async.Future$(core.bool), [core.String, core.String, core.Object])
  }));
  dart.setLibraryUri(shared_preferences_platform_interface.InMemorySharedPreferencesStore, I[5]);
  dart.setFieldSignature(shared_preferences_platform_interface.InMemorySharedPreferencesStore, () => ({
    __proto__: dart.getFields(shared_preferences_platform_interface.InMemorySharedPreferencesStore.__proto__),
    [_data]: dart.finalFieldType(core.Map$(core.String, core.Object))
  }));
  dart.setStaticFieldSignature(shared_preferences_platform_interface.InMemorySharedPreferencesStore, () => ['_defaultPrefix']);
  dart.defineLazy(shared_preferences_platform_interface.InMemorySharedPreferencesStore, {
    /*shared_preferences_platform_interface.InMemorySharedPreferencesStore._defaultPrefix*/get _defaultPrefix() {
      return "flutter.";
    }
  }, false);
  var prefix$ = dart.privateName(types, "PreferencesFilter.prefix");
  var allowList$ = dart.privateName(types, "PreferencesFilter.allowList");
  types.PreferencesFilter = class PreferencesFilter extends core.Object {
    get prefix() {
      return this[prefix$];
    }
    set prefix(value) {
      this[prefix$] = value;
    }
    get allowList() {
      return this[allowList$];
    }
    set allowList(value) {
      this[allowList$] = value;
    }
    static ['_#new#tearOff'](opts) {
      let prefix = opts && 'prefix' in opts ? opts.prefix : null;
      let allowList = opts && 'allowList' in opts ? opts.allowList : null;
      return new types.PreferencesFilter.new({prefix: prefix, allowList: allowList});
    }
  };
  (types.PreferencesFilter.new = function(opts) {
    let prefix = opts && 'prefix' in opts ? opts.prefix : null;
    let allowList = opts && 'allowList' in opts ? opts.allowList : null;
    this[prefix$] = prefix;
    this[allowList$] = allowList;
    ;
  }).prototype = types.PreferencesFilter.prototype;
  dart.addTypeTests(types.PreferencesFilter);
  dart.addTypeCaches(types.PreferencesFilter);
  dart.setLibraryUri(types.PreferencesFilter, I[9]);
  dart.setFieldSignature(types.PreferencesFilter, () => ({
    __proto__: dart.getFields(types.PreferencesFilter.__proto__),
    prefix: dart.fieldType(core.String),
    allowList: dart.fieldType(dart.nullable(core.Set$(core.String)))
  }));
  var filter$ = dart.privateName(types, "GetAllParameters.filter");
  types.GetAllParameters = class GetAllParameters extends core.Object {
    get filter() {
      return this[filter$];
    }
    set filter(value) {
      this[filter$] = value;
    }
    static ['_#new#tearOff'](opts) {
      let filter = opts && 'filter' in opts ? opts.filter : null;
      return new types.GetAllParameters.new({filter: filter});
    }
  };
  (types.GetAllParameters.new = function(opts) {
    let filter = opts && 'filter' in opts ? opts.filter : null;
    this[filter$] = filter;
    ;
  }).prototype = types.GetAllParameters.prototype;
  dart.addTypeTests(types.GetAllParameters);
  dart.addTypeCaches(types.GetAllParameters);
  dart.setLibraryUri(types.GetAllParameters, I[9]);
  dart.setFieldSignature(types.GetAllParameters, () => ({
    __proto__: dart.getFields(types.GetAllParameters.__proto__),
    filter: dart.fieldType(types.PreferencesFilter)
  }));
  var filter$0 = dart.privateName(types, "ClearParameters.filter");
  types.ClearParameters = class ClearParameters extends core.Object {
    get filter() {
      return this[filter$0];
    }
    set filter(value) {
      this[filter$0] = value;
    }
    static ['_#new#tearOff'](opts) {
      let filter = opts && 'filter' in opts ? opts.filter : null;
      return new types.ClearParameters.new({filter: filter});
    }
  };
  (types.ClearParameters.new = function(opts) {
    let filter = opts && 'filter' in opts ? opts.filter : null;
    this[filter$0] = filter;
    ;
  }).prototype = types.ClearParameters.prototype;
  dart.addTypeTests(types.ClearParameters);
  dart.addTypeCaches(types.ClearParameters);
  dart.setLibraryUri(types.ClearParameters, I[9]);
  dart.setFieldSignature(types.ClearParameters, () => ({
    __proto__: dart.getFields(types.ClearParameters.__proto__),
    filter: dart.fieldType(types.PreferencesFilter)
  }));
  var routeInformationParser = dart.privateName(go_router$, "GoRouter.routeInformationParser");
  var __GoRouter_routerDelegate = dart.privateName(go_router$, "_#GoRouter#routerDelegate");
  const ChangeNotifier_NavigatorObserver$36 = class ChangeNotifier_NavigatorObserver extends change_notifier.ChangeNotifier {};
  (ChangeNotifier_NavigatorObserver$36.new = function() {
    ChangeNotifier_NavigatorObserver$36.__proto__.new.call(this);
  }).prototype = ChangeNotifier_NavigatorObserver$36.prototype;
  dart.applyMixin(ChangeNotifier_NavigatorObserver$36, navigator.NavigatorObserver);
  go_router$.GoRouter = class GoRouter extends ChangeNotifier_NavigatorObserver$36 {
    get routeInformationParser() {
      return this[routeInformationParser];
    }
    set routeInformationParser(value) {
      super.routeInformationParser = value;
    }
    static ['_#new#tearOff'](opts) {
      let routes = opts && 'routes' in opts ? opts.routes : null;
      let errorPageBuilder = opts && 'errorPageBuilder' in opts ? opts.errorPageBuilder : null;
      let errorBuilder = opts && 'errorBuilder' in opts ? opts.errorBuilder : null;
      let redirect = opts && 'redirect' in opts ? opts.redirect : null;
      let refreshListenable = opts && 'refreshListenable' in opts ? opts.refreshListenable : null;
      let redirectLimit = opts && 'redirectLimit' in opts ? opts.redirectLimit : 5;
      let routerNeglect = opts && 'routerNeglect' in opts ? opts.routerNeglect : false;
      let initialLocation = opts && 'initialLocation' in opts ? opts.initialLocation : "/";
      let urlPathStrategy = opts && 'urlPathStrategy' in opts ? opts.urlPathStrategy : null;
      let observers = opts && 'observers' in opts ? opts.observers : null;
      let debugLogDiagnostics = opts && 'debugLogDiagnostics' in opts ? opts.debugLogDiagnostics : false;
      let navigatorBuilder = opts && 'navigatorBuilder' in opts ? opts.navigatorBuilder : null;
      let restorationScopeId = opts && 'restorationScopeId' in opts ? opts.restorationScopeId : null;
      return new go_router$.GoRouter.new({routes: routes, errorPageBuilder: errorPageBuilder, errorBuilder: errorBuilder, redirect: redirect, refreshListenable: refreshListenable, redirectLimit: redirectLimit, routerNeglect: routerNeglect, initialLocation: initialLocation, urlPathStrategy: urlPathStrategy, observers: observers, debugLogDiagnostics: debugLogDiagnostics, navigatorBuilder: navigatorBuilder, restorationScopeId: restorationScopeId});
    }
    get routerDelegate() {
      let t16;
      t16 = this[__GoRouter_routerDelegate];
      return t16 == null ? dart.throw(new _internal.LateError.fieldNI("routerDelegate")) : t16;
    }
    set routerDelegate(routerDelegate$35param) {
      if (this[__GoRouter_routerDelegate] == null)
        this[__GoRouter_routerDelegate] = routerDelegate$35param;
      else
        dart.throw(new _internal.LateError.fieldAI("routerDelegate"));
    }
    get location() {
      return this.routerDelegate.currentConfiguration.toString();
    }
    namedLocation(name, opts) {
      let params = opts && 'params' in opts ? opts.params : C[2] || CT.C2;
      let queryParams = opts && 'queryParams' in opts ? opts.queryParams : C[2] || CT.C2;
      return this.routerDelegate.namedLocation(name, {params: params, queryParams: queryParams});
    }
    go(location, opts) {
      let extra = opts && 'extra' in opts ? opts.extra : null;
      return this.routerDelegate.go(location, {extra: extra});
    }
    goNamed(name, opts) {
      let params = opts && 'params' in opts ? opts.params : C[2] || CT.C2;
      let queryParams = opts && 'queryParams' in opts ? opts.queryParams : C[2] || CT.C2;
      let extra = opts && 'extra' in opts ? opts.extra : null;
      return this.go(this.namedLocation(name, {params: params, queryParams: queryParams}), {extra: extra});
    }
    push(location, opts) {
      let extra = opts && 'extra' in opts ? opts.extra : null;
      return this.routerDelegate.push(location, {extra: extra});
    }
    pushNamed(name, opts) {
      let params = opts && 'params' in opts ? opts.params : C[2] || CT.C2;
      let queryParams = opts && 'queryParams' in opts ? opts.queryParams : C[2] || CT.C2;
      let extra = opts && 'extra' in opts ? opts.extra : null;
      return this.push(this.namedLocation(name, {params: params, queryParams: queryParams}), {extra: extra});
    }
    pop() {
      return this.routerDelegate.pop();
    }
    refresh() {
      return this.routerDelegate.refresh();
    }
    static setUrlPathStrategy(strategy) {
      return path_strategy_web.setUrlPathStrategyImpl(strategy);
    }
    static of(context) {
      let inherited = context.dependOnInheritedWidgetOfExactType(inherited_go_router.InheritedGoRouter);
      if (!(inherited != null)) dart.assertFailed("No GoRouter found in context", I[10], 146, 12, "inherited != null");
      return dart.nullCheck(inherited).goRouter;
    }
    didPush(route, previousRoute) {
      return this.notifyListeners();
    }
    didPop(route, previousRoute) {
      return this.notifyListeners();
    }
    didRemove(route, previousRoute) {
      return this.notifyListeners();
    }
    didReplace(opts) {
      let newRoute = opts && 'newRoute' in opts ? opts.newRoute : null;
      let oldRoute = opts && 'oldRoute' in opts ? opts.oldRoute : null;
      return this.notifyListeners();
    }
  };
  (go_router$.GoRouter.new = function(opts) {
    let t15, t16;
    let routes = opts && 'routes' in opts ? opts.routes : null;
    let errorPageBuilder = opts && 'errorPageBuilder' in opts ? opts.errorPageBuilder : null;
    let errorBuilder = opts && 'errorBuilder' in opts ? opts.errorBuilder : null;
    let redirect = opts && 'redirect' in opts ? opts.redirect : null;
    let refreshListenable = opts && 'refreshListenable' in opts ? opts.refreshListenable : null;
    let redirectLimit = opts && 'redirectLimit' in opts ? opts.redirectLimit : 5;
    let routerNeglect = opts && 'routerNeglect' in opts ? opts.routerNeglect : false;
    let initialLocation = opts && 'initialLocation' in opts ? opts.initialLocation : "/";
    let urlPathStrategy = opts && 'urlPathStrategy' in opts ? opts.urlPathStrategy : null;
    let observers = opts && 'observers' in opts ? opts.observers : null;
    let debugLogDiagnostics = opts && 'debugLogDiagnostics' in opts ? opts.debugLogDiagnostics : false;
    let navigatorBuilder = opts && 'navigatorBuilder' in opts ? opts.navigatorBuilder : null;
    let restorationScopeId = opts && 'restorationScopeId' in opts ? opts.restorationScopeId : null;
    this[routeInformationParser] = new go_route_information_parser.GoRouteInformationParser.new();
    this[__GoRouter_routerDelegate] = null;
    go_router$.GoRouter.__proto__.new.call(this);
    if (urlPathStrategy != null) {
      go_router$.GoRouter.setUrlPathStrategy(urlPathStrategy);
    }
    logging.setLogging({enabled: debugLogDiagnostics});
    this.routerDelegate = new go_router_delegate.GoRouterDelegate.new({routes: routes, errorPageBuilder: errorPageBuilder, errorBuilder: errorBuilder, topRedirect: (t15 = redirect, t15 == null ? dart.fn(_ => null, T$.GoRouterStateToNull()) : t15), redirectLimit: redirectLimit, refreshListenable: refreshListenable, routerNeglect: routerNeglect, initUri: core.Uri.parse(initialLocation), observers: (() => {
        let t15 = T$.ListOfNavigatorObserver().of((t16 = observers, t16 == null ? T$.JSArrayOfNavigatorObserver().of([]) : t16));
        t15.push(this);
        return t15;
      })(), debugLogDiagnostics: debugLogDiagnostics, restorationScopeId: restorationScopeId, builderWithNav: dart.fn((context, state, nav) => {
        let t16, t16$;
        return new inherited_go_router.InheritedGoRouter.new({goRouter: this, child: (t16$ = (t16 = navigatorBuilder, t16 == null ? null : t16(context, state, nav)), t16$ == null ? nav : t16$)});
      }, T$.BuildContextAndGoRouterStateAndNavigatorToInheritedGoRouter())});
  }).prototype = go_router$.GoRouter.prototype;
  dart.addTypeTests(go_router$.GoRouter);
  dart.addTypeCaches(go_router$.GoRouter);
  dart.setMethodSignature(go_router$.GoRouter, () => ({
    __proto__: dart.getMethods(go_router$.GoRouter.__proto__),
    namedLocation: dart.fnType(core.String, [core.String], {params: core.Map$(core.String, core.String), queryParams: core.Map$(core.String, core.String)}, {}),
    go: dart.fnType(dart.void, [core.String], {extra: dart.nullable(core.Object)}, {}),
    goNamed: dart.fnType(dart.void, [core.String], {extra: dart.nullable(core.Object), params: core.Map$(core.String, core.String), queryParams: core.Map$(core.String, core.String)}, {}),
    push: dart.fnType(dart.void, [core.String], {extra: dart.nullable(core.Object)}, {}),
    pushNamed: dart.fnType(dart.void, [core.String], {extra: dart.nullable(core.Object), params: core.Map$(core.String, core.String), queryParams: core.Map$(core.String, core.String)}, {}),
    pop: dart.fnType(dart.void, []),
    refresh: dart.fnType(dart.void, [])
  }));
  dart.setStaticMethodSignature(go_router$.GoRouter, () => ['setUrlPathStrategy', 'of']);
  dart.setGetterSignature(go_router$.GoRouter, () => ({
    __proto__: dart.getGetters(go_router$.GoRouter.__proto__),
    routerDelegate: go_router_delegate.GoRouterDelegate,
    location: core.String
  }));
  dart.setSetterSignature(go_router$.GoRouter, () => ({
    __proto__: dart.getSetters(go_router$.GoRouter.__proto__),
    routerDelegate: go_router_delegate.GoRouterDelegate
  }));
  dart.setLibraryUri(go_router$.GoRouter, I[11]);
  dart.setFieldSignature(go_router$.GoRouter, () => ({
    __proto__: dart.getFields(go_router$.GoRouter.__proto__),
    routeInformationParser: dart.finalFieldType(go_route_information_parser.GoRouteInformationParser),
    [__GoRouter_routerDelegate]: dart.fieldType(dart.nullable(go_router_delegate.GoRouterDelegate))
  }));
  var child$ = dart.privateName(custom_transition_page, "CustomTransitionPage.child");
  var transitionDuration$ = dart.privateName(custom_transition_page, "CustomTransitionPage.transitionDuration");
  var maintainState$ = dart.privateName(custom_transition_page, "CustomTransitionPage.maintainState");
  var fullscreenDialog$ = dart.privateName(custom_transition_page, "CustomTransitionPage.fullscreenDialog");
  var opaque$ = dart.privateName(custom_transition_page, "CustomTransitionPage.opaque");
  var barrierDismissible$ = dart.privateName(custom_transition_page, "CustomTransitionPage.barrierDismissible");
  var barrierColor$ = dart.privateName(custom_transition_page, "CustomTransitionPage.barrierColor");
  var barrierLabel$ = dart.privateName(custom_transition_page, "CustomTransitionPage.barrierLabel");
  var transitionsBuilder$ = dart.privateName(custom_transition_page, "CustomTransitionPage.transitionsBuilder");
  var Duration__duration = dart.privateName(core, "Duration._duration");
  const _is_CustomTransitionPage_default = Symbol('_is_CustomTransitionPage_default');
  custom_transition_page.CustomTransitionPage$ = dart.generic(T => {
    var __t$_CustomTransitionPageRouteOfT = () => (__t$_CustomTransitionPageRouteOfT = dart.constFn(custom_transition_page._CustomTransitionPageRoute$(T)))();
    class CustomTransitionPage extends navigator.Page$(T) {
      get child() {
        return this[child$];
      }
      set child(value) {
        super.child = value;
      }
      get transitionDuration() {
        return this[transitionDuration$];
      }
      set transitionDuration(value) {
        super.transitionDuration = value;
      }
      get maintainState() {
        return this[maintainState$];
      }
      set maintainState(value) {
        super.maintainState = value;
      }
      get fullscreenDialog() {
        return this[fullscreenDialog$];
      }
      set fullscreenDialog(value) {
        super.fullscreenDialog = value;
      }
      get opaque() {
        return this[opaque$];
      }
      set opaque(value) {
        super.opaque = value;
      }
      get barrierDismissible() {
        return this[barrierDismissible$];
      }
      set barrierDismissible(value) {
        super.barrierDismissible = value;
      }
      get barrierColor() {
        return this[barrierColor$];
      }
      set barrierColor(value) {
        super.barrierColor = value;
      }
      get barrierLabel() {
        return this[barrierLabel$];
      }
      set barrierLabel(value) {
        super.barrierLabel = value;
      }
      get transitionsBuilder() {
        return this[transitionsBuilder$];
      }
      set transitionsBuilder(value) {
        super.transitionsBuilder = value;
      }
      static ['_#new#tearOff'](T, opts) {
        let child = opts && 'child' in opts ? opts.child : null;
        let transitionsBuilder = opts && 'transitionsBuilder' in opts ? opts.transitionsBuilder : null;
        let transitionDuration = opts && 'transitionDuration' in opts ? opts.transitionDuration : C[18] || CT.C18;
        let maintainState = opts && 'maintainState' in opts ? opts.maintainState : true;
        let fullscreenDialog = opts && 'fullscreenDialog' in opts ? opts.fullscreenDialog : false;
        let opaque = opts && 'opaque' in opts ? opts.opaque : true;
        let barrierDismissible = opts && 'barrierDismissible' in opts ? opts.barrierDismissible : false;
        let barrierColor = opts && 'barrierColor' in opts ? opts.barrierColor : null;
        let barrierLabel = opts && 'barrierLabel' in opts ? opts.barrierLabel : null;
        let key = opts && 'key' in opts ? opts.key : null;
        let name = opts && 'name' in opts ? opts.name : null;
        let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
        let restorationId = opts && 'restorationId' in opts ? opts.restorationId : null;
        return new (custom_transition_page.CustomTransitionPage$(T)).new({child: child, transitionsBuilder: transitionsBuilder, transitionDuration: transitionDuration, maintainState: maintainState, fullscreenDialog: fullscreenDialog, opaque: opaque, barrierDismissible: barrierDismissible, barrierColor: barrierColor, barrierLabel: barrierLabel, key: key, name: name, arguments: $arguments, restorationId: restorationId});
      }
      createRoute(context) {
        return new (__t$_CustomTransitionPageRouteOfT()).new(this);
      }
    }
    (CustomTransitionPage.new = function(opts) {
      let child = opts && 'child' in opts ? opts.child : null;
      let transitionsBuilder = opts && 'transitionsBuilder' in opts ? opts.transitionsBuilder : null;
      let transitionDuration = opts && 'transitionDuration' in opts ? opts.transitionDuration : C[18] || CT.C18;
      let maintainState = opts && 'maintainState' in opts ? opts.maintainState : true;
      let fullscreenDialog = opts && 'fullscreenDialog' in opts ? opts.fullscreenDialog : false;
      let opaque = opts && 'opaque' in opts ? opts.opaque : true;
      let barrierDismissible = opts && 'barrierDismissible' in opts ? opts.barrierDismissible : false;
      let barrierColor = opts && 'barrierColor' in opts ? opts.barrierColor : null;
      let barrierLabel = opts && 'barrierLabel' in opts ? opts.barrierLabel : null;
      let key = opts && 'key' in opts ? opts.key : null;
      let name = opts && 'name' in opts ? opts.name : null;
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      let restorationId = opts && 'restorationId' in opts ? opts.restorationId : null;
      this[child$] = child;
      this[transitionsBuilder$] = transitionsBuilder;
      this[transitionDuration$] = transitionDuration;
      this[maintainState$] = maintainState;
      this[fullscreenDialog$] = fullscreenDialog;
      this[opaque$] = opaque;
      this[barrierDismissible$] = barrierDismissible;
      this[barrierColor$] = barrierColor;
      this[barrierLabel$] = barrierLabel;
      CustomTransitionPage.__proto__.new.call(this, {key: key, name: name, arguments: $arguments, restorationId: restorationId});
      ;
    }).prototype = CustomTransitionPage.prototype;
    dart.addTypeTests(CustomTransitionPage);
    CustomTransitionPage.prototype[_is_CustomTransitionPage_default] = true;
    dart.addTypeCaches(CustomTransitionPage);
    dart.setMethodSignature(CustomTransitionPage, () => ({
      __proto__: dart.getMethods(CustomTransitionPage.__proto__),
      createRoute: dart.fnType(navigator.Route$(T), [framework.BuildContext])
    }));
    dart.setLibraryUri(CustomTransitionPage, I[12]);
    dart.setFieldSignature(CustomTransitionPage, () => ({
      __proto__: dart.getFields(CustomTransitionPage.__proto__),
      child: dart.finalFieldType(framework.Widget),
      transitionDuration: dart.finalFieldType(core.Duration),
      maintainState: dart.finalFieldType(core.bool),
      fullscreenDialog: dart.finalFieldType(core.bool),
      opaque: dart.finalFieldType(core.bool),
      barrierDismissible: dart.finalFieldType(core.bool),
      barrierColor: dart.finalFieldType(dart.nullable(ui.Color)),
      barrierLabel: dart.finalFieldType(dart.nullable(core.String)),
      transitionsBuilder: dart.finalFieldType(dart.fnType(framework.Widget, [framework.BuildContext, animation.Animation$(core.double), animation.Animation$(core.double), framework.Widget]))
    }));
    return CustomTransitionPage;
  });
  custom_transition_page.CustomTransitionPage = custom_transition_page.CustomTransitionPage$();
  dart.addTypeTests(custom_transition_page.CustomTransitionPage, _is_CustomTransitionPage_default);
  var _page = dart.privateName(custom_transition_page, "_page");
  const _is__CustomTransitionPageRoute_default = Symbol('_is__CustomTransitionPageRoute_default');
  custom_transition_page._CustomTransitionPageRoute$ = dart.generic(T => {
    var __t$CustomTransitionPageOfT = () => (__t$CustomTransitionPageOfT = dart.constFn(custom_transition_page.CustomTransitionPage$(T)))();
    class _CustomTransitionPageRoute extends pages.PageRoute$(T) {
      static ['_#new#tearOff'](T, page) {
        return new (custom_transition_page._CustomTransitionPageRoute$(T)).new(page);
      }
      get [_page]() {
        return __t$CustomTransitionPageOfT().as(this.settings);
      }
      get barrierColor() {
        return this[_page].barrierColor;
      }
      get barrierLabel() {
        return this[_page].barrierLabel;
      }
      get transitionDuration() {
        return this[_page].transitionDuration;
      }
      get maintainState() {
        return this[_page].maintainState;
      }
      get fullscreenDialog() {
        return this[_page].fullscreenDialog;
      }
      get opaque() {
        return this[_page].opaque;
      }
      buildPage(context, animation, secondaryAnimation) {
        return new basic.Semantics.new({scopesRoute: true, explicitChildNodes: true, child: this[_page].child});
      }
      buildTransitions(context, animation, secondaryAnimation, child) {
        let t20, t19, t18, t17, t16;
        t16 = this[_page];
        t17 = context;
        t18 = animation;
        t19 = secondaryAnimation;
        t20 = child;
        return t16.transitionsBuilder(t17, t18, t19, t20);
      }
    }
    (_CustomTransitionPageRoute.new = function(page) {
      _CustomTransitionPageRoute.__proto__.new.call(this, {settings: page});
      ;
    }).prototype = _CustomTransitionPageRoute.prototype;
    dart.addTypeTests(_CustomTransitionPageRoute);
    _CustomTransitionPageRoute.prototype[_is__CustomTransitionPageRoute_default] = true;
    dart.addTypeCaches(_CustomTransitionPageRoute);
    dart.setMethodSignature(_CustomTransitionPageRoute, () => ({
      __proto__: dart.getMethods(_CustomTransitionPageRoute.__proto__),
      buildPage: dart.fnType(framework.Widget, [framework.BuildContext, animation.Animation$(core.double), animation.Animation$(core.double)])
    }));
    dart.setGetterSignature(_CustomTransitionPageRoute, () => ({
      __proto__: dart.getGetters(_CustomTransitionPageRoute.__proto__),
      [_page]: custom_transition_page.CustomTransitionPage$(T),
      barrierColor: dart.nullable(ui.Color),
      barrierLabel: dart.nullable(core.String),
      transitionDuration: core.Duration,
      maintainState: core.bool,
      fullscreenDialog: core.bool
    }));
    dart.setLibraryUri(_CustomTransitionPageRoute, I[12]);
    return _CustomTransitionPageRoute;
  });
  custom_transition_page._CustomTransitionPageRoute = custom_transition_page._CustomTransitionPageRoute$();
  dart.addTypeTests(custom_transition_page._CustomTransitionPageRoute, _is__CustomTransitionPageRoute_default);
  const _is_NoTransitionPage_default = Symbol('_is_NoTransitionPage_default');
  custom_transition_page.NoTransitionPage$ = dart.generic(T => {
    class NoTransitionPage extends custom_transition_page.CustomTransitionPage$(T) {
      static ['_#new#tearOff'](T, opts) {
        let child = opts && 'child' in opts ? opts.child : null;
        let name = opts && 'name' in opts ? opts.name : null;
        let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
        let restorationId = opts && 'restorationId' in opts ? opts.restorationId : null;
        let key = opts && 'key' in opts ? opts.key : null;
        return new (custom_transition_page.NoTransitionPage$(T)).new({child: child, name: name, arguments: $arguments, restorationId: restorationId, key: key});
      }
      static _transitionsBuilder(context, animation, secondaryAnimation, child) {
        return child;
      }
    }
    (NoTransitionPage.new = function(opts) {
      let child = opts && 'child' in opts ? opts.child : null;
      let name = opts && 'name' in opts ? opts.name : null;
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      let restorationId = opts && 'restorationId' in opts ? opts.restorationId : null;
      let key = opts && 'key' in opts ? opts.key : null;
      NoTransitionPage.__proto__.new.call(this, {transitionsBuilder: C[19] || CT.C19, transitionDuration: C[20] || CT.C20, key: key, name: name, arguments: $arguments, restorationId: restorationId, child: child});
      ;
    }).prototype = NoTransitionPage.prototype;
    dart.addTypeTests(NoTransitionPage);
    NoTransitionPage.prototype[_is_NoTransitionPage_default] = true;
    dart.addTypeCaches(NoTransitionPage);
    dart.setStaticMethodSignature(NoTransitionPage, () => ['_transitionsBuilder']);
    dart.setLibraryUri(NoTransitionPage, I[12]);
    return NoTransitionPage;
  });
  custom_transition_page.NoTransitionPage = custom_transition_page.NoTransitionPage$();
  dart.addTypeTests(custom_transition_page.NoTransitionPage, _is_NoTransitionPage_default);
  var name$ = dart.privateName(go_route, "GoRoute.name");
  var path$ = dart.privateName(go_route, "GoRoute.path");
  var pageBuilder$ = dart.privateName(go_route, "GoRoute.pageBuilder");
  var builder$ = dart.privateName(go_route, "GoRoute.builder");
  var routes$ = dart.privateName(go_route, "GoRoute.routes");
  var redirect$ = dart.privateName(go_route, "GoRoute.redirect");
  var _pathParams = dart.privateName(go_route, "_pathParams");
  var __GoRoute__pathRE = dart.privateName(go_route, "_#GoRoute#_pathRE");
  var _pathRE = dart.privateName(go_route, "_pathRE");
  var SingleChildRenderObjectWidget_child = dart.privateName(framework, "SingleChildRenderObjectWidget.child");
  var SizedBox_height = dart.privateName(basic, "SizedBox.height");
  var SizedBox_width = dart.privateName(basic, "SizedBox.width");
  go_route.GoRoute = class GoRoute extends core.Object {
    get name() {
      return this[name$];
    }
    set name(value) {
      super.name = value;
    }
    get path() {
      return this[path$];
    }
    set path(value) {
      super.path = value;
    }
    get pageBuilder() {
      return this[pageBuilder$];
    }
    set pageBuilder(value) {
      super.pageBuilder = value;
    }
    get builder() {
      return this[builder$];
    }
    set builder(value) {
      super.builder = value;
    }
    get routes() {
      return this[routes$];
    }
    set routes(value) {
      super.routes = value;
    }
    get redirect() {
      return this[redirect$];
    }
    set redirect(value) {
      super.redirect = value;
    }
    static ['_#new#tearOff'](opts) {
      let path = opts && 'path' in opts ? opts.path : null;
      let name = opts && 'name' in opts ? opts.name : null;
      let pageBuilder = opts && 'pageBuilder' in opts ? opts.pageBuilder : null;
      let builder = opts && 'builder' in opts ? opts.builder : C[21] || CT.C21;
      let routes = opts && 'routes' in opts ? opts.routes : C[22] || CT.C22;
      let redirect = opts && 'redirect' in opts ? opts.redirect : C[23] || CT.C23;
      return new go_route.GoRoute.new({path: path, name: name, pageBuilder: pageBuilder, builder: builder, routes: routes, redirect: redirect});
    }
    get [_pathRE]() {
      let t16;
      t16 = this[__GoRoute__pathRE];
      return t16 == null ? dart.throw(new _internal.LateError.fieldNI("_pathRE")) : t16;
    }
    set [_pathRE](_pathRE$35param) {
      if (this[__GoRoute__pathRE] == null)
        this[__GoRoute__pathRE] = _pathRE$35param;
      else
        dart.throw(new _internal.LateError.fieldAI("_pathRE"));
    }
    matchPatternAsPrefix(loc) {
      return T$.RegExpMatchN().as(this[_pathRE][$matchAsPrefix](loc));
    }
    extractPathParams(match) {
      return path_parser.extractPathParameters(this[_pathParams], match);
    }
    static _noRedirection(state) {
      return null;
    }
    static _invalidBuilder(context, state) {
      return C[24] || CT.C24;
    }
  };
  (go_route.GoRoute.new = function(opts) {
    let path = opts && 'path' in opts ? opts.path : null;
    let name = opts && 'name' in opts ? opts.name : null;
    let pageBuilder = opts && 'pageBuilder' in opts ? opts.pageBuilder : null;
    let builder = opts && 'builder' in opts ? opts.builder : C[21] || CT.C21;
    let routes = opts && 'routes' in opts ? opts.routes : C[22] || CT.C22;
    let redirect = opts && 'redirect' in opts ? opts.redirect : C[23] || CT.C23;
    this[_pathParams] = T$.JSArrayOfString().of([]);
    this[__GoRoute__pathRE] = null;
    this[path$] = path;
    this[name$] = name;
    this[pageBuilder$] = pageBuilder;
    this[builder$] = builder;
    this[routes$] = routes;
    this[redirect$] = redirect;
    if (!path[$isNotEmpty]) dart.assertFailed("GoRoute path cannot be empty", I[13], 24, 16, "path.isNotEmpty");
    if (!(name == null || name[$isNotEmpty])) dart.assertFailed("GoRoute name cannot be empty", I[13], 25, 16, "name == null || name.isNotEmpty");
    if (!(pageBuilder != null || !builder[$_equals](C[21] || CT.C21) || !redirect[$_equals](C[23] || CT.C23))) dart.assertFailed("GoRoute builder parameter not set\nSee gorouter.dev/redirection#considerations for details", I[13], 27, 13, "pageBuilder != null ||\n                builder != _invalidBuilder ||\n                redirect != _noRedirection");
    this[_pathRE] = path_parser.patternToRegExp(this.path, this[_pathParams]);
    if (!dart.fn(() => {
      let groupedParams = iterable_extensions['IterableExtension|groupListsBy'](core.String, core.String, this[_pathParams], dart.fn(p => p, T$.StringToString()));
      let dupParams = T$.MapOfString$ListOfString().fromEntries(groupedParams[$entries][$where](dart.fn(e => e.value[$length] > 1, T$.MapEntryOfString$ListOfStringTobool())));
      if (!dupParams[$isEmpty]) dart.assertFailed("duplicate path params: " + dupParams[$keys][$join](", "), I[13], 43, 14, "dupParams.isEmpty");
      for (let route of this.routes) {
        if (!(route.path === "/" || !route.path[$startsWith]("/") && !route.path[$endsWith]("/"))) dart.assertFailed("sub-route path may not start or end with /: " + route.path, I[13], 50, 13, "route.path == '/' ||\n                (!route.path.startsWith('/') && !route.path.endsWith('/'))");
      }
      return true;
    }, T$.VoidTobool())()) dart.assertFailed(null, I[13], 34, 12, "() {\n      // check path params\n      final Map<String, List<String>> groupedParams =\n          _pathParams.groupListsBy<String>((String p) => p);\n      final Map<String, List<String>> dupParams =\n          Map<String, List<String>>.fromEntries(\n        groupedParams.entries\n            .where((MapEntry<String, List<String>> e) => e.value.length > 1),\n      );\n      assert(dupParams.isEmpty,\n          'duplicate path params: ${dupParams.keys.join(', ')}');\n\n      // check sub-routes\n      for (final GoRoute route in routes) {\n        // check paths\n        assert(\n            route.path == '/' ||\n                (!route.path.startsWith('/') && !route.path.endsWith('/')),\n            'sub-route path may not start or end with /: ${route.path}');\n      }\n      return true;\n    }()");
  }).prototype = go_route.GoRoute.prototype;
  dart.addTypeTests(go_route.GoRoute);
  dart.addTypeCaches(go_route.GoRoute);
  dart.setMethodSignature(go_route.GoRoute, () => ({
    __proto__: dart.getMethods(go_route.GoRoute.__proto__),
    matchPatternAsPrefix: dart.fnType(dart.nullable(core.RegExpMatch), [core.String]),
    extractPathParams: dart.fnType(core.Map$(core.String, core.String), [core.RegExpMatch])
  }));
  dart.setStaticMethodSignature(go_route.GoRoute, () => ['_noRedirection', '_invalidBuilder']);
  dart.setGetterSignature(go_route.GoRoute, () => ({
    __proto__: dart.getGetters(go_route.GoRoute.__proto__),
    [_pathRE]: core.RegExp
  }));
  dart.setSetterSignature(go_route.GoRoute, () => ({
    __proto__: dart.getSetters(go_route.GoRoute.__proto__),
    [_pathRE]: core.RegExp
  }));
  dart.setLibraryUri(go_route.GoRoute, I[14]);
  dart.setFieldSignature(go_route.GoRoute, () => ({
    __proto__: dart.getFields(go_route.GoRoute.__proto__),
    [_pathParams]: dart.finalFieldType(core.List$(core.String)),
    [__GoRoute__pathRE]: dart.fieldType(dart.nullable(core.RegExp)),
    name: dart.finalFieldType(dart.nullable(core.String)),
    path: dart.finalFieldType(core.String),
    pageBuilder: dart.finalFieldType(dart.nullable(dart.fnType(navigator.Page$(dart.void), [framework.BuildContext, go_router_state.GoRouterState]))),
    builder: dart.finalFieldType(dart.fnType(framework.Widget, [framework.BuildContext, go_router_state.GoRouterState])),
    routes: dart.finalFieldType(core.List$(go_route.GoRoute)),
    redirect: dart.finalFieldType(dart.fnType(dart.nullable(core.String), [go_router_state.GoRouterState]))
  }));
  var __GoRouterRefreshStream__subscription = dart.privateName(go_router_refresh_stream, "_#GoRouterRefreshStream#_subscription");
  var _subscription = dart.privateName(go_router_refresh_stream, "_subscription");
  go_router_refresh_stream.GoRouterRefreshStream = class GoRouterRefreshStream extends change_notifier.ChangeNotifier {
    static ['_#new#tearOff'](stream) {
      return new go_router_refresh_stream.GoRouterRefreshStream.new(stream);
    }
    get [_subscription]() {
      let t16;
      t16 = this[__GoRouterRefreshStream__subscription];
      return t16 == null ? dart.throw(new _internal.LateError.fieldNI("_subscription")) : t16;
    }
    set [_subscription](_subscription$35param) {
      if (this[__GoRouterRefreshStream__subscription] == null)
        this[__GoRouterRefreshStream__subscription] = _subscription$35param;
      else
        dart.throw(new _internal.LateError.fieldAI("_subscription"));
    }
    dispose() {
      this[_subscription].cancel();
      super.dispose();
    }
  };
  (go_router_refresh_stream.GoRouterRefreshStream.new = function(stream) {
    this[__GoRouterRefreshStream__subscription] = null;
    go_router_refresh_stream.GoRouterRefreshStream.__proto__.new.call(this);
    this.notifyListeners();
    this[_subscription] = stream.asBroadcastStream().listen(dart.fn(_ => this.notifyListeners(), T$.dynamicTovoid()));
  }).prototype = go_router_refresh_stream.GoRouterRefreshStream.prototype;
  dart.addTypeTests(go_router_refresh_stream.GoRouterRefreshStream);
  dart.addTypeCaches(go_router_refresh_stream.GoRouterRefreshStream);
  dart.setGetterSignature(go_router_refresh_stream.GoRouterRefreshStream, () => ({
    __proto__: dart.getGetters(go_router_refresh_stream.GoRouterRefreshStream.__proto__),
    [_subscription]: async.StreamSubscription
  }));
  dart.setSetterSignature(go_router_refresh_stream.GoRouterRefreshStream, () => ({
    __proto__: dart.getSetters(go_router_refresh_stream.GoRouterRefreshStream.__proto__),
    [_subscription]: async.StreamSubscription
  }));
  dart.setLibraryUri(go_router_refresh_stream.GoRouterRefreshStream, I[15]);
  dart.setFieldSignature(go_router_refresh_stream.GoRouterRefreshStream, () => ({
    __proto__: dart.getFields(go_router_refresh_stream.GoRouterRefreshStream.__proto__),
    [__GoRouterRefreshStream__subscription]: dart.fieldType(dart.nullable(async.StreamSubscription))
  }));
  var location$ = dart.privateName(go_router_state, "GoRouterState.location");
  var subloc$ = dart.privateName(go_router_state, "GoRouterState.subloc");
  var name$0 = dart.privateName(go_router_state, "GoRouterState.name");
  var path$0 = dart.privateName(go_router_state, "GoRouterState.path");
  var fullpath$ = dart.privateName(go_router_state, "GoRouterState.fullpath");
  var params$ = dart.privateName(go_router_state, "GoRouterState.params");
  var queryParams$ = dart.privateName(go_router_state, "GoRouterState.queryParams");
  var extra$ = dart.privateName(go_router_state, "GoRouterState.extra");
  var error$ = dart.privateName(go_router_state, "GoRouterState.error");
  var pageKey$ = dart.privateName(go_router_state, "GoRouterState.pageKey");
  var _delegate$ = dart.privateName(go_router_state, "_delegate");
  go_router_state.GoRouterState = class GoRouterState extends core.Object {
    get location() {
      return this[location$];
    }
    set location(value) {
      super.location = value;
    }
    get subloc() {
      return this[subloc$];
    }
    set subloc(value) {
      super.subloc = value;
    }
    get name() {
      return this[name$0];
    }
    set name(value) {
      super.name = value;
    }
    get path() {
      return this[path$0];
    }
    set path(value) {
      super.path = value;
    }
    get fullpath() {
      return this[fullpath$];
    }
    set fullpath(value) {
      super.fullpath = value;
    }
    get params() {
      return this[params$];
    }
    set params(value) {
      super.params = value;
    }
    get queryParams() {
      return this[queryParams$];
    }
    set queryParams(value) {
      super.queryParams = value;
    }
    get extra() {
      return this[extra$];
    }
    set extra(value) {
      super.extra = value;
    }
    get error() {
      return this[error$];
    }
    set error(value) {
      super.error = value;
    }
    get pageKey() {
      return this[pageKey$];
    }
    set pageKey(value) {
      super.pageKey = value;
    }
    static ['_#new#tearOff'](_delegate, opts) {
      let location = opts && 'location' in opts ? opts.location : null;
      let subloc = opts && 'subloc' in opts ? opts.subloc : null;
      let name = opts && 'name' in opts ? opts.name : null;
      let path = opts && 'path' in opts ? opts.path : null;
      let fullpath = opts && 'fullpath' in opts ? opts.fullpath : null;
      let params = opts && 'params' in opts ? opts.params : C[2] || CT.C2;
      let queryParams = opts && 'queryParams' in opts ? opts.queryParams : C[2] || CT.C2;
      let extra = opts && 'extra' in opts ? opts.extra : null;
      let error = opts && 'error' in opts ? opts.error : null;
      let pageKey = opts && 'pageKey' in opts ? opts.pageKey : null;
      return new go_router_state.GoRouterState.new(_delegate, {location: location, subloc: subloc, name: name, path: path, fullpath: fullpath, params: params, queryParams: queryParams, extra: extra, error: error, pageKey: pageKey});
    }
    namedLocation(name, opts) {
      let params = opts && 'params' in opts ? opts.params : C[2] || CT.C2;
      let queryParams = opts && 'queryParams' in opts ? opts.queryParams : C[2] || CT.C2;
      return this[_delegate$].namedLocation(name, {params: params, queryParams: queryParams});
    }
  };
  (go_router_state.GoRouterState.new = function(_delegate, opts) {
    let t16, t16$, t16$0;
    let location = opts && 'location' in opts ? opts.location : null;
    let subloc = opts && 'subloc' in opts ? opts.subloc : null;
    let name = opts && 'name' in opts ? opts.name : null;
    let path = opts && 'path' in opts ? opts.path : null;
    let fullpath = opts && 'fullpath' in opts ? opts.fullpath : null;
    let params = opts && 'params' in opts ? opts.params : C[2] || CT.C2;
    let queryParams = opts && 'queryParams' in opts ? opts.queryParams : C[2] || CT.C2;
    let extra = opts && 'extra' in opts ? opts.extra : null;
    let error = opts && 'error' in opts ? opts.error : null;
    let pageKey = opts && 'pageKey' in opts ? opts.pageKey : null;
    this[_delegate$] = _delegate;
    this[location$] = location;
    this[subloc$] = subloc;
    this[name$0] = name;
    this[path$0] = path;
    this[fullpath$] = fullpath;
    this[params$] = params;
    this[queryParams$] = queryParams;
    this[extra$] = extra;
    this[error$] = error;
    this[pageKey$] = (t16 = pageKey, t16 == null ? new (T$.ValueKeyOfString()).new(error != null ? "error" : fullpath != null && fullpath[$isNotEmpty] ? fullpath : subloc) : t16);
    if (!((t16$ = path, t16$ == null ? "" : t16$)[$isEmpty] === (t16$0 = fullpath, t16$0 == null ? "" : t16$0)[$isEmpty])) dart.assertFailed(null, I[16], 30, 16, "(path ?? '').isEmpty == (fullpath ?? '').isEmpty");
    ;
  }).prototype = go_router_state.GoRouterState.prototype;
  dart.addTypeTests(go_router_state.GoRouterState);
  dart.addTypeCaches(go_router_state.GoRouterState);
  dart.setMethodSignature(go_router_state.GoRouterState, () => ({
    __proto__: dart.getMethods(go_router_state.GoRouterState.__proto__),
    namedLocation: dart.fnType(core.String, [core.String], {params: core.Map$(core.String, core.String), queryParams: core.Map$(core.String, core.String)}, {})
  }));
  dart.setLibraryUri(go_router_state.GoRouterState, I[17]);
  dart.setFieldSignature(go_router_state.GoRouterState, () => ({
    __proto__: dart.getFields(go_router_state.GoRouterState.__proto__),
    [_delegate$]: dart.finalFieldType(go_router_delegate.GoRouterDelegate),
    location: dart.finalFieldType(core.String),
    subloc: dart.finalFieldType(core.String),
    name: dart.finalFieldType(dart.nullable(core.String)),
    path: dart.finalFieldType(dart.nullable(core.String)),
    fullpath: dart.finalFieldType(dart.nullable(core.String)),
    params: dart.finalFieldType(core.Map$(core.String, core.String)),
    queryParams: dart.finalFieldType(core.Map$(core.String, core.String)),
    extra: dart.finalFieldType(dart.nullable(core.Object)),
    error: dart.finalFieldType(dart.nullable(core.Exception)),
    pageKey: dart.finalFieldType(key.ValueKey$(core.String))
  }));
  var goRouter$ = dart.privateName(inherited_go_router, "InheritedGoRouter.goRouter");
  inherited_go_router.InheritedGoRouter = class InheritedGoRouter extends framework.InheritedWidget {
    get goRouter() {
      return this[goRouter$];
    }
    set goRouter(value) {
      super.goRouter = value;
    }
    static ['_#new#tearOff'](opts) {
      let child = opts && 'child' in opts ? opts.child : null;
      let goRouter = opts && 'goRouter' in opts ? opts.goRouter : null;
      let key = opts && 'key' in opts ? opts.key : null;
      return new inherited_go_router.InheritedGoRouter.new({child: child, goRouter: goRouter, key: key});
    }
    updateShouldNotify(oldWidget) {
      inherited_go_router.InheritedGoRouter.as(oldWidget);
      return !this.goRouter[$_equals](oldWidget.goRouter);
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (T$.DiagnosticsPropertyOfGoRouter()).new("goRouter", this.goRouter));
    }
  };
  (inherited_go_router.InheritedGoRouter.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let goRouter = opts && 'goRouter' in opts ? opts.goRouter : null;
    let key = opts && 'key' in opts ? opts.key : null;
    this[goRouter$] = goRouter;
    inherited_go_router.InheritedGoRouter.__proto__.new.call(this, {child: child, key: key});
    ;
  }).prototype = inherited_go_router.InheritedGoRouter.prototype;
  dart.addTypeTests(inherited_go_router.InheritedGoRouter);
  dart.addTypeCaches(inherited_go_router.InheritedGoRouter);
  dart.setMethodSignature(inherited_go_router.InheritedGoRouter, () => ({
    __proto__: dart.getMethods(inherited_go_router.InheritedGoRouter.__proto__),
    updateShouldNotify: dart.fnType(core.bool, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(inherited_go_router.InheritedGoRouter, I[18]);
  dart.setFieldSignature(inherited_go_router.InheritedGoRouter, () => ({
    __proto__: dart.getFields(inherited_go_router.InheritedGoRouter.__proto__),
    goRouter: dart.finalFieldType(go_router$.GoRouter)
  }));
  var RouteSettings_arguments = dart.privateName(navigator, "RouteSettings.arguments");
  var RouteSettings_name = dart.privateName(navigator, "RouteSettings.name");
  var Page_restorationId = dart.privateName(navigator, "Page.restorationId");
  var Page_key = dart.privateName(navigator, "Page.key");
  route_data.GoRouteData = class GoRouteData extends core.Object {
    build(context) {
      return dart.throw(new core.UnimplementedError.new("One of `build` or `buildPage` must be implemented."));
    }
    buildPage(context) {
      return C[25] || CT.C25;
    }
    redirect() {
      return null;
    }
    static $location(path, opts) {
      let t16;
      let queryParams = opts && 'queryParams' in opts ? opts.queryParams : null;
      return core.Uri.parse(path).replace({queryParameters: (t16 = queryParams, t16 == null ? null : t16[$isNotEmpty]) === true ? queryParams : null}).toString();
    }
    static $route(T, opts) {
      let path = opts && 'path' in opts ? opts.path : null;
      let factory = opts && 'factory' in opts ? opts.factory : null;
      let routes = opts && 'routes' in opts ? opts.routes : C[22] || CT.C22;
      function factoryImpl(state) {
        let t19, t18, t17, t16;
        let extra = state.extra;
        if (T.is(extra)) {
          return extra;
        }
        return T.as((t16 = route_data.GoRouteData._stateObjectExpando, t17 = state, t18 = t16._get(t17), t18 == null ? (t19 = factory(state), t16._set(t17, t19), t19) : t18));
      }
      dart.fn(factoryImpl, dart.fnType(T, [go_router_state.GoRouterState]));
      function builder(context, state) {
        return factoryImpl(state).build(context);
      }
      dart.fn(builder, T$.BuildContextAndGoRouterStateToWidget());
      function pageBuilder(context, state) {
        return factoryImpl(state).buildPage(context);
      }
      dart.fn(pageBuilder, T$.BuildContextAndGoRouterStateToPageOfvoid());
      function redirect(state) {
        return factoryImpl(state).redirect();
      }
      dart.fn(redirect, T$.GoRouterStateToStringN());
      return new go_route.GoRoute.new({path: path, builder: builder, pageBuilder: pageBuilder, redirect: redirect, routes: routes});
    }
  };
  (route_data.GoRouteData.new = function() {
    ;
  }).prototype = route_data.GoRouteData.prototype;
  dart.addTypeTests(route_data.GoRouteData);
  dart.addTypeCaches(route_data.GoRouteData);
  dart.setMethodSignature(route_data.GoRouteData, () => ({
    __proto__: dart.getMethods(route_data.GoRouteData.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    buildPage: dart.fnType(navigator.Page$(dart.void), [framework.BuildContext]),
    redirect: dart.fnType(dart.nullable(core.String), [])
  }));
  dart.setStaticMethodSignature(route_data.GoRouteData, () => ['$location', '$route']);
  dart.setLibraryUri(route_data.GoRouteData, I[19]);
  dart.setStaticFieldSignature(route_data.GoRouteData, () => ['_stateObjectExpando']);
  dart.defineLazy(route_data.GoRouteData, {
    /*route_data.GoRouteData._stateObjectExpando*/get _stateObjectExpando() {
      return new (T$.ExpandoOfGoRouteData()).new("GoRouteState to GoRouteData expando");
    }
  }, false);
  var path$1 = dart.privateName(route_data, "TypedGoRoute.path");
  var routes$0 = dart.privateName(route_data, "TypedGoRoute.routes");
  const _is_TypedGoRoute_default = Symbol('_is_TypedGoRoute_default');
  route_data.TypedGoRoute$ = dart.generic(T => {
    class TypedGoRoute extends core.Object {
      get path() {
        return this[path$1];
      }
      set path(value) {
        super.path = value;
      }
      get routes() {
        return this[routes$0];
      }
      set routes(value) {
        super.routes = value;
      }
      static ['_#new#tearOff'](T, opts) {
        let path = opts && 'path' in opts ? opts.path : null;
        let routes = opts && 'routes' in opts ? opts.routes : C[26] || CT.C26;
        return new (route_data.TypedGoRoute$(T)).new({path: path, routes: routes});
      }
    }
    (TypedGoRoute.new = function(opts) {
      let path = opts && 'path' in opts ? opts.path : null;
      let routes = opts && 'routes' in opts ? opts.routes : C[26] || CT.C26;
      this[path$1] = path;
      this[routes$0] = routes;
      ;
    }).prototype = TypedGoRoute.prototype;
    dart.addTypeTests(TypedGoRoute);
    TypedGoRoute.prototype[_is_TypedGoRoute_default] = true;
    dart.addTypeCaches(TypedGoRoute);
    dart.setLibraryUri(TypedGoRoute, I[19]);
    dart.setFieldSignature(TypedGoRoute, () => ({
      __proto__: dart.getFields(TypedGoRoute.__proto__),
      path: dart.finalFieldType(core.String),
      routes: dart.finalFieldType(core.List$(route_data.TypedGoRoute$(route_data.GoRouteData)))
    }));
    return TypedGoRoute;
  });
  route_data.TypedGoRoute = route_data.TypedGoRoute$();
  dart.addTypeTests(route_data.TypedGoRoute, _is_TypedGoRoute_default);
  route_data.NoOpPage = class NoOpPage extends navigator.Page$(dart.void) {
    static ['_#new#tearOff']() {
      return new route_data.NoOpPage.new();
    }
    createRoute(context) {
      return dart.throw(new core.UnsupportedError.new("Should never be called"));
    }
  };
  (route_data.NoOpPage.new = function() {
    route_data.NoOpPage.__proto__.new.call(this);
    ;
  }).prototype = route_data.NoOpPage.prototype;
  dart.addTypeTests(route_data.NoOpPage);
  dart.addTypeCaches(route_data.NoOpPage);
  dart.setMethodSignature(route_data.NoOpPage, () => ({
    __proto__: dart.getMethods(route_data.NoOpPage.__proto__),
    createRoute: dart.fnType(navigator.Route$(dart.void), [framework.BuildContext])
  }));
  dart.setLibraryUri(route_data.NoOpPage, I[19]);
  var _name = dart.privateName(core, "_name");
  var _enumToString = dart.privateName(core, "_enumToString");
  url_path_strategy.UrlPathStrategy = class UrlPathStrategy extends core._Enum {
    [_enumToString]() {
      return "UrlPathStrategy." + this[_name];
    }
  };
  (url_path_strategy.UrlPathStrategy.new = function(index, name) {
    url_path_strategy.UrlPathStrategy.__proto__.new.call(this, index, name);
    ;
  }).prototype = url_path_strategy.UrlPathStrategy.prototype;
  dart.addTypeTests(url_path_strategy.UrlPathStrategy);
  dart.addTypeCaches(url_path_strategy.UrlPathStrategy);
  dart.setMethodSignature(url_path_strategy.UrlPathStrategy, () => ({
    __proto__: dart.getMethods(url_path_strategy.UrlPathStrategy.__proto__),
    [_enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(url_path_strategy.UrlPathStrategy, I[20]);
  dart.setStaticFieldSignature(url_path_strategy.UrlPathStrategy, () => ['values', 'hash', 'path']);
  dart.defineLazy(url_path_strategy.UrlPathStrategy, {
    /*url_path_strategy.UrlPathStrategy.values*/get values() {
      return C[27] || CT.C27;
    },
    /*url_path_strategy.UrlPathStrategy.hash*/get hash() {
      return C[28] || CT.C28;
    },
    /*url_path_strategy.UrlPathStrategy.path*/get path() {
      return C[29] || CT.C29;
    }
  }, false);
  var builder$0 = dart.privateName(provider$, "InheritedProvider.builder");
  var _lazy = dart.privateName(provider$, "_lazy");
  var _delegate = dart.privateName(provider$, "_delegate");
  var _child = dart.privateName(nested, "SingleChildStatelessWidget._child");
  var _child$ = dart.privateName(nested, "_child");
  nested.SingleChildStatelessWidget = class SingleChildStatelessWidget extends framework.StatelessWidget {
    get [_child$]() {
      return this[_child];
    }
    set [_child$](value) {
      super[_child$] = value;
    }
    build(context) {
      return this.buildWithChild(context, this[_child$]);
    }
    createElement() {
      return new nested.SingleChildStatelessElement.new(this);
    }
  };
  (nested.SingleChildStatelessWidget.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let child = opts && 'child' in opts ? opts.child : null;
    this[_child] = child;
    nested.SingleChildStatelessWidget.__proto__.new.call(this, {key: key});
    ;
  }).prototype = nested.SingleChildStatelessWidget.prototype;
  dart.addTypeTests(nested.SingleChildStatelessWidget);
  dart.addTypeCaches(nested.SingleChildStatelessWidget);
  nested.SingleChildStatelessWidget[dart.implements] = () => [nested.SingleChildWidget];
  dart.setMethodSignature(nested.SingleChildStatelessWidget, () => ({
    __proto__: dart.getMethods(nested.SingleChildStatelessWidget.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    createElement: dart.fnType(nested.SingleChildStatelessElement, [])
  }));
  dart.setLibraryUri(nested.SingleChildStatelessWidget, I[22]);
  dart.setFieldSignature(nested.SingleChildStatelessWidget, () => ({
    __proto__: dart.getFields(nested.SingleChildStatelessWidget.__proto__),
    [_child$]: dart.finalFieldType(dart.nullable(framework.Widget))
  }));
  const _is_InheritedProvider_default = Symbol('_is_InheritedProvider_default');
  provider$.InheritedProvider$ = dart.generic(T => {
    var __t$_CreateInheritedProviderOfT = () => (__t$_CreateInheritedProviderOfT = dart.constFn(provider$._CreateInheritedProvider$(T)))();
    var __t$_ValueInheritedProviderOfT = () => (__t$_ValueInheritedProviderOfT = dart.constFn(provider$._ValueInheritedProvider$(T)))();
    var __t$_InheritedProviderElementOfT = () => (__t$_InheritedProviderElementOfT = dart.constFn(provider$._InheritedProviderElement$(T)))();
    var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
    var __t$_InheritedProviderScopeOfTN = () => (__t$_InheritedProviderScopeOfTN = dart.constFn(provider$._InheritedProviderScope$(__t$TN())))();
    class InheritedProvider extends nested.SingleChildStatelessWidget {
      get builder() {
        return this[builder$0];
      }
      set builder(value) {
        super.builder = value;
      }
      static ['_#new#tearOff'](T, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let create = opts && 'create' in opts ? opts.create : null;
        let update = opts && 'update' in opts ? opts.update : null;
        let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
        let debugCheckInvalidValueType = opts && 'debugCheckInvalidValueType' in opts ? opts.debugCheckInvalidValueType : null;
        let startListening = opts && 'startListening' in opts ? opts.startListening : null;
        let dispose = opts && 'dispose' in opts ? opts.dispose : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (provider$.InheritedProvider$(T)).new({key: key, create: create, update: update, updateShouldNotify: updateShouldNotify, debugCheckInvalidValueType: debugCheckInvalidValueType, startListening: startListening, dispose: dispose, builder: builder, lazy: lazy, child: child});
      }
      static ['_#value#tearOff'](T, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let value = opts && 'value' in opts ? opts.value : null;
        let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
        let startListening = opts && 'startListening' in opts ? opts.startListening : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (provider$.InheritedProvider$(T)).value({key: key, value: value, updateShouldNotify: updateShouldNotify, startListening: startListening, lazy: lazy, builder: builder, child: child});
      }
      static ['_#_constructor#tearOff'](T, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let delegate = opts && 'delegate' in opts ? opts.delegate : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (provider$.InheritedProvider$(T))._constructor({key: key, delegate: delegate, lazy: lazy, builder: builder, child: child});
      }
      debugFillProperties(properties) {
        super.debugFillProperties(properties);
        this[_delegate].debugFillProperties(properties);
      }
      createElement() {
        return new (__t$_InheritedProviderElementOfT()).new(this);
      }
      buildWithChild(context, child) {
        if (!(this.builder != null || child != null)) dart.assertFailed(dart.str(this[$runtimeType]) + " used outside of MultiProvider must specify a child", I[21], 158, 7, "builder != null || child != null");
        return new (__t$_InheritedProviderScopeOfTN()).new({owner: this, debugType: dart.str(this[$runtimeType]), child: this.builder != null ? new basic.Builder.new({builder: dart.fn(context => dart.nullCheck(this.builder)(context, child), T$.BuildContextToWidget())}) : dart.nullCheck(child)});
      }
    }
    (InheritedProvider.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let update = opts && 'update' in opts ? opts.update : null;
      let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
      let debugCheckInvalidValueType = opts && 'debugCheckInvalidValueType' in opts ? opts.debugCheckInvalidValueType : null;
      let startListening = opts && 'startListening' in opts ? opts.startListening : null;
      let dispose = opts && 'dispose' in opts ? opts.dispose : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let child = opts && 'child' in opts ? opts.child : null;
      this[builder$0] = builder;
      this[_lazy] = lazy;
      this[_delegate] = new (__t$_CreateInheritedProviderOfT()).new({create: create, update: update, updateShouldNotify: updateShouldNotify, debugCheckInvalidValueType: debugCheckInvalidValueType, startListening: startListening, dispose: dispose});
      InheritedProvider.__proto__.new.call(this, {key: key, child: child});
      ;
    }).prototype = InheritedProvider.prototype;
    (InheritedProvider.value = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let value = opts && 'value' in opts ? opts.value : null;
      let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
      let startListening = opts && 'startListening' in opts ? opts.startListening : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      this[builder$0] = builder;
      this[_lazy] = lazy;
      this[_delegate] = new (__t$_ValueInheritedProviderOfT()).new({value: value, updateShouldNotify: updateShouldNotify, startListening: startListening});
      InheritedProvider.__proto__.new.call(this, {key: key, child: child});
      ;
    }).prototype = InheritedProvider.prototype;
    (InheritedProvider._constructor = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let delegate = opts && 'delegate' in opts ? opts.delegate : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      this[builder$0] = builder;
      this[_lazy] = lazy;
      this[_delegate] = delegate;
      InheritedProvider.__proto__.new.call(this, {key: key, child: child});
      ;
    }).prototype = InheritedProvider.prototype;
    dart.addTypeTests(InheritedProvider);
    InheritedProvider.prototype[_is_InheritedProvider_default] = true;
    dart.addTypeCaches(InheritedProvider);
    dart.setMethodSignature(InheritedProvider, () => ({
      __proto__: dart.getMethods(InheritedProvider.__proto__),
      createElement: dart.fnType(provider$._InheritedProviderElement$(T), []),
      buildWithChild: dart.fnType(framework.Widget, [framework.BuildContext, dart.nullable(framework.Widget)])
    }));
    dart.setLibraryUri(InheritedProvider, I[23]);
    dart.setFieldSignature(InheritedProvider, () => ({
      __proto__: dart.getFields(InheritedProvider.__proto__),
      [_delegate]: dart.finalFieldType(provider$._Delegate$(T)),
      [_lazy]: dart.finalFieldType(dart.nullable(core.bool)),
      builder: dart.finalFieldType(dart.nullable(dart.fnType(framework.Widget, [framework.BuildContext, dart.nullable(framework.Widget)])))
    }));
    return InheritedProvider;
  });
  provider$.InheritedProvider = provider$.InheritedProvider$();
  dart.addTypeTests(provider$.InheritedProvider, _is_InheritedProvider_default);
  const _is_DeferredInheritedProvider_default = Symbol('_is_DeferredInheritedProvider_default');
  provider$.DeferredInheritedProvider$ = dart.generic((T, R) => {
    var __t$_CreateDeferredInheritedProviderOfT$R = () => (__t$_CreateDeferredInheritedProviderOfT$R = dart.constFn(provider$._CreateDeferredInheritedProvider$(T, R)))();
    var __t$_ValueDeferredInheritedProviderOfT$R = () => (__t$_ValueDeferredInheritedProviderOfT$R = dart.constFn(provider$._ValueDeferredInheritedProvider$(T, R)))();
    class DeferredInheritedProvider extends provider$.InheritedProvider$(R) {
      static ['_#new#tearOff'](T, R, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let create = opts && 'create' in opts ? opts.create : null;
        let dispose = opts && 'dispose' in opts ? opts.dispose : null;
        let startListening = opts && 'startListening' in opts ? opts.startListening : null;
        let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (provider$.DeferredInheritedProvider$(T, R)).new({key: key, create: create, dispose: dispose, startListening: startListening, updateShouldNotify: updateShouldNotify, lazy: lazy, builder: builder, child: child});
      }
      static ['_#value#tearOff'](T, R, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let value = opts && 'value' in opts ? opts.value : null;
        let startListening = opts && 'startListening' in opts ? opts.startListening : null;
        let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (provider$.DeferredInheritedProvider$(T, R)).value({key: key, value: value, startListening: startListening, updateShouldNotify: updateShouldNotify, lazy: lazy, builder: builder, child: child});
      }
    }
    (DeferredInheritedProvider.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let dispose = opts && 'dispose' in opts ? opts.dispose : null;
      let startListening = opts && 'startListening' in opts ? opts.startListening : null;
      let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      DeferredInheritedProvider.__proto__._constructor.call(this, {key: key, child: child, lazy: lazy, builder: builder, delegate: new (__t$_CreateDeferredInheritedProviderOfT$R()).new({create: create, dispose: dispose, updateShouldNotify: updateShouldNotify, startListening: startListening})});
      ;
    }).prototype = DeferredInheritedProvider.prototype;
    (DeferredInheritedProvider.value = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let value = opts && 'value' in opts ? opts.value : null;
      let startListening = opts && 'startListening' in opts ? opts.startListening : null;
      let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      DeferredInheritedProvider.__proto__._constructor.call(this, {key: key, lazy: lazy, builder: builder, delegate: new (__t$_ValueDeferredInheritedProviderOfT$R()).new(value, updateShouldNotify, startListening), child: child});
      ;
    }).prototype = DeferredInheritedProvider.prototype;
    dart.addTypeTests(DeferredInheritedProvider);
    DeferredInheritedProvider.prototype[_is_DeferredInheritedProvider_default] = true;
    dart.addTypeCaches(DeferredInheritedProvider);
    dart.setLibraryUri(DeferredInheritedProvider, I[23]);
    return DeferredInheritedProvider;
  });
  provider$.DeferredInheritedProvider = provider$.DeferredInheritedProvider$();
  dart.addTypeTests(provider$.DeferredInheritedProvider, _is_DeferredInheritedProvider_default);
  const _is_StreamProvider_default = Symbol('_is_StreamProvider_default');
  async_provider.StreamProvider$ = dart.generic(T => {
    class StreamProvider extends provider$.DeferredInheritedProvider$(dart.nullable(async.Stream$(T)), T) {
      static ['_#new#tearOff'](T, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let create = opts && 'create' in opts ? opts.create : null;
        let initialData = opts && 'initialData' in opts ? opts.initialData : null;
        let catchError = opts && 'catchError' in opts ? opts.catchError : null;
        let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (async_provider.StreamProvider$(T)).new({key: key, create: create, initialData: initialData, catchError: catchError, updateShouldNotify: updateShouldNotify, lazy: lazy, builder: builder, child: child});
      }
      static ['_#value#tearOff'](T, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let value = opts && 'value' in opts ? opts.value : null;
        let initialData = opts && 'initialData' in opts ? opts.initialData : null;
        let catchError = opts && 'catchError' in opts ? opts.catchError : null;
        let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (async_provider.StreamProvider$(T)).value({key: key, value: value, initialData: initialData, catchError: catchError, updateShouldNotify: updateShouldNotify, lazy: lazy, builder: builder, child: child});
      }
    }
    (StreamProvider.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let initialData = opts && 'initialData' in opts ? opts.initialData : null;
      let catchError = opts && 'catchError' in opts ? opts.catchError : null;
      let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      StreamProvider.__proto__.new.call(this, {key: key, lazy: lazy, builder: builder, create: create, updateShouldNotify: updateShouldNotify, startListening: async_provider._streamStartListening(T, {catchError: catchError, initialData: initialData}), child: child});
      ;
    }).prototype = StreamProvider.prototype;
    (StreamProvider.value = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let value = opts && 'value' in opts ? opts.value : null;
      let initialData = opts && 'initialData' in opts ? opts.initialData : null;
      let catchError = opts && 'catchError' in opts ? opts.catchError : null;
      let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      StreamProvider.__proto__.value.call(this, {key: key, lazy: lazy, builder: builder, value: value, updateShouldNotify: updateShouldNotify, startListening: async_provider._streamStartListening(T, {catchError: catchError, initialData: initialData}), child: child});
      ;
    }).prototype = StreamProvider.prototype;
    dart.addTypeTests(StreamProvider);
    StreamProvider.prototype[_is_StreamProvider_default] = true;
    dart.addTypeCaches(StreamProvider);
    dart.setLibraryUri(StreamProvider, I[24]);
    return StreamProvider;
  });
  async_provider.StreamProvider = async_provider.StreamProvider$();
  dart.addTypeTests(async_provider.StreamProvider, _is_StreamProvider_default);
  const _is_FutureProvider_default = Symbol('_is_FutureProvider_default');
  async_provider.FutureProvider$ = dart.generic(T => {
    class FutureProvider extends provider$.DeferredInheritedProvider$(dart.nullable(async.Future$(T)), T) {
      static ['_#new#tearOff'](T, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let create = opts && 'create' in opts ? opts.create : null;
        let initialData = opts && 'initialData' in opts ? opts.initialData : null;
        let catchError = opts && 'catchError' in opts ? opts.catchError : null;
        let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (async_provider.FutureProvider$(T)).new({key: key, create: create, initialData: initialData, catchError: catchError, updateShouldNotify: updateShouldNotify, lazy: lazy, builder: builder, child: child});
      }
      static ['_#value#tearOff'](T, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let value = opts && 'value' in opts ? opts.value : null;
        let initialData = opts && 'initialData' in opts ? opts.initialData : null;
        let catchError = opts && 'catchError' in opts ? opts.catchError : null;
        let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (async_provider.FutureProvider$(T)).value({key: key, value: value, initialData: initialData, catchError: catchError, updateShouldNotify: updateShouldNotify, builder: builder, child: child});
      }
    }
    (FutureProvider.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let initialData = opts && 'initialData' in opts ? opts.initialData : null;
      let catchError = opts && 'catchError' in opts ? opts.catchError : null;
      let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      FutureProvider.__proto__.new.call(this, {key: key, lazy: lazy, builder: builder, create: create, updateShouldNotify: updateShouldNotify, startListening: async_provider._futureStartListening(T, {catchError: catchError, initialData: initialData}), child: child});
      ;
    }).prototype = FutureProvider.prototype;
    (FutureProvider.value = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let value = opts && 'value' in opts ? opts.value : null;
      let initialData = opts && 'initialData' in opts ? opts.initialData : null;
      let catchError = opts && 'catchError' in opts ? opts.catchError : null;
      let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      FutureProvider.__proto__.value.call(this, {key: key, builder: builder, lazy: false, value: value, updateShouldNotify: updateShouldNotify, startListening: async_provider._futureStartListening(T, {catchError: catchError, initialData: initialData}), child: child});
      ;
    }).prototype = FutureProvider.prototype;
    dart.addTypeTests(FutureProvider);
    FutureProvider.prototype[_is_FutureProvider_default] = true;
    dart.addTypeCaches(FutureProvider);
    dart.setLibraryUri(FutureProvider, I[24]);
    return FutureProvider;
  });
  async_provider.FutureProvider = async_provider.FutureProvider$();
  dart.addTypeTests(async_provider.FutureProvider, _is_FutureProvider_default);
  async_provider._streamStartListening = function _streamStartListening(T, opts) {
    let initialData = opts && 'initialData' in opts ? opts.initialData : null;
    let catchError = opts && 'catchError' in opts ? opts.catchError : null;
    return dart.fn((e, setState, controller, __) => {
      if (!e.hasValue) {
        setState(initialData);
      }
      if (controller == null) {
        return dart.fn(() => {
        }, T$.VoidTovoid());
      }
      let sub = controller.listen(setState, {onError: dart.fn(error => {
          if (catchError != null) {
            setState(catchError(e, error));
          } else {
            assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({library: "provider", exception: assertions.FlutterError.new("An exception was throw by " + dart.str(dart.runtimeType(controller)) + " listened by\nStreamProvider<" + dart.str(dart.wrapType(T)) + ">, but no `catchError` was provided.\n\nException:\n" + dart.str(error) + "\n")}));
          }
        }, T$.ObjectNToNull())});
      return dart.bind(sub, 'cancel');
    }, dart.fnType(T$.VoidTovoid(), [provider$.InheritedContext$(dart.nullable(T)), dart.fnType(dart.void, [T]), dart.nullable(async.Stream$(T)), dart.nullable(T)]));
  };
  async_provider._futureStartListening = function _futureStartListening(T, opts) {
    let initialData = opts && 'initialData' in opts ? opts.initialData : null;
    let catchError = opts && 'catchError' in opts ? opts.catchError : null;
    return dart.fn((e, setState, controller, __) => {
      let t18;
      if (!e.hasValue) {
        setState(initialData);
      }
      let canceled = false;
      t18 = controller;
      t18 == null ? null : t18.then(core.Null, dart.fn(value => {
        if (canceled) {
          return;
        }
        setState(value);
      }, dart.fnType(core.Null, [T])), {onError: dart.fn(error => {
          if (canceled) {
            return;
          }
          if (catchError != null) {
            setState(catchError(e, error));
          } else {
            assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({library: "provider", exception: assertions.FlutterError.new("An exception was throw by " + dart.str(dart.runtimeType(controller)) + " listened by\nFutureProvider<" + dart.str(dart.wrapType(T)) + ">, but no `catchError` was provided.\n\nException:\n" + dart.str(error) + "\n")}));
          }
        }, T$.ObjectNToNull())});
      return dart.fn(() => canceled = true, T$.VoidTovoid());
    }, dart.fnType(T$.VoidTovoid(), [provider$.InheritedContext$(dart.nullable(T)), dart.fnType(dart.void, [T]), dart.nullable(async.Future$(T)), dart.nullable(T)]));
  };
  const _is_ListenableProvider_default = Symbol('_is_ListenableProvider_default');
  listenable_provider.ListenableProvider$ = dart.generic(T => {
    class ListenableProvider extends provider$.InheritedProvider$(T) {
      static ['_#new#tearOff'](T, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let create = opts && 'create' in opts ? opts.create : null;
        let dispose = opts && 'dispose' in opts ? opts.dispose : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (listenable_provider.ListenableProvider$(T)).new({key: key, create: create, dispose: dispose, lazy: lazy, builder: builder, child: child});
      }
      static ['_#value#tearOff'](T, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let value = opts && 'value' in opts ? opts.value : null;
        let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (listenable_provider.ListenableProvider$(T)).value({key: key, value: value, updateShouldNotify: updateShouldNotify, builder: builder, child: child});
      }
      static _startListening(e, value) {
        let t18;
        t18 = value;
        t18 == null ? null : t18.addListener(dart.bind(e, 'markNeedsNotifyDependents'));
        return dart.fn(() => {
          let t18;
          t18 = value;
          return t18 == null ? null : t18.removeListener(dart.bind(e, 'markNeedsNotifyDependents'));
        }, T$.VoidTovoid());
      }
    }
    (ListenableProvider.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let dispose = opts && 'dispose' in opts ? opts.dispose : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      ListenableProvider.__proto__.new.call(this, {key: key, startListening: C[31] || CT.C31, create: create, dispose: dispose, lazy: lazy, builder: builder, child: child});
      ;
    }).prototype = ListenableProvider.prototype;
    (ListenableProvider.value = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let value = opts && 'value' in opts ? opts.value : null;
      let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      ListenableProvider.__proto__.value.call(this, {key: key, builder: builder, value: value, updateShouldNotify: updateShouldNotify, startListening: C[31] || CT.C31, child: child});
      ;
    }).prototype = ListenableProvider.prototype;
    dart.addTypeTests(ListenableProvider);
    ListenableProvider.prototype[_is_ListenableProvider_default] = true;
    dart.addTypeCaches(ListenableProvider);
    dart.setStaticMethodSignature(ListenableProvider, () => ['_startListening']);
    dart.setLibraryUri(ListenableProvider, I[25]);
    return ListenableProvider;
  });
  listenable_provider.ListenableProvider = listenable_provider.ListenableProvider$();
  dart.addTypeTests(listenable_provider.ListenableProvider, _is_ListenableProvider_default);
  const _is_ChangeNotifierProvider_default = Symbol('_is_ChangeNotifierProvider_default');
  change_notifier_provider.ChangeNotifierProvider$ = dart.generic(T => {
    class ChangeNotifierProvider extends listenable_provider.ListenableProvider$(T) {
      static ['_#new#tearOff'](T, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let create = opts && 'create' in opts ? opts.create : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (change_notifier_provider.ChangeNotifierProvider$(T)).new({key: key, create: create, lazy: lazy, builder: builder, child: child});
      }
      static ['_#value#tearOff'](T, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let value = opts && 'value' in opts ? opts.value : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (change_notifier_provider.ChangeNotifierProvider$(T)).value({key: key, value: value, builder: builder, child: child});
      }
      static _dispose(context, notifier) {
        let t18;
        t18 = notifier;
        t18 == null ? null : t18.dispose();
      }
    }
    (ChangeNotifierProvider.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      ChangeNotifierProvider.__proto__.new.call(this, {key: key, create: create, dispose: C[30] || CT.C30, lazy: lazy, builder: builder, child: child});
      ;
    }).prototype = ChangeNotifierProvider.prototype;
    (ChangeNotifierProvider.value = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let value = opts && 'value' in opts ? opts.value : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      ChangeNotifierProvider.__proto__.value.call(this, {key: key, builder: builder, value: value, child: child});
      ;
    }).prototype = ChangeNotifierProvider.prototype;
    dart.addTypeTests(ChangeNotifierProvider);
    ChangeNotifierProvider.prototype[_is_ChangeNotifierProvider_default] = true;
    dart.addTypeCaches(ChangeNotifierProvider);
    dart.setStaticMethodSignature(ChangeNotifierProvider, () => ['_dispose']);
    dart.setLibraryUri(ChangeNotifierProvider, I[26]);
    return ChangeNotifierProvider;
  });
  change_notifier_provider.ChangeNotifierProvider = change_notifier_provider.ChangeNotifierProvider$();
  dart.addTypeTests(change_notifier_provider.ChangeNotifierProvider, _is_ChangeNotifierProvider_default);
  const _is_ListenableProxyProvider0_default = Symbol('_is_ListenableProxyProvider0_default');
  listenable_provider.ListenableProxyProvider0$ = dart.generic(R => {
    class ListenableProxyProvider0 extends provider$.InheritedProvider$(R) {
      static ['_#new#tearOff'](R, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let create = opts && 'create' in opts ? opts.create : null;
        let update = opts && 'update' in opts ? opts.update : null;
        let dispose = opts && 'dispose' in opts ? opts.dispose : null;
        let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (listenable_provider.ListenableProxyProvider0$(R)).new({key: key, create: create, update: update, dispose: dispose, updateShouldNotify: updateShouldNotify, lazy: lazy, builder: builder, child: child});
      }
    }
    (ListenableProxyProvider0.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let update = opts && 'update' in opts ? opts.update : null;
      let dispose = opts && 'dispose' in opts ? opts.dispose : null;
      let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      ListenableProxyProvider0.__proto__.new.call(this, {key: key, create: create, update: update, lazy: lazy, builder: builder, dispose: dispose, updateShouldNotify: updateShouldNotify, startListening: C[31] || CT.C31, child: child});
      ;
    }).prototype = ListenableProxyProvider0.prototype;
    dart.addTypeTests(ListenableProxyProvider0);
    ListenableProxyProvider0.prototype[_is_ListenableProxyProvider0_default] = true;
    dart.addTypeCaches(ListenableProxyProvider0);
    dart.setLibraryUri(ListenableProxyProvider0, I[25]);
    return ListenableProxyProvider0;
  });
  listenable_provider.ListenableProxyProvider0 = listenable_provider.ListenableProxyProvider0$();
  dart.addTypeTests(listenable_provider.ListenableProxyProvider0, _is_ListenableProxyProvider0_default);
  const _is_ListenableProxyProvider_default = Symbol('_is_ListenableProxyProvider_default');
  listenable_provider.ListenableProxyProvider$ = dart.generic((T, R) => {
    var __t$RN = () => (__t$RN = dart.constFn(dart.nullable(R)))();
    var __t$BuildContextAndRNToR = () => (__t$BuildContextAndRNToR = dart.constFn(dart.fnType(R, [framework.BuildContext, __t$RN()])))();
    class ListenableProxyProvider extends listenable_provider.ListenableProxyProvider0$(R) {
      static ['_#new#tearOff'](T, R, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let create = opts && 'create' in opts ? opts.create : null;
        let update = opts && 'update' in opts ? opts.update : null;
        let dispose = opts && 'dispose' in opts ? opts.dispose : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (listenable_provider.ListenableProxyProvider$(T, R)).new({key: key, create: create, update: update, dispose: dispose, lazy: lazy, builder: builder, child: child});
      }
    }
    (ListenableProxyProvider.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let update = opts && 'update' in opts ? opts.update : null;
      let dispose = opts && 'dispose' in opts ? opts.dispose : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      ListenableProxyProvider.__proto__.new.call(this, {key: key, create: create, lazy: lazy, builder: builder, update: dart.fn((context, previous) => update(context, provider$.Provider.of(T, context), previous), __t$BuildContextAndRNToR()), dispose: dispose, child: child});
      ;
    }).prototype = ListenableProxyProvider.prototype;
    dart.addTypeTests(ListenableProxyProvider);
    ListenableProxyProvider.prototype[_is_ListenableProxyProvider_default] = true;
    dart.addTypeCaches(ListenableProxyProvider);
    dart.setLibraryUri(ListenableProxyProvider, I[25]);
    return ListenableProxyProvider;
  });
  listenable_provider.ListenableProxyProvider = listenable_provider.ListenableProxyProvider$();
  dart.addTypeTests(listenable_provider.ListenableProxyProvider, _is_ListenableProxyProvider_default);
  const _is_ChangeNotifierProxyProvider_default = Symbol('_is_ChangeNotifierProxyProvider_default');
  change_notifier_provider.ChangeNotifierProxyProvider$ = dart.generic((T, R) => {
    class ChangeNotifierProxyProvider extends listenable_provider.ListenableProxyProvider$(T, R) {
      static ['_#new#tearOff'](T, R, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let create = opts && 'create' in opts ? opts.create : null;
        let update = opts && 'update' in opts ? opts.update : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (change_notifier_provider.ChangeNotifierProxyProvider$(T, R)).new({key: key, create: create, update: update, lazy: lazy, builder: builder, child: child});
      }
    }
    (ChangeNotifierProxyProvider.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let update = opts && 'update' in opts ? opts.update : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      ChangeNotifierProxyProvider.__proto__.new.call(this, {key: key, create: create, update: update, dispose: C[30] || CT.C30, lazy: lazy, builder: builder, child: child});
      ;
    }).prototype = ChangeNotifierProxyProvider.prototype;
    dart.addTypeTests(ChangeNotifierProxyProvider);
    ChangeNotifierProxyProvider.prototype[_is_ChangeNotifierProxyProvider_default] = true;
    dart.addTypeCaches(ChangeNotifierProxyProvider);
    dart.setLibraryUri(ChangeNotifierProxyProvider, I[26]);
    return ChangeNotifierProxyProvider;
  });
  change_notifier_provider.ChangeNotifierProxyProvider = change_notifier_provider.ChangeNotifierProxyProvider$();
  dart.addTypeTests(change_notifier_provider.ChangeNotifierProxyProvider, _is_ChangeNotifierProxyProvider_default);
  const _is_ChangeNotifierProxyProvider0_default = Symbol('_is_ChangeNotifierProxyProvider0_default');
  change_notifier_provider.ChangeNotifierProxyProvider0$ = dart.generic(R => {
    class ChangeNotifierProxyProvider0 extends listenable_provider.ListenableProxyProvider0$(R) {
      static ['_#new#tearOff'](R, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let create = opts && 'create' in opts ? opts.create : null;
        let update = opts && 'update' in opts ? opts.update : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (change_notifier_provider.ChangeNotifierProxyProvider0$(R)).new({key: key, create: create, update: update, lazy: lazy, builder: builder, child: child});
      }
    }
    (ChangeNotifierProxyProvider0.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let update = opts && 'update' in opts ? opts.update : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      ChangeNotifierProxyProvider0.__proto__.new.call(this, {key: key, create: create, update: update, dispose: C[30] || CT.C30, lazy: lazy, builder: builder, child: child});
      ;
    }).prototype = ChangeNotifierProxyProvider0.prototype;
    dart.addTypeTests(ChangeNotifierProxyProvider0);
    ChangeNotifierProxyProvider0.prototype[_is_ChangeNotifierProxyProvider0_default] = true;
    dart.addTypeCaches(ChangeNotifierProxyProvider0);
    dart.setLibraryUri(ChangeNotifierProxyProvider0, I[26]);
    return ChangeNotifierProxyProvider0;
  });
  change_notifier_provider.ChangeNotifierProxyProvider0 = change_notifier_provider.ChangeNotifierProxyProvider0$();
  dart.addTypeTests(change_notifier_provider.ChangeNotifierProxyProvider0, _is_ChangeNotifierProxyProvider0_default);
  const _is_ListenableProxyProvider2_default = Symbol('_is_ListenableProxyProvider2_default');
  listenable_provider.ListenableProxyProvider2$ = dart.generic((T, T2, R) => {
    var __t$RN = () => (__t$RN = dart.constFn(dart.nullable(R)))();
    var __t$BuildContextAndRNToR = () => (__t$BuildContextAndRNToR = dart.constFn(dart.fnType(R, [framework.BuildContext, __t$RN()])))();
    class ListenableProxyProvider2 extends listenable_provider.ListenableProxyProvider0$(R) {
      static ['_#new#tearOff'](T, T2, R, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let create = opts && 'create' in opts ? opts.create : null;
        let update = opts && 'update' in opts ? opts.update : null;
        let dispose = opts && 'dispose' in opts ? opts.dispose : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (listenable_provider.ListenableProxyProvider2$(T, T2, R)).new({key: key, create: create, update: update, dispose: dispose, lazy: lazy, builder: builder, child: child});
      }
    }
    (ListenableProxyProvider2.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let update = opts && 'update' in opts ? opts.update : null;
      let dispose = opts && 'dispose' in opts ? opts.dispose : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      ListenableProxyProvider2.__proto__.new.call(this, {key: key, create: create, lazy: lazy, builder: builder, update: dart.fn((context, previous) => update(context, provider$.Provider.of(T, context), provider$.Provider.of(T2, context), previous), __t$BuildContextAndRNToR()), dispose: dispose, child: child});
      ;
    }).prototype = ListenableProxyProvider2.prototype;
    dart.addTypeTests(ListenableProxyProvider2);
    ListenableProxyProvider2.prototype[_is_ListenableProxyProvider2_default] = true;
    dart.addTypeCaches(ListenableProxyProvider2);
    dart.setLibraryUri(ListenableProxyProvider2, I[25]);
    return ListenableProxyProvider2;
  });
  listenable_provider.ListenableProxyProvider2 = listenable_provider.ListenableProxyProvider2$();
  dart.addTypeTests(listenable_provider.ListenableProxyProvider2, _is_ListenableProxyProvider2_default);
  const _is_ChangeNotifierProxyProvider2_default = Symbol('_is_ChangeNotifierProxyProvider2_default');
  change_notifier_provider.ChangeNotifierProxyProvider2$ = dart.generic((T, T2, R) => {
    class ChangeNotifierProxyProvider2 extends listenable_provider.ListenableProxyProvider2$(T, T2, R) {
      static ['_#new#tearOff'](T, T2, R, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let create = opts && 'create' in opts ? opts.create : null;
        let update = opts && 'update' in opts ? opts.update : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (change_notifier_provider.ChangeNotifierProxyProvider2$(T, T2, R)).new({key: key, create: create, update: update, lazy: lazy, builder: builder, child: child});
      }
    }
    (ChangeNotifierProxyProvider2.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let update = opts && 'update' in opts ? opts.update : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      ChangeNotifierProxyProvider2.__proto__.new.call(this, {key: key, create: create, update: update, dispose: C[30] || CT.C30, lazy: lazy, builder: builder, child: child});
      ;
    }).prototype = ChangeNotifierProxyProvider2.prototype;
    dart.addTypeTests(ChangeNotifierProxyProvider2);
    ChangeNotifierProxyProvider2.prototype[_is_ChangeNotifierProxyProvider2_default] = true;
    dart.addTypeCaches(ChangeNotifierProxyProvider2);
    dart.setLibraryUri(ChangeNotifierProxyProvider2, I[26]);
    return ChangeNotifierProxyProvider2;
  });
  change_notifier_provider.ChangeNotifierProxyProvider2 = change_notifier_provider.ChangeNotifierProxyProvider2$();
  dart.addTypeTests(change_notifier_provider.ChangeNotifierProxyProvider2, _is_ChangeNotifierProxyProvider2_default);
  const _is_ListenableProxyProvider3_default = Symbol('_is_ListenableProxyProvider3_default');
  listenable_provider.ListenableProxyProvider3$ = dart.generic((T, T2, T3, R) => {
    var __t$RN = () => (__t$RN = dart.constFn(dart.nullable(R)))();
    var __t$BuildContextAndRNToR = () => (__t$BuildContextAndRNToR = dart.constFn(dart.fnType(R, [framework.BuildContext, __t$RN()])))();
    class ListenableProxyProvider3 extends listenable_provider.ListenableProxyProvider0$(R) {
      static ['_#new#tearOff'](T, T2, T3, R, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let create = opts && 'create' in opts ? opts.create : null;
        let update = opts && 'update' in opts ? opts.update : null;
        let dispose = opts && 'dispose' in opts ? opts.dispose : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (listenable_provider.ListenableProxyProvider3$(T, T2, T3, R)).new({key: key, create: create, update: update, dispose: dispose, lazy: lazy, builder: builder, child: child});
      }
    }
    (ListenableProxyProvider3.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let update = opts && 'update' in opts ? opts.update : null;
      let dispose = opts && 'dispose' in opts ? opts.dispose : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      ListenableProxyProvider3.__proto__.new.call(this, {key: key, create: create, lazy: lazy, builder: builder, update: dart.fn((context, previous) => update(context, provider$.Provider.of(T, context), provider$.Provider.of(T2, context), provider$.Provider.of(T3, context), previous), __t$BuildContextAndRNToR()), dispose: dispose, child: child});
      ;
    }).prototype = ListenableProxyProvider3.prototype;
    dart.addTypeTests(ListenableProxyProvider3);
    ListenableProxyProvider3.prototype[_is_ListenableProxyProvider3_default] = true;
    dart.addTypeCaches(ListenableProxyProvider3);
    dart.setLibraryUri(ListenableProxyProvider3, I[25]);
    return ListenableProxyProvider3;
  });
  listenable_provider.ListenableProxyProvider3 = listenable_provider.ListenableProxyProvider3$();
  dart.addTypeTests(listenable_provider.ListenableProxyProvider3, _is_ListenableProxyProvider3_default);
  const _is_ChangeNotifierProxyProvider3_default = Symbol('_is_ChangeNotifierProxyProvider3_default');
  change_notifier_provider.ChangeNotifierProxyProvider3$ = dart.generic((T, T2, T3, R) => {
    class ChangeNotifierProxyProvider3 extends listenable_provider.ListenableProxyProvider3$(T, T2, T3, R) {
      static ['_#new#tearOff'](T, T2, T3, R, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let create = opts && 'create' in opts ? opts.create : null;
        let update = opts && 'update' in opts ? opts.update : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (change_notifier_provider.ChangeNotifierProxyProvider3$(T, T2, T3, R)).new({key: key, create: create, update: update, lazy: lazy, builder: builder, child: child});
      }
    }
    (ChangeNotifierProxyProvider3.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let update = opts && 'update' in opts ? opts.update : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      ChangeNotifierProxyProvider3.__proto__.new.call(this, {key: key, create: create, update: update, dispose: C[30] || CT.C30, lazy: lazy, builder: builder, child: child});
      ;
    }).prototype = ChangeNotifierProxyProvider3.prototype;
    dart.addTypeTests(ChangeNotifierProxyProvider3);
    ChangeNotifierProxyProvider3.prototype[_is_ChangeNotifierProxyProvider3_default] = true;
    dart.addTypeCaches(ChangeNotifierProxyProvider3);
    dart.setLibraryUri(ChangeNotifierProxyProvider3, I[26]);
    return ChangeNotifierProxyProvider3;
  });
  change_notifier_provider.ChangeNotifierProxyProvider3 = change_notifier_provider.ChangeNotifierProxyProvider3$();
  dart.addTypeTests(change_notifier_provider.ChangeNotifierProxyProvider3, _is_ChangeNotifierProxyProvider3_default);
  const _is_ListenableProxyProvider4_default = Symbol('_is_ListenableProxyProvider4_default');
  listenable_provider.ListenableProxyProvider4$ = dart.generic((T, T2, T3, T4, R) => {
    var __t$RN = () => (__t$RN = dart.constFn(dart.nullable(R)))();
    var __t$BuildContextAndRNToR = () => (__t$BuildContextAndRNToR = dart.constFn(dart.fnType(R, [framework.BuildContext, __t$RN()])))();
    class ListenableProxyProvider4 extends listenable_provider.ListenableProxyProvider0$(R) {
      static ['_#new#tearOff'](T, T2, T3, T4, R, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let create = opts && 'create' in opts ? opts.create : null;
        let update = opts && 'update' in opts ? opts.update : null;
        let dispose = opts && 'dispose' in opts ? opts.dispose : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (listenable_provider.ListenableProxyProvider4$(T, T2, T3, T4, R)).new({key: key, create: create, update: update, dispose: dispose, lazy: lazy, builder: builder, child: child});
      }
    }
    (ListenableProxyProvider4.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let update = opts && 'update' in opts ? opts.update : null;
      let dispose = opts && 'dispose' in opts ? opts.dispose : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      ListenableProxyProvider4.__proto__.new.call(this, {key: key, create: create, lazy: lazy, builder: builder, update: dart.fn((context, previous) => update(context, provider$.Provider.of(T, context), provider$.Provider.of(T2, context), provider$.Provider.of(T3, context), provider$.Provider.of(T4, context), previous), __t$BuildContextAndRNToR()), dispose: dispose, child: child});
      ;
    }).prototype = ListenableProxyProvider4.prototype;
    dart.addTypeTests(ListenableProxyProvider4);
    ListenableProxyProvider4.prototype[_is_ListenableProxyProvider4_default] = true;
    dart.addTypeCaches(ListenableProxyProvider4);
    dart.setLibraryUri(ListenableProxyProvider4, I[25]);
    return ListenableProxyProvider4;
  });
  listenable_provider.ListenableProxyProvider4 = listenable_provider.ListenableProxyProvider4$();
  dart.addTypeTests(listenable_provider.ListenableProxyProvider4, _is_ListenableProxyProvider4_default);
  const _is_ChangeNotifierProxyProvider4_default = Symbol('_is_ChangeNotifierProxyProvider4_default');
  change_notifier_provider.ChangeNotifierProxyProvider4$ = dart.generic((T, T2, T3, T4, R) => {
    class ChangeNotifierProxyProvider4 extends listenable_provider.ListenableProxyProvider4$(T, T2, T3, T4, R) {
      static ['_#new#tearOff'](T, T2, T3, T4, R, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let create = opts && 'create' in opts ? opts.create : null;
        let update = opts && 'update' in opts ? opts.update : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (change_notifier_provider.ChangeNotifierProxyProvider4$(T, T2, T3, T4, R)).new({key: key, create: create, update: update, lazy: lazy, builder: builder, child: child});
      }
    }
    (ChangeNotifierProxyProvider4.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let update = opts && 'update' in opts ? opts.update : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      ChangeNotifierProxyProvider4.__proto__.new.call(this, {key: key, create: create, update: update, dispose: C[30] || CT.C30, lazy: lazy, builder: builder, child: child});
      ;
    }).prototype = ChangeNotifierProxyProvider4.prototype;
    dart.addTypeTests(ChangeNotifierProxyProvider4);
    ChangeNotifierProxyProvider4.prototype[_is_ChangeNotifierProxyProvider4_default] = true;
    dart.addTypeCaches(ChangeNotifierProxyProvider4);
    dart.setLibraryUri(ChangeNotifierProxyProvider4, I[26]);
    return ChangeNotifierProxyProvider4;
  });
  change_notifier_provider.ChangeNotifierProxyProvider4 = change_notifier_provider.ChangeNotifierProxyProvider4$();
  dart.addTypeTests(change_notifier_provider.ChangeNotifierProxyProvider4, _is_ChangeNotifierProxyProvider4_default);
  const _is_ListenableProxyProvider5_default = Symbol('_is_ListenableProxyProvider5_default');
  listenable_provider.ListenableProxyProvider5$ = dart.generic((T, T2, T3, T4, T5, R) => {
    var __t$RN = () => (__t$RN = dart.constFn(dart.nullable(R)))();
    var __t$BuildContextAndRNToR = () => (__t$BuildContextAndRNToR = dart.constFn(dart.fnType(R, [framework.BuildContext, __t$RN()])))();
    class ListenableProxyProvider5 extends listenable_provider.ListenableProxyProvider0$(R) {
      static ['_#new#tearOff'](T, T2, T3, T4, T5, R, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let create = opts && 'create' in opts ? opts.create : null;
        let update = opts && 'update' in opts ? opts.update : null;
        let dispose = opts && 'dispose' in opts ? opts.dispose : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (listenable_provider.ListenableProxyProvider5$(T, T2, T3, T4, T5, R)).new({key: key, create: create, update: update, dispose: dispose, lazy: lazy, builder: builder, child: child});
      }
    }
    (ListenableProxyProvider5.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let update = opts && 'update' in opts ? opts.update : null;
      let dispose = opts && 'dispose' in opts ? opts.dispose : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      ListenableProxyProvider5.__proto__.new.call(this, {key: key, create: create, lazy: lazy, builder: builder, update: dart.fn((context, previous) => update(context, provider$.Provider.of(T, context), provider$.Provider.of(T2, context), provider$.Provider.of(T3, context), provider$.Provider.of(T4, context), provider$.Provider.of(T5, context), previous), __t$BuildContextAndRNToR()), dispose: dispose, child: child});
      ;
    }).prototype = ListenableProxyProvider5.prototype;
    dart.addTypeTests(ListenableProxyProvider5);
    ListenableProxyProvider5.prototype[_is_ListenableProxyProvider5_default] = true;
    dart.addTypeCaches(ListenableProxyProvider5);
    dart.setLibraryUri(ListenableProxyProvider5, I[25]);
    return ListenableProxyProvider5;
  });
  listenable_provider.ListenableProxyProvider5 = listenable_provider.ListenableProxyProvider5$();
  dart.addTypeTests(listenable_provider.ListenableProxyProvider5, _is_ListenableProxyProvider5_default);
  const _is_ChangeNotifierProxyProvider5_default = Symbol('_is_ChangeNotifierProxyProvider5_default');
  change_notifier_provider.ChangeNotifierProxyProvider5$ = dart.generic((T, T2, T3, T4, T5, R) => {
    class ChangeNotifierProxyProvider5 extends listenable_provider.ListenableProxyProvider5$(T, T2, T3, T4, T5, R) {
      static ['_#new#tearOff'](T, T2, T3, T4, T5, R, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let create = opts && 'create' in opts ? opts.create : null;
        let update = opts && 'update' in opts ? opts.update : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (change_notifier_provider.ChangeNotifierProxyProvider5$(T, T2, T3, T4, T5, R)).new({key: key, create: create, update: update, lazy: lazy, builder: builder, child: child});
      }
    }
    (ChangeNotifierProxyProvider5.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let update = opts && 'update' in opts ? opts.update : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      ChangeNotifierProxyProvider5.__proto__.new.call(this, {key: key, create: create, update: update, dispose: C[30] || CT.C30, lazy: lazy, builder: builder, child: child});
      ;
    }).prototype = ChangeNotifierProxyProvider5.prototype;
    dart.addTypeTests(ChangeNotifierProxyProvider5);
    ChangeNotifierProxyProvider5.prototype[_is_ChangeNotifierProxyProvider5_default] = true;
    dart.addTypeCaches(ChangeNotifierProxyProvider5);
    dart.setLibraryUri(ChangeNotifierProxyProvider5, I[26]);
    return ChangeNotifierProxyProvider5;
  });
  change_notifier_provider.ChangeNotifierProxyProvider5 = change_notifier_provider.ChangeNotifierProxyProvider5$();
  dart.addTypeTests(change_notifier_provider.ChangeNotifierProxyProvider5, _is_ChangeNotifierProxyProvider5_default);
  const _is_ListenableProxyProvider6_default = Symbol('_is_ListenableProxyProvider6_default');
  listenable_provider.ListenableProxyProvider6$ = dart.generic((T, T2, T3, T4, T5, T6, R) => {
    var __t$RN = () => (__t$RN = dart.constFn(dart.nullable(R)))();
    var __t$BuildContextAndRNToR = () => (__t$BuildContextAndRNToR = dart.constFn(dart.fnType(R, [framework.BuildContext, __t$RN()])))();
    class ListenableProxyProvider6 extends listenable_provider.ListenableProxyProvider0$(R) {
      static ['_#new#tearOff'](T, T2, T3, T4, T5, T6, R, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let create = opts && 'create' in opts ? opts.create : null;
        let update = opts && 'update' in opts ? opts.update : null;
        let dispose = opts && 'dispose' in opts ? opts.dispose : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (listenable_provider.ListenableProxyProvider6$(T, T2, T3, T4, T5, T6, R)).new({key: key, create: create, update: update, dispose: dispose, lazy: lazy, builder: builder, child: child});
      }
    }
    (ListenableProxyProvider6.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let update = opts && 'update' in opts ? opts.update : null;
      let dispose = opts && 'dispose' in opts ? opts.dispose : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      ListenableProxyProvider6.__proto__.new.call(this, {key: key, create: create, lazy: lazy, builder: builder, update: dart.fn((context, previous) => update(context, provider$.Provider.of(T, context), provider$.Provider.of(T2, context), provider$.Provider.of(T3, context), provider$.Provider.of(T4, context), provider$.Provider.of(T5, context), provider$.Provider.of(T6, context), previous), __t$BuildContextAndRNToR()), dispose: dispose, child: child});
      ;
    }).prototype = ListenableProxyProvider6.prototype;
    dart.addTypeTests(ListenableProxyProvider6);
    ListenableProxyProvider6.prototype[_is_ListenableProxyProvider6_default] = true;
    dart.addTypeCaches(ListenableProxyProvider6);
    dart.setLibraryUri(ListenableProxyProvider6, I[25]);
    return ListenableProxyProvider6;
  });
  listenable_provider.ListenableProxyProvider6 = listenable_provider.ListenableProxyProvider6$();
  dart.addTypeTests(listenable_provider.ListenableProxyProvider6, _is_ListenableProxyProvider6_default);
  const _is_ChangeNotifierProxyProvider6_default = Symbol('_is_ChangeNotifierProxyProvider6_default');
  change_notifier_provider.ChangeNotifierProxyProvider6$ = dart.generic((T, T2, T3, T4, T5, T6, R) => {
    class ChangeNotifierProxyProvider6 extends listenable_provider.ListenableProxyProvider6$(T, T2, T3, T4, T5, T6, R) {
      static ['_#new#tearOff'](T, T2, T3, T4, T5, T6, R, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let create = opts && 'create' in opts ? opts.create : null;
        let update = opts && 'update' in opts ? opts.update : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (change_notifier_provider.ChangeNotifierProxyProvider6$(T, T2, T3, T4, T5, T6, R)).new({key: key, create: create, update: update, lazy: lazy, builder: builder, child: child});
      }
    }
    (ChangeNotifierProxyProvider6.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let update = opts && 'update' in opts ? opts.update : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      ChangeNotifierProxyProvider6.__proto__.new.call(this, {key: key, create: create, update: update, dispose: C[30] || CT.C30, lazy: lazy, builder: builder, child: child});
      ;
    }).prototype = ChangeNotifierProxyProvider6.prototype;
    dart.addTypeTests(ChangeNotifierProxyProvider6);
    ChangeNotifierProxyProvider6.prototype[_is_ChangeNotifierProxyProvider6_default] = true;
    dart.addTypeCaches(ChangeNotifierProxyProvider6);
    dart.setLibraryUri(ChangeNotifierProxyProvider6, I[26]);
    return ChangeNotifierProxyProvider6;
  });
  change_notifier_provider.ChangeNotifierProxyProvider6 = change_notifier_provider.ChangeNotifierProxyProvider6$();
  dart.addTypeTests(change_notifier_provider.ChangeNotifierProxyProvider6, _is_ChangeNotifierProxyProvider6_default);
  var builder$1 = dart.privateName(consumer, "Consumer.builder");
  const _is_Consumer_default = Symbol('_is_Consumer_default');
  consumer.Consumer$ = dart.generic(T => {
    class Consumer extends nested.SingleChildStatelessWidget {
      get builder() {
        return this[builder$1];
      }
      set builder(value) {
        super.builder = value;
      }
      static ['_#new#tearOff'](T, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (consumer.Consumer$(T)).new({key: key, builder: builder, child: child});
      }
      buildWithChild(context, child) {
        let t20, t19, t18;
        t18 = context;
        t19 = provider$.Provider.of(T, context);
        t20 = child;
        return this.builder(t18, t19, t20);
      }
    }
    (Consumer.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      this[builder$1] = builder;
      Consumer.__proto__.new.call(this, {key: key, child: child});
      ;
    }).prototype = Consumer.prototype;
    dart.addTypeTests(Consumer);
    Consumer.prototype[_is_Consumer_default] = true;
    dart.addTypeCaches(Consumer);
    dart.setMethodSignature(Consumer, () => ({
      __proto__: dart.getMethods(Consumer.__proto__),
      buildWithChild: dart.fnType(framework.Widget, [framework.BuildContext, dart.nullable(framework.Widget)])
    }));
    dart.setLibraryUri(Consumer, I[27]);
    dart.setFieldSignature(Consumer, () => ({
      __proto__: dart.getFields(Consumer.__proto__),
      builder: dart.finalFieldType(dart.fnType(framework.Widget, [framework.BuildContext, T, dart.nullable(framework.Widget)]))
    }));
    return Consumer;
  });
  consumer.Consumer = consumer.Consumer$();
  dart.addTypeTests(consumer.Consumer, _is_Consumer_default);
  var builder$2 = dart.privateName(consumer, "Consumer2.builder");
  const _is_Consumer2_default = Symbol('_is_Consumer2_default');
  consumer.Consumer2$ = dart.generic((A, B) => {
    class Consumer2 extends nested.SingleChildStatelessWidget {
      get builder() {
        return this[builder$2];
      }
      set builder(value) {
        super.builder = value;
      }
      static ['_#new#tearOff'](A, B, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (consumer.Consumer2$(A, B)).new({key: key, builder: builder, child: child});
      }
      buildWithChild(context, child) {
        let t21, t20, t19, t18;
        t18 = context;
        t19 = provider$.Provider.of(A, context);
        t20 = provider$.Provider.of(B, context);
        t21 = child;
        return this.builder(t18, t19, t20, t21);
      }
    }
    (Consumer2.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      this[builder$2] = builder;
      Consumer2.__proto__.new.call(this, {key: key, child: child});
      ;
    }).prototype = Consumer2.prototype;
    dart.addTypeTests(Consumer2);
    Consumer2.prototype[_is_Consumer2_default] = true;
    dart.addTypeCaches(Consumer2);
    dart.setMethodSignature(Consumer2, () => ({
      __proto__: dart.getMethods(Consumer2.__proto__),
      buildWithChild: dart.fnType(framework.Widget, [framework.BuildContext, dart.nullable(framework.Widget)])
    }));
    dart.setLibraryUri(Consumer2, I[27]);
    dart.setFieldSignature(Consumer2, () => ({
      __proto__: dart.getFields(Consumer2.__proto__),
      builder: dart.finalFieldType(dart.fnType(framework.Widget, [framework.BuildContext, A, B, dart.nullable(framework.Widget)]))
    }));
    return Consumer2;
  });
  consumer.Consumer2 = consumer.Consumer2$();
  dart.addTypeTests(consumer.Consumer2, _is_Consumer2_default);
  var builder$3 = dart.privateName(consumer, "Consumer3.builder");
  const _is_Consumer3_default = Symbol('_is_Consumer3_default');
  consumer.Consumer3$ = dart.generic((A, B, C) => {
    class Consumer3 extends nested.SingleChildStatelessWidget {
      get builder() {
        return this[builder$3];
      }
      set builder(value) {
        super.builder = value;
      }
      static ['_#new#tearOff'](A, B, C, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (consumer.Consumer3$(A, B, C)).new({key: key, builder: builder, child: child});
      }
      buildWithChild(context, child) {
        let t22, t21, t20, t19, t18;
        t18 = context;
        t19 = provider$.Provider.of(A, context);
        t20 = provider$.Provider.of(B, context);
        t21 = provider$.Provider.of(C, context);
        t22 = child;
        return this.builder(t18, t19, t20, t21, t22);
      }
    }
    (Consumer3.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      this[builder$3] = builder;
      Consumer3.__proto__.new.call(this, {key: key, child: child});
      ;
    }).prototype = Consumer3.prototype;
    dart.addTypeTests(Consumer3);
    Consumer3.prototype[_is_Consumer3_default] = true;
    dart.addTypeCaches(Consumer3);
    dart.setMethodSignature(Consumer3, () => ({
      __proto__: dart.getMethods(Consumer3.__proto__),
      buildWithChild: dart.fnType(framework.Widget, [framework.BuildContext, dart.nullable(framework.Widget)])
    }));
    dart.setLibraryUri(Consumer3, I[27]);
    dart.setFieldSignature(Consumer3, () => ({
      __proto__: dart.getFields(Consumer3.__proto__),
      builder: dart.finalFieldType(dart.fnType(framework.Widget, [framework.BuildContext, A, B, C, dart.nullable(framework.Widget)]))
    }));
    return Consumer3;
  });
  consumer.Consumer3 = consumer.Consumer3$();
  dart.addTypeTests(consumer.Consumer3, _is_Consumer3_default);
  var builder$4 = dart.privateName(consumer, "Consumer4.builder");
  const _is_Consumer4_default = Symbol('_is_Consumer4_default');
  consumer.Consumer4$ = dart.generic((A, B, C, D) => {
    class Consumer4 extends nested.SingleChildStatelessWidget {
      get builder() {
        return this[builder$4];
      }
      set builder(value) {
        super.builder = value;
      }
      static ['_#new#tearOff'](A, B, C, D, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (consumer.Consumer4$(A, B, C, D)).new({key: key, builder: builder, child: child});
      }
      buildWithChild(context, child) {
        let t23, t22, t21, t20, t19, t18;
        t18 = context;
        t19 = provider$.Provider.of(A, context);
        t20 = provider$.Provider.of(B, context);
        t21 = provider$.Provider.of(C, context);
        t22 = provider$.Provider.of(D, context);
        t23 = child;
        return this.builder(t18, t19, t20, t21, t22, t23);
      }
    }
    (Consumer4.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      this[builder$4] = builder;
      Consumer4.__proto__.new.call(this, {key: key, child: child});
      ;
    }).prototype = Consumer4.prototype;
    dart.addTypeTests(Consumer4);
    Consumer4.prototype[_is_Consumer4_default] = true;
    dart.addTypeCaches(Consumer4);
    dart.setMethodSignature(Consumer4, () => ({
      __proto__: dart.getMethods(Consumer4.__proto__),
      buildWithChild: dart.fnType(framework.Widget, [framework.BuildContext, dart.nullable(framework.Widget)])
    }));
    dart.setLibraryUri(Consumer4, I[27]);
    dart.setFieldSignature(Consumer4, () => ({
      __proto__: dart.getFields(Consumer4.__proto__),
      builder: dart.finalFieldType(dart.fnType(framework.Widget, [framework.BuildContext, A, B, C, D, dart.nullable(framework.Widget)]))
    }));
    return Consumer4;
  });
  consumer.Consumer4 = consumer.Consumer4$();
  dart.addTypeTests(consumer.Consumer4, _is_Consumer4_default);
  var builder$5 = dart.privateName(consumer, "Consumer5.builder");
  const _is_Consumer5_default = Symbol('_is_Consumer5_default');
  consumer.Consumer5$ = dart.generic((A, B, C, D, E) => {
    class Consumer5 extends nested.SingleChildStatelessWidget {
      get builder() {
        return this[builder$5];
      }
      set builder(value) {
        super.builder = value;
      }
      static ['_#new#tearOff'](A, B, C, D, E, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (consumer.Consumer5$(A, B, C, D, E)).new({key: key, builder: builder, child: child});
      }
      buildWithChild(context, child) {
        let t24, t23, t22, t21, t20, t19, t18;
        t18 = context;
        t19 = provider$.Provider.of(A, context);
        t20 = provider$.Provider.of(B, context);
        t21 = provider$.Provider.of(C, context);
        t22 = provider$.Provider.of(D, context);
        t23 = provider$.Provider.of(E, context);
        t24 = child;
        return this.builder(t18, t19, t20, t21, t22, t23, t24);
      }
    }
    (Consumer5.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      this[builder$5] = builder;
      Consumer5.__proto__.new.call(this, {key: key, child: child});
      ;
    }).prototype = Consumer5.prototype;
    dart.addTypeTests(Consumer5);
    Consumer5.prototype[_is_Consumer5_default] = true;
    dart.addTypeCaches(Consumer5);
    dart.setMethodSignature(Consumer5, () => ({
      __proto__: dart.getMethods(Consumer5.__proto__),
      buildWithChild: dart.fnType(framework.Widget, [framework.BuildContext, dart.nullable(framework.Widget)])
    }));
    dart.setLibraryUri(Consumer5, I[27]);
    dart.setFieldSignature(Consumer5, () => ({
      __proto__: dart.getFields(Consumer5.__proto__),
      builder: dart.finalFieldType(dart.fnType(framework.Widget, [framework.BuildContext, A, B, C, D, E, dart.nullable(framework.Widget)]))
    }));
    return Consumer5;
  });
  consumer.Consumer5 = consumer.Consumer5$();
  dart.addTypeTests(consumer.Consumer5, _is_Consumer5_default);
  var builder$6 = dart.privateName(consumer, "Consumer6.builder");
  const _is_Consumer6_default = Symbol('_is_Consumer6_default');
  consumer.Consumer6$ = dart.generic((A, B, C, D, E, F) => {
    class Consumer6 extends nested.SingleChildStatelessWidget {
      get builder() {
        return this[builder$6];
      }
      set builder(value) {
        super.builder = value;
      }
      static ['_#new#tearOff'](A, B, C, D, E, F, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (consumer.Consumer6$(A, B, C, D, E, F)).new({key: key, builder: builder, child: child});
      }
      buildWithChild(context, child) {
        let t25, t24, t23, t22, t21, t20, t19, t18;
        t18 = context;
        t19 = provider$.Provider.of(A, context);
        t20 = provider$.Provider.of(B, context);
        t21 = provider$.Provider.of(C, context);
        t22 = provider$.Provider.of(D, context);
        t23 = provider$.Provider.of(E, context);
        t24 = provider$.Provider.of(F, context);
        t25 = child;
        return this.builder(t18, t19, t20, t21, t22, t23, t24, t25);
      }
    }
    (Consumer6.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      this[builder$6] = builder;
      Consumer6.__proto__.new.call(this, {key: key, child: child});
      ;
    }).prototype = Consumer6.prototype;
    dart.addTypeTests(Consumer6);
    Consumer6.prototype[_is_Consumer6_default] = true;
    dart.addTypeCaches(Consumer6);
    dart.setMethodSignature(Consumer6, () => ({
      __proto__: dart.getMethods(Consumer6.__proto__),
      buildWithChild: dart.fnType(framework.Widget, [framework.BuildContext, dart.nullable(framework.Widget)])
    }));
    dart.setLibraryUri(Consumer6, I[27]);
    dart.setFieldSignature(Consumer6, () => ({
      __proto__: dart.getFields(Consumer6.__proto__),
      builder: dart.finalFieldType(dart.fnType(framework.Widget, [framework.BuildContext, A, B, C, D, E, F, dart.nullable(framework.Widget)]))
    }));
    return Consumer6;
  });
  consumer.Consumer6 = consumer.Consumer6$();
  dart.addTypeTests(consumer.Consumer6, _is_Consumer6_default);
  var _children = dart.privateName(nested, "_children");
  nested.Nested = class Nested extends framework.StatelessWidget {
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let children = opts && 'children' in opts ? opts.children : null;
      let child = opts && 'child' in opts ? opts.child : null;
      return new nested.Nested.new({key: key, children: children, child: child});
    }
    build(context) {
      dart.throw(new core.StateError.new("implemented internally"));
    }
    createElement() {
      return new nested._NestedElement.new(this);
    }
  };
  (nested.Nested.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let children = opts && 'children' in opts ? opts.children : null;
    let child = opts && 'child' in opts ? opts.child : null;
    if (!children[$isNotEmpty]) dart.assertFailed(null, I[28], 71, 16, "children.isNotEmpty");
    this[_children] = children;
    this[_child$] = child;
    nested.Nested.__proto__.new.call(this, {key: key});
    ;
  }).prototype = nested.Nested.prototype;
  dart.addTypeTests(nested.Nested);
  dart.addTypeCaches(nested.Nested);
  nested.Nested[dart.implements] = () => [nested.SingleChildWidget];
  dart.setMethodSignature(nested.Nested, () => ({
    __proto__: dart.getMethods(nested.Nested.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    createElement: dart.fnType(nested._NestedElement, [])
  }));
  dart.setLibraryUri(nested.Nested, I[22]);
  dart.setFieldSignature(nested.Nested, () => ({
    __proto__: dart.getFields(nested.Nested.__proto__),
    [_children]: dart.finalFieldType(core.List$(nested.SingleChildWidget)),
    [_child$]: dart.finalFieldType(dart.nullable(framework.Widget))
  }));
  provider$.MultiProvider = class MultiProvider extends nested.Nested {
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let providers = opts && 'providers' in opts ? opts.providers : null;
      let child = opts && 'child' in opts ? opts.child : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      return new provider$.MultiProvider.new({key: key, providers: providers, child: child, builder: builder});
    }
  };
  (provider$.MultiProvider.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let providers = opts && 'providers' in opts ? opts.providers : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let builder = opts && 'builder' in opts ? opts.builder : null;
    provider$.MultiProvider.__proto__.new.call(this, {key: key, children: providers, child: builder != null ? new basic.Builder.new({builder: dart.fn(context => builder(context, child), T$.BuildContextToWidget())}) : child});
    ;
  }).prototype = provider$.MultiProvider.prototype;
  dart.addTypeTests(provider$.MultiProvider);
  dart.addTypeCaches(provider$.MultiProvider);
  dart.setLibraryUri(provider$.MultiProvider, I[23]);
  const _is_Provider_default = Symbol('_is_Provider_default');
  provider$.Provider$ = dart.generic(T => {
    var __t$TTovoid = () => (__t$TTovoid = dart.constFn(dart.fnType(dart.void, [T])))();
    class Provider extends provider$.InheritedProvider$(T) {
      static ['_#new#tearOff'](T, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let create = opts && 'create' in opts ? opts.create : null;
        let dispose = opts && 'dispose' in opts ? opts.dispose : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (provider$.Provider$(T)).new({key: key, create: create, dispose: dispose, lazy: lazy, builder: builder, child: child});
      }
      static ['_#value#tearOff'](T, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let value = opts && 'value' in opts ? opts.value : null;
        let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (provider$.Provider$(T)).value({key: key, value: value, updateShouldNotify: updateShouldNotify, builder: builder, child: child});
      }
      static of(T, context, opts) {
        let t18;
        let listen = opts && 'listen' in opts ? opts.listen : true;
        if (!(dart.nullCheck(context.owner).debugBuilding || listen === false || provider$.debugIsInInheritedProviderUpdate)) dart.assertFailed("Tried to listen to a value exposed with provider, from outside of the widget tree.\n\nThis is likely caused by an event handler (like a button's onPressed) that called\nProvider.of without passing `listen: false`.\n\nTo fix, write:\nProvider.of<" + dart.str(dart.wrapType(T)) + ">(context, listen: false);\n\nIt is unsupported because may pointlessly rebuild the widget associated to the\nevent handler, when the widget tree doesn't care about the value.\n\nThe context used was: " + dart.str(context) + "\n", I[29], 274, 7, "context.owner!.debugBuilding ||\n          listen == false ||\n          debugIsInInheritedProviderUpdate");
        let inheritedElement = provider$.Provider._inheritedElementOf(T, context);
        if (listen) {
          context.dependOnInheritedWidgetOfExactType(provider$._InheritedProviderScope$(dart.nullable(T)));
        }
        let value = (t18 = inheritedElement, t18 == null ? null : t18.value);
        if (provider$._isSoundMode) {
          if (!T.is(value)) {
            dart.throw(new provider$.ProviderNullException.new(dart.wrapType(T), context.widget[$runtimeType]));
          }
          return value;
        }
        return T.as(value);
      }
      static _inheritedElementOf(T, context) {
        if (!(context !== null)) dart.assertFailed("Tried to call context.read/watch/select or similar on a `context` that is null.\n\nThis can happen if you used the context of a StatefulWidget and that\nStatefulWidget was disposed.\n", I[29], 319, 12, "context != null");
        if (!(provider$._debugIsSelecting === false)) dart.assertFailed("Cannot call context.read/watch/select inside the callback of a context.select", I[29], 326, 7, "_debugIsSelecting == false");
        if (!!dart.wrapType(T)._equals(dart.wrapType(dart.dynamic))) dart.assertFailed("Tried to call Provider.of<dynamic>. This is likely a mistake and is therefore\nunsupported.\n\nIf you want to expose a variable that can be anything, consider changing\n`dynamic` to `Object` instead.\n", I[29], 330, 7, "T != dynamic");
        let inheritedElement = dart.nullable(provider$._InheritedProviderScopeElement$(dart.nullable(T))).as(context.getElementForInheritedWidgetOfExactType(provider$._InheritedProviderScope$(dart.nullable(T))));
        if (inheritedElement == null && !T.is(null)) {
          dart.throw(new provider$.ProviderNotFoundException.new(dart.wrapType(T), context.widget[$runtimeType]));
        }
        return inheritedElement;
      }
    }
    (Provider.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let dispose = opts && 'dispose' in opts ? opts.dispose : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      Provider.__proto__.new.call(this, {key: key, lazy: lazy, builder: builder, create: create, dispose: dispose, debugCheckInvalidValueType: dart.fn(value => {
          let t18;
          t18 = provider$.Provider.debugCheckInvalidValueType;
          return t18 == null ? null : t18(T, value);
        }, __t$TTovoid()), child: child});
      ;
    }).prototype = Provider.prototype;
    (Provider.value = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let value = opts && 'value' in opts ? opts.value : null;
      let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      if (!dart.fn(() => {
        let t18;
        t18 = provider$.Provider.debugCheckInvalidValueType;
        t18 == null ? null : t18(T, value);
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[29], 243, 16, "() {\n          Provider.debugCheckInvalidValueType?.call<T>(value);\n          return true;\n        }()");
      Provider.__proto__.value.call(this, {key: key, builder: builder, value: value, updateShouldNotify: updateShouldNotify, child: child});
      ;
    }).prototype = Provider.prototype;
    dart.addTypeTests(Provider);
    Provider.prototype[_is_Provider_default] = true;
    dart.addTypeCaches(Provider);
    dart.setStaticMethodSignature(Provider, () => ['of', '_inheritedElementOf']);
    dart.setLibraryUri(Provider, I[23]);
    dart.setStaticFieldSignature(Provider, () => ['debugCheckInvalidValueType']);
    return Provider;
  });
  provider$.Provider = provider$.Provider$();
  dart.defineLazy(provider$.Provider, {
    /*provider$.Provider.debugCheckInvalidValueType*/get debugCheckInvalidValueType() {
      return dart.fn((T, value) => {
        if (!dart.fn(() => {
          if (change_notifier.Listenable.is(value) || async.Stream.is(value)) {
            dart.throw(assertions.FlutterError.new("Tried to use Provider with a subtype of Listenable/Stream (" + dart.str(dart.wrapType(T)) + ").\n\nThis is likely a mistake, as Provider will not automatically update dependents\nwhen " + dart.str(dart.wrapType(T)) + " is updated. Instead, consider changing Provider for more specific\nimplementation that handles the update mechanism, such as:\n\n- ListenableProvider\n- ChangeNotifierProvider\n- ValueListenableProvider\n- StreamProvider\n\nAlternatively, if you are making your own provider, consider using InheritedProvider.\n\nIf you think that this is not an error, you can disable this check by setting\nProvider.debugCheckInvalidValueType to `null` in your main file:\n\n```\nvoid main() {\n  Provider.debugCheckInvalidValueType = null;\n\n  runApp(MyApp());\n}\n```\n"));
          }
          return true;
        }, T$.VoidTobool())()) dart.assertFailed(null, I[29], 385, 12, "() {\n      if (value is Listenable || value is Stream) {\n        throw FlutterError('''\nTried to use Provider with a subtype of Listenable/Stream ($T).\n\nThis is likely a mistake, as Provider will not automatically update dependents\nwhen $T is updated. Instead, consider changing Provider for more specific\nimplementation that handles the update mechanism, such as:\n\n- ListenableProvider\n- ChangeNotifierProvider\n- ValueListenableProvider\n- StreamProvider\n\nAlternatively, if you are making your own provider, consider using InheritedProvider.\n\nIf you think that this is not an error, you can disable this check by setting\nProvider.debugCheckInvalidValueType to `null` in your main file:\n\n```\nvoid main() {\n  Provider.debugCheckInvalidValueType = null;\n\n  runApp(MyApp());\n}\n```\n''');\n      }\n      return true;\n    }()");
      }, T$.TTovoid$1());
    },
    set debugCheckInvalidValueType(value) {}
  }, false);
  dart.addTypeTests(provider$.Provider, _is_Provider_default);
  var valueType$ = dart.privateName(provider$, "ProviderNullException.valueType");
  var widgetType$ = dart.privateName(provider$, "ProviderNullException.widgetType");
  provider$.ProviderNullException = class ProviderNullException extends core.Object {
    get valueType() {
      return this[valueType$];
    }
    set valueType(value) {
      super.valueType = value;
    }
    get widgetType() {
      return this[widgetType$];
    }
    set widgetType(value) {
      super.widgetType = value;
    }
    static ['_#new#tearOff'](valueType, widgetType) {
      return new provider$.ProviderNullException.new(valueType, widgetType);
    }
    toString() {
      ;
      return "Error: The widget " + dart.str(this.widgetType) + " tried to read Provider<" + dart.str(this.valueType) + "> but the matching\nprovider returned null.\n\nTo fix the error, consider changing Provider<" + dart.str(this.valueType) + "> to Provider<" + dart.str(this.valueType) + "?>.\n";
    }
  };
  (provider$.ProviderNullException.new = function(valueType, widgetType) {
    this[valueType$] = valueType;
    this[widgetType$] = widgetType;
    ;
  }).prototype = provider$.ProviderNullException.prototype;
  dart.addTypeTests(provider$.ProviderNullException);
  dart.addTypeCaches(provider$.ProviderNullException);
  provider$.ProviderNullException[dart.implements] = () => [core.Exception];
  dart.setLibraryUri(provider$.ProviderNullException, I[23]);
  dart.setFieldSignature(provider$.ProviderNullException, () => ({
    __proto__: dart.getFields(provider$.ProviderNullException.__proto__),
    valueType: dart.finalFieldType(core.Type),
    widgetType: dart.finalFieldType(core.Type)
  }));
  dart.defineExtensionMethods(provider$.ProviderNullException, ['toString']);
  var valueType$0 = dart.privateName(provider$, "ProviderNotFoundException.valueType");
  var widgetType$0 = dart.privateName(provider$, "ProviderNotFoundException.widgetType");
  provider$.ProviderNotFoundException = class ProviderNotFoundException extends core.Object {
    get valueType() {
      return this[valueType$0];
    }
    set valueType(value) {
      super.valueType = value;
    }
    get widgetType() {
      return this[widgetType$0];
    }
    set widgetType(value) {
      super.widgetType = value;
    }
    static ['_#new#tearOff'](valueType, widgetType) {
      return new provider$.ProviderNotFoundException.new(valueType, widgetType);
    }
    toString() {
      ;
      return "Error: Could not find the correct Provider<" + dart.str(this.valueType) + "> above this " + dart.str(this.widgetType) + " Widget\n\nThis happens because you used a `BuildContext` that does not include the provider\nof your choice. There are a few common scenarios:\n\n- You added a new provider in your `main.dart` and performed a hot-reload.\n  To fix, perform a hot-restart.\n\n- The provider you are trying to read is in a different route.\n\n  Providers are \"scoped\". So if you insert of provider inside a route, then\n  other routes will not be able to access that provider.\n\n- You used a `BuildContext` that is an ancestor of the provider you are trying to read.\n\n  Make sure that " + dart.str(this.widgetType) + " is under your MultiProvider/Provider<" + dart.str(this.valueType) + ">.\n  This usually happens when you are creating a provider and trying to read it immediately.\n\n  For example, instead of:\n\n  ```\n  Widget build(BuildContext context) {\n    return Provider<Example>(\n      create: (_) => Example(),\n      // Will throw a ProviderNotFoundError, because `context` is associated\n      // to the widget that is the parent of `Provider<Example>`\n      child: Text(context.watch<Example>().toString()),\n    );\n  }\n  ```\n\n  consider using `builder` like so:\n\n  ```\n  Widget build(BuildContext context) {\n    return Provider<Example>(\n      create: (_) => Example(),\n      // we use `builder` to obtain a new `BuildContext` that has access to the provider\n      builder: (context, child) {\n        // No longer throws\n        return Text(context.watch<Example>().toString());\n      }\n    );\n  }\n  ```\n\nIf none of these solutions work, consider asking for help on StackOverflow:\nhttps://stackoverflow.com/questions/tagged/flutter\n";
    }
  };
  (provider$.ProviderNotFoundException.new = function(valueType, widgetType) {
    this[valueType$0] = valueType;
    this[widgetType$0] = widgetType;
    ;
  }).prototype = provider$.ProviderNotFoundException.prototype;
  dart.addTypeTests(provider$.ProviderNotFoundException);
  dart.addTypeCaches(provider$.ProviderNotFoundException);
  provider$.ProviderNotFoundException[dart.implements] = () => [core.Exception];
  dart.setLibraryUri(provider$.ProviderNotFoundException, I[23]);
  dart.setFieldSignature(provider$.ProviderNotFoundException, () => ({
    __proto__: dart.getFields(provider$.ProviderNotFoundException.__proto__),
    valueType: dart.finalFieldType(core.Type),
    widgetType: dart.finalFieldType(core.Type)
  }));
  dart.defineExtensionMethods(provider$.ProviderNotFoundException, ['toString']);
  const _is__Delegate_default = Symbol('_is__Delegate_default');
  provider$._Delegate$ = dart.generic(T => {
    class _Delegate extends core.Object {
      debugFillProperties(properties) {
      }
    }
    (_Delegate.new = function() {
      ;
    }).prototype = _Delegate.prototype;
    dart.addTypeTests(_Delegate);
    _Delegate.prototype[_is__Delegate_default] = true;
    dart.addTypeCaches(_Delegate);
    dart.setMethodSignature(_Delegate, () => ({
      __proto__: dart.getMethods(_Delegate.__proto__),
      debugFillProperties: dart.fnType(dart.void, [diagnostics.DiagnosticPropertiesBuilder])
    }));
    dart.setLibraryUri(_Delegate, I[23]);
    return _Delegate;
  });
  provider$._Delegate = provider$._Delegate$();
  dart.addTypeTests(provider$._Delegate, _is__Delegate_default);
  const _is__DeferredDelegate_default = Symbol('_is__DeferredDelegate_default');
  provider$._DeferredDelegate$ = dart.generic((T, R) => {
    class _DeferredDelegate extends provider$._Delegate$(R) {}
    (_DeferredDelegate.new = function(updateShouldNotify, startListening) {
      this.updateShouldNotify = updateShouldNotify;
      this.startListening = startListening;
      ;
    }).prototype = _DeferredDelegate.prototype;
    dart.addTypeTests(_DeferredDelegate);
    _DeferredDelegate.prototype[_is__DeferredDelegate_default] = true;
    dart.addTypeCaches(_DeferredDelegate);
    dart.setLibraryUri(_DeferredDelegate, I[23]);
    dart.setFieldSignature(_DeferredDelegate, () => ({
      __proto__: dart.getFields(_DeferredDelegate.__proto__),
      updateShouldNotify: dart.finalFieldType(dart.nullable(dart.fnType(core.bool, [R, R]))),
      startListening: dart.finalFieldType(dart.fnType(dart.fnType(dart.void, []), [provider$.InheritedContext$(dart.nullable(R)), dart.fnType(dart.void, [R]), T, dart.nullable(R)]))
    }));
    return _DeferredDelegate;
  });
  provider$._DeferredDelegate = provider$._DeferredDelegate$();
  dart.addTypeTests(provider$._DeferredDelegate, _is__DeferredDelegate_default);
  var _removeListener = dart.privateName(provider$, "_removeListener");
  var _value = dart.privateName(provider$, "_value");
  var _hasValue = dart.privateName(provider$, "_hasValue");
  var _isNotifyDependentsEnabled = dart.privateName(provider$, "_isNotifyDependentsEnabled");
  var element = dart.privateName(provider$, "_DelegateState.element");
  var _debugSetInheritedLock = dart.privateName(provider$, "_debugSetInheritedLock");
  const _is__DelegateState_default = Symbol('_is__DelegateState_default');
  provider$._DelegateState$ = dart.generic((T, D) => {
    var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
    var __t$_InheritedProviderScopeElementOfTN = () => (__t$_InheritedProviderScopeElementOfTN = dart.constFn(provider$._InheritedProviderScopeElement$(__t$TN())))();
    var __t$_InheritedProviderScopeElementNOfTN = () => (__t$_InheritedProviderScopeElementNOfTN = dart.constFn(dart.nullable(__t$_InheritedProviderScopeElementOfTN())))();
    class _DelegateState extends core.Object {
      get element() {
        return this[element];
      }
      set element(value) {
        this[element] = __t$_InheritedProviderScopeElementNOfTN().as(value);
      }
      get delegate() {
        return D.as(dart.nullCheck(this.element).widget.owner[_delegate]);
      }
      debugSetInheritedLock(value) {
        return dart.nullCheck(this.element)[_debugSetInheritedLock](value);
      }
      willUpdateDelegate(newDelegate) {
        D.as(newDelegate);
        return false;
      }
      dispose() {
      }
      debugFillProperties(properties) {
      }
      build(opts) {
        let isBuildFromExternalSources = opts && 'isBuildFromExternalSources' in opts ? opts.isBuildFromExternalSources : null;
      }
    }
    (_DelegateState.new = function() {
      this[element] = null;
      ;
    }).prototype = _DelegateState.prototype;
    dart.addTypeTests(_DelegateState);
    _DelegateState.prototype[_is__DelegateState_default] = true;
    dart.addTypeCaches(_DelegateState);
    dart.setMethodSignature(_DelegateState, () => ({
      __proto__: dart.getMethods(_DelegateState.__proto__),
      debugSetInheritedLock: dart.fnType(core.bool, [core.bool]),
      willUpdateDelegate: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      dispose: dart.fnType(dart.void, []),
      debugFillProperties: dart.fnType(dart.void, [diagnostics.DiagnosticPropertiesBuilder]),
      build: dart.fnType(dart.void, [], {}, {isBuildFromExternalSources: core.bool})
    }));
    dart.setGetterSignature(_DelegateState, () => ({
      __proto__: dart.getGetters(_DelegateState.__proto__),
      delegate: D
    }));
    dart.setLibraryUri(_DelegateState, I[23]);
    dart.setFieldSignature(_DelegateState, () => ({
      __proto__: dart.getFields(_DelegateState.__proto__),
      element: dart.fieldType(dart.nullable(provider$._InheritedProviderScopeElement$(dart.nullable(T))))
    }));
    return _DelegateState;
  });
  provider$._DelegateState = provider$._DelegateState$();
  dart.addTypeTests(provider$._DelegateState, _is__DelegateState_default);
  const _is__DeferredDelegateState_default = Symbol('_is__DeferredDelegateState_default');
  provider$._DeferredDelegateState$ = dart.generic((T, R, W) => {
    var __t$InheritedContextOfRNAndFnAndT__ToFn = () => (__t$InheritedContextOfRNAndFnAndT__ToFn = dart.constFn(dart.fnType(T$.VoidTovoid(), [__t$InheritedContextOfRN(), __t$RTovoid(), T, __t$RN()])))();
    var __t$RN = () => (__t$RN = dart.constFn(dart.nullable(R)))();
    var __t$InheritedContextOfRN = () => (__t$InheritedContextOfRN = dart.constFn(provider$.InheritedContext$(__t$RN())))();
    var __t$RTovoid = () => (__t$RTovoid = dart.constFn(dart.fnType(dart.void, [R])))();
    var __t$RAndRTobool = () => (__t$RAndRTobool = dart.constFn(dart.fnType(core.bool, [R, R])))();
    var __t$RAndRToNbool = () => (__t$RAndRToNbool = dart.constFn(dart.nullable(__t$RAndRTobool())))();
    class _DeferredDelegateState extends provider$._DelegateState$(R, W) {
      get value() {
        let t22, t21, t20, t19, t18;
        dart.nullCheck(this.element)[_isNotifyDependentsEnabled] = false;
        this[_removeListener] == null ? this[_removeListener] = (t18 = this.delegate, t19 = dart.nullCheck(this.element), t20 = dart.bind(this, 'setState'), t21 = this.controller, t22 = this[_value], __t$InheritedContextOfRNAndFnAndT__ToFn().as(t18.startListening)(t19, t20, t21, t22)) : null;
        dart.nullCheck(this.element)[_isNotifyDependentsEnabled] = true;
        if (!dart.nullCheck(this.element).hasValue) dart.assertFailed("The callback \"startListening\" was called, but it left DeferredInhertitedProviderElement<" + dart.str(dart.wrapType(T)) + ", " + dart.str(dart.wrapType(R)) + ">\nin an uninitialized state.\n\nIt is necessary for \"startListening\" to call \"setState\" at least once the very\nfirst time \"value\" is requested.\n\nTo fix, consider:\n\nDeferredInheritedProvider(\n  ...,\n  startListening: (element, setState, controller, value) {\n    if (!element.hasValue) {\n      setState(myInitialValue); // TODO replace myInitialValue with your own\n    }\n    ...\n  }\n)\n    ", I[30], 109, 12, "element!.hasValue");
        if (!(this[_removeListener] != null)) dart.assertFailed(null, I[30], 128, 12, "_removeListener != null");
        return R.as(this[_value]);
      }
      dispose() {
        let t18;
        super.dispose();
        t18 = this[_removeListener];
        t18 == null ? null : t18();
      }
      get isLoaded() {
        return this[_removeListener] != null;
      }
      get hasValue() {
        return this[_hasValue];
      }
      setState(value) {
        R.as(value);
        if (this[_hasValue]) {
          let shouldNotify = __t$RAndRToNbool().as(this.delegate.updateShouldNotify) != null ? dart.nullCheck(__t$RAndRToNbool().as(this.delegate.updateShouldNotify))(R.as(this[_value]), value) : !dart.equals(this[_value], value);
          if (shouldNotify) {
            dart.nullCheck(this.element).markNeedsNotifyDependents();
          }
        }
        this[_hasValue] = true;
        this[_value] = value;
      }
    }
    (_DeferredDelegateState.new = function() {
      this[_removeListener] = null;
      this[_value] = null;
      this[_hasValue] = false;
      _DeferredDelegateState.__proto__.new.call(this);
      ;
    }).prototype = _DeferredDelegateState.prototype;
    dart.addTypeTests(_DeferredDelegateState);
    _DeferredDelegateState.prototype[_is__DeferredDelegateState_default] = true;
    dart.addTypeCaches(_DeferredDelegateState);
    dart.setMethodSignature(_DeferredDelegateState, () => ({
      __proto__: dart.getMethods(_DeferredDelegateState.__proto__),
      setState: dart.fnType(dart.void, [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(_DeferredDelegateState, () => ({
      __proto__: dart.getGetters(_DeferredDelegateState.__proto__),
      value: R,
      isLoaded: core.bool,
      hasValue: core.bool
    }));
    dart.setLibraryUri(_DeferredDelegateState, I[23]);
    dart.setFieldSignature(_DeferredDelegateState, () => ({
      __proto__: dart.getFields(_DeferredDelegateState.__proto__),
      [_removeListener]: dart.fieldType(dart.nullable(dart.fnType(dart.void, []))),
      [_value]: dart.fieldType(dart.nullable(R)),
      [_hasValue]: dart.fieldType(core.bool)
    }));
    return _DeferredDelegateState;
  });
  provider$._DeferredDelegateState = provider$._DeferredDelegateState$();
  dart.addTypeTests(provider$._DeferredDelegateState, _is__DeferredDelegateState_default);
  const _is__CreateDeferredInheritedProvider_default = Symbol('_is__CreateDeferredInheritedProvider_default');
  provider$._CreateDeferredInheritedProvider$ = dart.generic((T, R) => {
    var __t$_CreateDeferredInheritedProviderElementOfT$R = () => (__t$_CreateDeferredInheritedProviderElementOfT$R = dart.constFn(provider$._CreateDeferredInheritedProviderElement$(T, R)))();
    class _CreateDeferredInheritedProvider extends provider$._DeferredDelegate$(T, R) {
      static ['_#new#tearOff'](T, R, opts) {
        let create = opts && 'create' in opts ? opts.create : null;
        let dispose = opts && 'dispose' in opts ? opts.dispose : null;
        let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
        let startListening = opts && 'startListening' in opts ? opts.startListening : null;
        return new (provider$._CreateDeferredInheritedProvider$(T, R)).new({create: create, dispose: dispose, updateShouldNotify: updateShouldNotify, startListening: startListening});
      }
      createState() {
        return new (__t$_CreateDeferredInheritedProviderElementOfT$R()).new();
      }
    }
    (_CreateDeferredInheritedProvider.new = function(opts) {
      let create = opts && 'create' in opts ? opts.create : null;
      let dispose = opts && 'dispose' in opts ? opts.dispose : null;
      let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
      let startListening = opts && 'startListening' in opts ? opts.startListening : null;
      this.create = create;
      this.dispose = dispose;
      _CreateDeferredInheritedProvider.__proto__.new.call(this, updateShouldNotify, startListening);
      ;
    }).prototype = _CreateDeferredInheritedProvider.prototype;
    dart.addTypeTests(_CreateDeferredInheritedProvider);
    _CreateDeferredInheritedProvider.prototype[_is__CreateDeferredInheritedProvider_default] = true;
    dart.addTypeCaches(_CreateDeferredInheritedProvider);
    dart.setMethodSignature(_CreateDeferredInheritedProvider, () => ({
      __proto__: dart.getMethods(_CreateDeferredInheritedProvider.__proto__),
      createState: dart.fnType(provider$._CreateDeferredInheritedProviderElement$(T, R), [])
    }));
    dart.setLibraryUri(_CreateDeferredInheritedProvider, I[23]);
    dart.setFieldSignature(_CreateDeferredInheritedProvider, () => ({
      __proto__: dart.getFields(_CreateDeferredInheritedProvider.__proto__),
      create: dart.finalFieldType(dart.fnType(T, [framework.BuildContext])),
      dispose: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [framework.BuildContext, T])))
    }));
    return _CreateDeferredInheritedProvider;
  });
  provider$._CreateDeferredInheritedProvider = provider$._CreateDeferredInheritedProvider$();
  dart.addTypeTests(provider$._CreateDeferredInheritedProvider, _is__CreateDeferredInheritedProvider_default);
  var _didBuild = dart.privateName(provider$, "_didBuild");
  var _controller = dart.privateName(provider$, "_controller");
  const _is__CreateDeferredInheritedProviderElement_default = Symbol('_is__CreateDeferredInheritedProviderElement_default');
  provider$._CreateDeferredInheritedProviderElement$ = dart.generic((T, R) => {
    var __t$BuildContextAndTTovoid = () => (__t$BuildContextAndTTovoid = dart.constFn(dart.fnType(dart.void, [framework.BuildContext, T])))();
    var __t$BuildContextAndTToNvoid = () => (__t$BuildContextAndTToNvoid = dart.constFn(dart.nullable(__t$BuildContextAndTTovoid())))();
    var __t$DiagnosticsPropertyOfT = () => (__t$DiagnosticsPropertyOfT = dart.constFn(diagnostics.DiagnosticsProperty$(T)))();
    var __t$DiagnosticsPropertyOfR = () => (__t$DiagnosticsPropertyOfR = dart.constFn(diagnostics.DiagnosticsProperty$(R)))();
    class _CreateDeferredInheritedProviderElement extends provider$._DeferredDelegateState$(T, R, provider$._CreateDeferredInheritedProvider$(T, R)) {
      get controller() {
        let t19, t18;
        if (!this[_didBuild]) {
          if (!this.debugSetInheritedLock(true)) dart.assertFailed(null, I[30], 186, 14, "debugSetInheritedLock(true)");
          let _debugPreviousIsInInheritedProviderCreate = null;
          let _debugPreviousIsInInheritedProviderUpdate = null;
          if (!dart.fn(() => {
            _debugPreviousIsInInheritedProviderCreate = provider$.debugIsInInheritedProviderCreate;
            _debugPreviousIsInInheritedProviderUpdate = provider$.debugIsInInheritedProviderUpdate;
            return true;
          }, T$.VoidTobool())()) dart.assertFailed(null, I[30], 190, 14, "() {\n        _debugPreviousIsInInheritedProviderCreate =\n            debugIsInInheritedProviderCreate;\n        _debugPreviousIsInInheritedProviderUpdate =\n            debugIsInInheritedProviderUpdate;\n        return true;\n      }()");
          try {
            if (!dart.fn(() => {
              provider$.debugIsInInheritedProviderCreate = true;
              provider$.debugIsInInheritedProviderUpdate = false;
              return true;
            }, T$.VoidTobool())()) dart.assertFailed(null, I[30], 199, 16, "() {\n          debugIsInInheritedProviderCreate = true;\n          debugIsInInheritedProviderUpdate = false;\n          return true;\n        }()");
            this[_controller] = (t18 = this.delegate, t19 = dart.nullCheck(this.element), t18.create(t19));
          } finally {
            if (!dart.fn(() => {
              provider$.debugIsInInheritedProviderCreate = dart.nullCheck(_debugPreviousIsInInheritedProviderCreate);
              provider$.debugIsInInheritedProviderUpdate = dart.nullCheck(_debugPreviousIsInInheritedProviderUpdate);
              return true;
            }, T$.VoidTobool())()) dart.assertFailed(null, I[30], 206, 16, "() {\n          debugIsInInheritedProviderCreate =\n              _debugPreviousIsInInheritedProviderCreate!;\n          debugIsInInheritedProviderUpdate =\n              _debugPreviousIsInInheritedProviderUpdate!;\n          return true;\n        }()");
          }
          this[_didBuild] = true;
        }
        return T.as(this[_controller]);
      }
      dispose() {
        let t18;
        super.dispose();
        if (this[_didBuild]) {
          t18 = __t$BuildContextAndTToNvoid().as(this.delegate.dispose);
          t18 == null ? null : t18(dart.nullCheck(this.element), T.as(this[_controller]));
        }
      }
      debugFillProperties(properties) {
        let t18, t18$;
        super.debugFillProperties(properties);
        if (this.isLoaded) {
          t18 = properties;
          (() => {
            t18.add(new (__t$DiagnosticsPropertyOfT()).new("controller", this.controller));
            t18.add(new (__t$DiagnosticsPropertyOfR()).new("value", this.value));
            return t18;
          })();
        } else {
          t18$ = properties;
          (() => {
            t18$.add(new diagnostics.FlagProperty.new("controller", {value: true, showName: true, ifTrue: "<not yet loaded>"}));
            t18$.add(new diagnostics.FlagProperty.new("value", {value: true, showName: true, ifTrue: "<not yet loaded>"}));
            return t18$;
          })();
        }
      }
      static ['_#new#tearOff'](T, R) {
        return new (provider$._CreateDeferredInheritedProviderElement$(T, R)).new();
      }
    }
    (_CreateDeferredInheritedProviderElement.new = function() {
      this[_didBuild] = false;
      this[_controller] = null;
      _CreateDeferredInheritedProviderElement.__proto__.new.call(this);
      ;
    }).prototype = _CreateDeferredInheritedProviderElement.prototype;
    dart.addTypeTests(_CreateDeferredInheritedProviderElement);
    _CreateDeferredInheritedProviderElement.prototype[_is__CreateDeferredInheritedProviderElement_default] = true;
    dart.addTypeCaches(_CreateDeferredInheritedProviderElement);
    dart.setGetterSignature(_CreateDeferredInheritedProviderElement, () => ({
      __proto__: dart.getGetters(_CreateDeferredInheritedProviderElement.__proto__),
      controller: T
    }));
    dart.setLibraryUri(_CreateDeferredInheritedProviderElement, I[23]);
    dart.setFieldSignature(_CreateDeferredInheritedProviderElement, () => ({
      __proto__: dart.getFields(_CreateDeferredInheritedProviderElement.__proto__),
      [_didBuild]: dart.fieldType(core.bool),
      [_controller]: dart.fieldType(dart.nullable(T))
    }));
    return _CreateDeferredInheritedProviderElement;
  });
  provider$._CreateDeferredInheritedProviderElement = provider$._CreateDeferredInheritedProviderElement$();
  dart.addTypeTests(provider$._CreateDeferredInheritedProviderElement, _is__CreateDeferredInheritedProviderElement_default);
  const _is__ValueDeferredInheritedProvider_default = Symbol('_is__ValueDeferredInheritedProvider_default');
  provider$._ValueDeferredInheritedProvider$ = dart.generic((T, R) => {
    var __t$_ValueDeferredInheritedProviderStateOfT$R = () => (__t$_ValueDeferredInheritedProviderStateOfT$R = dart.constFn(provider$._ValueDeferredInheritedProviderState$(T, R)))();
    var __t$DiagnosticsPropertyOfT = () => (__t$DiagnosticsPropertyOfT = dart.constFn(diagnostics.DiagnosticsProperty$(T)))();
    class _ValueDeferredInheritedProvider extends provider$._DeferredDelegate$(T, R) {
      static ['_#new#tearOff'](T, R, value, updateShouldNotify, startListening) {
        return new (provider$._ValueDeferredInheritedProvider$(T, R)).new(value, updateShouldNotify, startListening);
      }
      createState() {
        return new (__t$_ValueDeferredInheritedProviderStateOfT$R()).new();
      }
      debugFillProperties(properties) {
        super.debugFillProperties(properties);
        properties.add(new (__t$DiagnosticsPropertyOfT()).new("controller", this.value));
      }
    }
    (_ValueDeferredInheritedProvider.new = function(value, updateShouldNotify, startListening) {
      this.value = value;
      _ValueDeferredInheritedProvider.__proto__.new.call(this, updateShouldNotify, startListening);
      ;
    }).prototype = _ValueDeferredInheritedProvider.prototype;
    dart.addTypeTests(_ValueDeferredInheritedProvider);
    _ValueDeferredInheritedProvider.prototype[_is__ValueDeferredInheritedProvider_default] = true;
    dart.addTypeCaches(_ValueDeferredInheritedProvider);
    dart.setMethodSignature(_ValueDeferredInheritedProvider, () => ({
      __proto__: dart.getMethods(_ValueDeferredInheritedProvider.__proto__),
      createState: dart.fnType(provider$._ValueDeferredInheritedProviderState$(T, R), [])
    }));
    dart.setLibraryUri(_ValueDeferredInheritedProvider, I[23]);
    dart.setFieldSignature(_ValueDeferredInheritedProvider, () => ({
      __proto__: dart.getFields(_ValueDeferredInheritedProvider.__proto__),
      value: dart.finalFieldType(T)
    }));
    return _ValueDeferredInheritedProvider;
  });
  provider$._ValueDeferredInheritedProvider = provider$._ValueDeferredInheritedProvider$();
  dart.addTypeTests(provider$._ValueDeferredInheritedProvider, _is__ValueDeferredInheritedProvider_default);
  const _is__ValueDeferredInheritedProviderState_default = Symbol('_is__ValueDeferredInheritedProviderState_default');
  provider$._ValueDeferredInheritedProviderState$ = dart.generic((T, R) => {
    var __t$_ValueDeferredInheritedProviderOfT$R = () => (__t$_ValueDeferredInheritedProviderOfT$R = dart.constFn(provider$._ValueDeferredInheritedProvider$(T, R)))();
    var __t$DiagnosticsPropertyOfR = () => (__t$DiagnosticsPropertyOfR = dart.constFn(diagnostics.DiagnosticsProperty$(R)))();
    class _ValueDeferredInheritedProviderState extends provider$._DeferredDelegateState$(T, R, provider$._ValueDeferredInheritedProvider$(T, R)) {
      willUpdateDelegate(oldDelegate) {
        __t$_ValueDeferredInheritedProviderOfT$R().as(oldDelegate);
        if (!dart.equals(this.delegate.value, oldDelegate.value)) {
          if (this[_removeListener] != null) {
            dart.nullCheck(this[_removeListener])();
            this[_removeListener] = null;
          }
          return true;
        }
        return false;
      }
      get controller() {
        return this.delegate.value;
      }
      debugFillProperties(properties) {
        super.debugFillProperties(properties);
        if (this[_removeListener] != null) {
          properties.add(new (__t$DiagnosticsPropertyOfR()).new("value", this.value));
        } else {
          properties.add(new diagnostics.FlagProperty.new("value", {value: true, showName: true, ifTrue: "<not yet loaded>"}));
        }
      }
      static ['_#new#tearOff'](T, R) {
        return new (provider$._ValueDeferredInheritedProviderState$(T, R)).new();
      }
    }
    (_ValueDeferredInheritedProviderState.new = function() {
      _ValueDeferredInheritedProviderState.__proto__.new.call(this);
      ;
    }).prototype = _ValueDeferredInheritedProviderState.prototype;
    dart.addTypeTests(_ValueDeferredInheritedProviderState);
    _ValueDeferredInheritedProviderState.prototype[_is__ValueDeferredInheritedProviderState_default] = true;
    dart.addTypeCaches(_ValueDeferredInheritedProviderState);
    dart.setGetterSignature(_ValueDeferredInheritedProviderState, () => ({
      __proto__: dart.getGetters(_ValueDeferredInheritedProviderState.__proto__),
      controller: T
    }));
    dart.setLibraryUri(_ValueDeferredInheritedProviderState, I[23]);
    return _ValueDeferredInheritedProviderState;
  });
  provider$._ValueDeferredInheritedProviderState = provider$._ValueDeferredInheritedProviderState$();
  dart.addTypeTests(provider$._ValueDeferredInheritedProviderState, _is__ValueDeferredInheritedProviderState_default);
  var eventKind$ = dart.privateName(provider$, "PostEventCall.eventKind");
  var event$ = dart.privateName(provider$, "PostEventCall.event");
  provider$.PostEventCall = class PostEventCall extends core.Object {
    get eventKind() {
      return this[eventKind$];
    }
    set eventKind(value) {
      super.eventKind = value;
    }
    get event() {
      return this[event$];
    }
    set event(value) {
      super.event = value;
    }
    static ['_#_#tearOff'](eventKind, event) {
      return new provider$.PostEventCall.__(eventKind, event);
    }
  };
  (provider$.PostEventCall.__ = function(eventKind, event) {
    this[eventKind$] = eventKind;
    this[event$] = event;
    ;
  }).prototype = provider$.PostEventCall.prototype;
  dart.addTypeTests(provider$.PostEventCall);
  dart.addTypeCaches(provider$.PostEventCall);
  dart.setLibraryUri(provider$.PostEventCall, I[23]);
  dart.setFieldSignature(provider$.PostEventCall, () => ({
    __proto__: dart.getFields(provider$.PostEventCall.__proto__),
    eventKind: dart.finalFieldType(core.String),
    event: dart.finalFieldType(core.Map$(dart.nullable(core.Object), dart.nullable(core.Object)))
  }));
  var logs = dart.privateName(provider$, "PostEventSpy.logs");
  var _postEvent = dart.privateName(provider$, "_postEvent");
  provider$.PostEventSpy = class PostEventSpy extends core.Object {
    get logs() {
      return this[logs];
    }
    set logs(value) {
      super.logs = value;
    }
    static ['_#_#tearOff']() {
      return new provider$.PostEventSpy.__();
    }
    dispose() {
      if (!dart.equals(provider$._debugPostEventOverride, dart.bind(this, _postEvent))) dart.assertFailed("disposed a spy different from the current spy", I[31], 43, 7, "_debugPostEventOverride == _postEvent");
      provider$._debugPostEventOverride = null;
    }
    [_postEvent](eventKind, event) {
      this.logs[$add](new provider$.PostEventCall.__(eventKind, event));
    }
  };
  (provider$.PostEventSpy.__ = function() {
    this[logs] = T$.JSArrayOfPostEventCall().of([]);
    ;
  }).prototype = provider$.PostEventSpy.prototype;
  dart.addTypeTests(provider$.PostEventSpy);
  dart.addTypeCaches(provider$.PostEventSpy);
  dart.setMethodSignature(provider$.PostEventSpy, () => ({
    __proto__: dart.getMethods(provider$.PostEventSpy.__proto__),
    dispose: dart.fnType(dart.void, []),
    [_postEvent]: dart.fnType(dart.void, [core.String, core.Map$(dart.nullable(core.Object), dart.nullable(core.Object))])
  }));
  dart.setLibraryUri(provider$.PostEventSpy, I[23]);
  dart.setFieldSignature(provider$.PostEventSpy, () => ({
    __proto__: dart.getFields(provider$.PostEventSpy.__proto__),
    logs: dart.finalFieldType(core.List$(provider$.PostEventCall))
  }));
  var id$ = dart.privateName(provider$, "ProviderNode.id");
  var type$ = dart.privateName(provider$, "ProviderNode.type");
  var childrenNodeIds$ = dart.privateName(provider$, "ProviderNode.childrenNodeIds");
  var _element = dart.privateName(provider$, "ProviderNode._element");
  var _element$ = dart.privateName(provider$, "_element");
  var _delegateState = dart.privateName(provider$, "_delegateState");
  provider$.ProviderNode = class ProviderNode extends core.Object {
    get id() {
      return this[id$];
    }
    set id(value) {
      super.id = value;
    }
    get type() {
      return this[type$];
    }
    set type(value) {
      super.type = value;
    }
    get childrenNodeIds() {
      return this[childrenNodeIds$];
    }
    set childrenNodeIds(value) {
      super.childrenNodeIds = value;
    }
    get [_element$]() {
      return this[_element];
    }
    set [_element$](value) {
      super[_element$] = value;
    }
    static ['_#new#tearOff'](opts) {
      let id = opts && 'id' in opts ? opts.id : null;
      let childrenNodeIds = opts && 'childrenNodeIds' in opts ? opts.childrenNodeIds : null;
      let type = opts && 'type' in opts ? opts.type : null;
      let element = opts && 'element' in opts ? opts.element : null;
      return new provider$.ProviderNode.new({id: id, childrenNodeIds: childrenNodeIds, type: type, element: element});
    }
    get value() {
      return this[_element$][_delegateState].value;
    }
  };
  (provider$.ProviderNode.new = function(opts) {
    let id = opts && 'id' in opts ? opts.id : null;
    let childrenNodeIds = opts && 'childrenNodeIds' in opts ? opts.childrenNodeIds : null;
    let type = opts && 'type' in opts ? opts.type : null;
    let element = opts && 'element' in opts ? opts.element : null;
    this[id$] = id;
    this[childrenNodeIds$] = childrenNodeIds;
    this[type$] = type;
    this[_element] = element;
    ;
  }).prototype = provider$.ProviderNode.prototype;
  dart.addTypeTests(provider$.ProviderNode);
  dart.addTypeCaches(provider$.ProviderNode);
  dart.setGetterSignature(provider$.ProviderNode, () => ({
    __proto__: dart.getGetters(provider$.ProviderNode.__proto__),
    value: dart.nullable(core.Object)
  }));
  dart.setLibraryUri(provider$.ProviderNode, I[23]);
  dart.setFieldSignature(provider$.ProviderNode, () => ({
    __proto__: dart.getFields(provider$.ProviderNode.__proto__),
    id: dart.finalFieldType(core.String),
    type: dart.finalFieldType(core.String),
    childrenNodeIds: dart.finalFieldType(core.List$(core.String)),
    [_element$]: dart.finalFieldType(provider$._InheritedProviderScopeElement$(dart.nullable(core.Object)))
  }));
  var _providerDetails = dart.privateName(provider$, "_providerDetails");
  provider$.ProviderBinding = class ProviderBinding extends core.Object {
    static ['_#_#tearOff']() {
      return new provider$.ProviderBinding.__();
    }
    get providerDetails() {
      return this[_providerDetails];
    }
    set providerDetails(value) {
      provider$.debugPostEvent("provider:provider_list_changed", new _js_helper.LinkedMap.new());
      this[_providerDetails] = value;
    }
    providerDidChange(providerId) {
      provider$.debugPostEvent("provider:provider_changed", new _js_helper.LinkedMap.from(["id", providerId]));
    }
  };
  (provider$.ProviderBinding.__ = function() {
    this[_providerDetails] = new (T$.IdentityMapOfString$ProviderNode()).new();
    ;
  }).prototype = provider$.ProviderBinding.prototype;
  dart.addTypeTests(provider$.ProviderBinding);
  dart.addTypeCaches(provider$.ProviderBinding);
  dart.setMethodSignature(provider$.ProviderBinding, () => ({
    __proto__: dart.getMethods(provider$.ProviderBinding.__proto__),
    providerDidChange: dart.fnType(dart.void, [core.String])
  }));
  dart.setGetterSignature(provider$.ProviderBinding, () => ({
    __proto__: dart.getGetters(provider$.ProviderBinding.__proto__),
    providerDetails: core.Map$(core.String, provider$.ProviderNode)
  }));
  dart.setSetterSignature(provider$.ProviderBinding, () => ({
    __proto__: dart.getSetters(provider$.ProviderBinding.__proto__),
    providerDetails: core.Map$(core.String, provider$.ProviderNode)
  }));
  dart.setLibraryUri(provider$.ProviderBinding, I[23]);
  dart.setFieldSignature(provider$.ProviderBinding, () => ({
    __proto__: dart.getFields(provider$.ProviderBinding.__proto__),
    [_providerDetails]: dart.fieldType(core.Map$(core.String, provider$.ProviderNode))
  }));
  dart.setStaticFieldSignature(provider$.ProviderBinding, () => ['debugInstance']);
  dart.defineLazy(provider$.ProviderBinding, {
    /*provider$.ProviderBinding.debugInstance*/get debugInstance() {
      return new provider$.ProviderBinding.__();
    }
  }, false);
  var _parent = dart.privateName(nested, "_parent");
  var _parent$ = dart.privateName(nested, "SingleChildWidgetElementMixin._parent");
  nested.SingleChildWidgetElementMixin = class SingleChildWidgetElementMixin extends framework.Element {};
  nested.SingleChildWidgetElementMixin[dart.mixinOn] = Element => class SingleChildWidgetElementMixin extends Element {
    get [_parent]() {
      return this[_parent$];
    }
    set [_parent](value) {
      this[_parent$] = value;
    }
    mount(parent, newSlot) {
      if (T$._NestedHookElementN().is(parent)) {
        this[_parent] = parent;
      }
      super.mount(parent, newSlot);
    }
    activate() {
      super.activate();
      this.visitAncestorElements(dart.fn(parent => {
        if (nested._NestedHookElement.is(parent)) {
          this[_parent] = parent;
        }
        return false;
      }, T$.ElementTobool()));
    }
  };
  (nested.SingleChildWidgetElementMixin[dart.mixinNew] = function() {
    this[_parent$] = null;
  }).prototype = nested.SingleChildWidgetElementMixin.prototype;
  dart.addTypeTests(nested.SingleChildWidgetElementMixin);
  dart.addTypeCaches(nested.SingleChildWidgetElementMixin);
  nested.SingleChildWidgetElementMixin[dart.implements] = () => [framework.Element];
  dart.setMethodSignature(nested.SingleChildWidgetElementMixin, () => ({
    __proto__: dart.getMethods(nested.SingleChildWidgetElementMixin.__proto__),
    mount: dart.fnType(dart.void, [dart.nullable(framework.Element), dart.dynamic])
  }));
  dart.setLibraryUri(nested.SingleChildWidgetElementMixin, I[22]);
  dart.setFieldSignature(nested.SingleChildWidgetElementMixin, () => ({
    __proto__: dart.getFields(nested.SingleChildWidgetElementMixin.__proto__),
    [_parent]: dart.fieldType(dart.nullable(nested._NestedHookElement))
  }));
  const StatelessElement_SingleChildWidgetElementMixin$36 = class StatelessElement_SingleChildWidgetElementMixin extends framework.StatelessElement {};
  (StatelessElement_SingleChildWidgetElementMixin$36.new = function(widget) {
    nested.SingleChildWidgetElementMixin[dart.mixinNew].call(this);
    StatelessElement_SingleChildWidgetElementMixin$36.__proto__.new.call(this, widget);
  }).prototype = StatelessElement_SingleChildWidgetElementMixin$36.prototype;
  dart.applyMixin(StatelessElement_SingleChildWidgetElementMixin$36, nested.SingleChildWidgetElementMixin);
  nested.SingleChildStatelessElement = class SingleChildStatelessElement extends StatelessElement_SingleChildWidgetElementMixin$36 {
    static ['_#new#tearOff'](widget) {
      return new nested.SingleChildStatelessElement.new(widget);
    }
    build() {
      if (this[_parent] != null) {
        return this.widget.buildWithChild(this, dart.nullCheck(this[_parent]).injectedChild);
      }
      return super.build();
    }
    get widget() {
      return nested.SingleChildStatelessWidget.as(super.widget);
    }
  };
  (nested.SingleChildStatelessElement.new = function(widget) {
    nested.SingleChildStatelessElement.__proto__.new.call(this, widget);
    ;
  }).prototype = nested.SingleChildStatelessElement.prototype;
  dart.addTypeTests(nested.SingleChildStatelessElement);
  dart.addTypeCaches(nested.SingleChildStatelessElement);
  dart.setGetterSignature(nested.SingleChildStatelessElement, () => ({
    __proto__: dart.getGetters(nested.SingleChildStatelessElement.__proto__),
    widget: nested.SingleChildStatelessWidget
  }));
  dart.setLibraryUri(nested.SingleChildStatelessElement, I[22]);
  const _is__InheritedProviderElement_default = Symbol('_is__InheritedProviderElement_default');
  provider$._InheritedProviderElement$ = dart.generic(T => {
    class _InheritedProviderElement extends nested.SingleChildStatelessElement {
      static ['_#new#tearOff'](T, widget) {
        return new (provider$._InheritedProviderElement$(T)).new(widget);
      }
      debugFillProperties(properties) {
        super.debugFillProperties(properties);
        this.visitChildren(dart.fn(e => e.debugFillProperties(properties), T$.ElementTovoid()));
      }
    }
    (_InheritedProviderElement.new = function(widget) {
      _InheritedProviderElement.__proto__.new.call(this, widget);
      ;
    }).prototype = _InheritedProviderElement.prototype;
    dart.addTypeTests(_InheritedProviderElement);
    _InheritedProviderElement.prototype[_is__InheritedProviderElement_default] = true;
    dart.addTypeCaches(_InheritedProviderElement);
    dart.setLibraryUri(_InheritedProviderElement, I[23]);
    return _InheritedProviderElement;
  });
  provider$._InheritedProviderElement = provider$._InheritedProviderElement$();
  dart.addTypeTests(provider$._InheritedProviderElement, _is__InheritedProviderElement_default);
  const _is_InheritedContext_default = Symbol('_is_InheritedContext_default');
  provider$.InheritedContext$ = dart.generic(T => {
    class InheritedContext extends framework.BuildContext {}
    (InheritedContext.new = function() {
      ;
    }).prototype = InheritedContext.prototype;
    dart.addTypeTests(InheritedContext);
    InheritedContext.prototype[_is_InheritedContext_default] = true;
    dart.addTypeCaches(InheritedContext);
    dart.setLibraryUri(InheritedContext, I[23]);
    return InheritedContext;
  });
  provider$.InheritedContext = provider$.InheritedContext$();
  dart.addTypeTests(provider$.InheritedContext, _is_InheritedContext_default);
  var owner$ = dart.privateName(provider$, "_InheritedProviderScope.owner");
  var debugType$ = dart.privateName(provider$, "_InheritedProviderScope.debugType");
  const _is__InheritedProviderScope_default = Symbol('_is__InheritedProviderScope_default');
  provider$._InheritedProviderScope$ = dart.generic(T => {
    var __t$_InheritedProviderScopeElementOfT = () => (__t$_InheritedProviderScopeElementOfT = dart.constFn(provider$._InheritedProviderScopeElement$(T)))();
    class _InheritedProviderScope extends framework.InheritedWidget {
      get owner() {
        return this[owner$];
      }
      set owner(value) {
        super.owner = value;
      }
      get debugType() {
        return this[debugType$];
      }
      set debugType(value) {
        super.debugType = value;
      }
      static ['_#new#tearOff'](T, opts) {
        let owner = opts && 'owner' in opts ? opts.owner : null;
        let debugType = opts && 'debugType' in opts ? opts.debugType : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (provider$._InheritedProviderScope$(T)).new({owner: owner, debugType: debugType, child: child});
      }
      updateShouldNotify(oldWidget) {
        framework.InheritedWidget.as(oldWidget);
        return false;
      }
      createElement() {
        return new (__t$_InheritedProviderScopeElementOfT()).new(this);
      }
    }
    (_InheritedProviderScope.new = function(opts) {
      let owner = opts && 'owner' in opts ? opts.owner : null;
      let debugType = opts && 'debugType' in opts ? opts.debugType : null;
      let child = opts && 'child' in opts ? opts.child : null;
      this[owner$] = owner;
      this[debugType$] = debugType;
      if (!T.is(null)) dart.assertFailed(null, I[21], 341, 16, "null is T");
      _InheritedProviderScope.__proto__.new.call(this, {child: child});
      ;
    }).prototype = _InheritedProviderScope.prototype;
    dart.addTypeTests(_InheritedProviderScope);
    _InheritedProviderScope.prototype[_is__InheritedProviderScope_default] = true;
    dart.addTypeCaches(_InheritedProviderScope);
    dart.setMethodSignature(_InheritedProviderScope, () => ({
      __proto__: dart.getMethods(_InheritedProviderScope.__proto__),
      updateShouldNotify: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      createElement: dart.fnType(provider$._InheritedProviderScopeElement$(T), [])
    }));
    dart.setLibraryUri(_InheritedProviderScope, I[23]);
    dart.setFieldSignature(_InheritedProviderScope, () => ({
      __proto__: dart.getFields(_InheritedProviderScope.__proto__),
      owner: dart.finalFieldType(provider$.InheritedProvider$(T)),
      debugType: dart.finalFieldType(core.String)
    }));
    return _InheritedProviderScope;
  });
  provider$._InheritedProviderScope = provider$._InheritedProviderScope$();
  dart.addTypeTests(provider$._InheritedProviderScope, _is__InheritedProviderScope_default);
  const _is__Dependency_default = Symbol('_is__Dependency_default');
  provider$._Dependency$ = dart.generic(T => {
    var __t$TTobool = () => (__t$TTobool = dart.constFn(dart.fnType(core.bool, [T])))();
    var __t$JSArrayOfTTobool = () => (__t$JSArrayOfTTobool = dart.constFn(_interceptors.JSArray$(__t$TTobool())))();
    class _Dependency extends core.Object {
      static ['_#new#tearOff'](T) {
        return new (provider$._Dependency$(T)).new();
      }
    }
    (_Dependency.new = function() {
      this.shouldClearSelectors = false;
      this.shouldClearMutationScheduled = false;
      this.selectors = __t$JSArrayOfTTobool().of([]);
      ;
    }).prototype = _Dependency.prototype;
    dart.addTypeTests(_Dependency);
    _Dependency.prototype[_is__Dependency_default] = true;
    dart.addTypeCaches(_Dependency);
    dart.setLibraryUri(_Dependency, I[23]);
    dart.setFieldSignature(_Dependency, () => ({
      __proto__: dart.getFields(_Dependency.__proto__),
      shouldClearSelectors: dart.fieldType(core.bool),
      shouldClearMutationScheduled: dart.fieldType(core.bool),
      selectors: dart.finalFieldType(core.List$(dart.fnType(core.bool, [T])))
    }));
    return _Dependency;
  });
  provider$._Dependency = provider$._Dependency$();
  dart.addTypeTests(provider$._Dependency, _is__Dependency_default);
  var _shouldNotifyDependents = dart.privateName(provider$, "_shouldNotifyDependents");
  var _debugInheritLocked = dart.privateName(provider$, "_debugInheritLocked");
  var _updatedShouldNotify = dart.privateName(provider$, "_updatedShouldNotify");
  var _isBuildFromExternalSources = dart.privateName(provider$, "_isBuildFromExternalSources");
  var ___InheritedProviderScopeElement__delegateState = dart.privateName(provider$, "_#_InheritedProviderScopeElement#_delegateState");
  var ___InheritedProviderScopeElement__debugId = dart.privateName(provider$, "_#_InheritedProviderScopeElement#_debugId");
  var _debugId = dart.privateName(provider$, "_debugId");
  const _is__InheritedProviderScopeElement_default = Symbol('_is__InheritedProviderScopeElement_default');
  provider$._InheritedProviderScopeElement$ = dart.generic(T => {
    var __t$_InheritedProviderScopeOfT = () => (__t$_InheritedProviderScopeOfT = dart.constFn(provider$._InheritedProviderScope$(T)))();
    var __t$_DependencyOfT = () => (__t$_DependencyOfT = dart.constFn(provider$._Dependency$(T)))();
    var __t$TTobool = () => (__t$TTobool = dart.constFn(dart.fnType(core.bool, [T])))();
    var __t$ListOfTTobool = () => (__t$ListOfTTobool = dart.constFn(core.List$(__t$TTobool())))();
    class _InheritedProviderScopeElement extends framework.InheritedElement {
      static ['_#new#tearOff'](T, widget) {
        return new (provider$._InheritedProviderScopeElement$(T)).new(widget);
      }
      get [_delegateState]() {
        let t19, t19$, t18;
        t18 = this[___InheritedProviderScopeElement__delegateState];
        return t18 == null ? (t19$ = (t19 = this.widget.owner[_delegate].createState(), (() => {
          t19.element = this;
          return t19;
        })()), this[___InheritedProviderScopeElement__delegateState] == null ? this[___InheritedProviderScopeElement__delegateState] = t19$ : dart.throw(new _internal.LateError.fieldADI("_delegateState"))) : t18;
      }
      get [_debugId]() {
        let t18;
        t18 = this[___InheritedProviderScopeElement__debugId];
        return t18 == null ? dart.throw(new _internal.LateError.fieldNI("_debugId")) : t18;
      }
      set [_debugId](_debugId$35param) {
        this[___InheritedProviderScopeElement__debugId] = _debugId$35param;
      }
      getElementForInheritedWidgetOfExactType(InheritedWidgetType) {
        let inheritedElement = null;
        this.visitAncestorElements(dart.fn(parent => {
          inheritedElement = parent.getElementForInheritedWidgetOfExactType(InheritedWidgetType);
          return false;
        }, T$.ElementTobool()));
        return inheritedElement;
      }
      mount(parent, newSlot) {
        let t18;
        {
          this[_debugId] = dart.str((t18 = provider$._InheritedProviderScopeElement._nextProviderId, provider$._InheritedProviderScopeElement._nextProviderId = t18 + 1, t18));
          provider$.ProviderBinding.debugInstance.providerDetails = (() => {
            let t18 = T$.LinkedHashMapOfString$ProviderNode().of(provider$.ProviderBinding.debugInstance.providerDetails);
            t18[$_set](this[_debugId], new provider$.ProviderNode.new({id: this[_debugId], childrenNodeIds: C[32] || CT.C32, type: this.widget.debugType, element: this}));
            return t18;
          })();
        }
        super.mount(parent, newSlot);
      }
      get widget() {
        return __t$_InheritedProviderScopeOfT().as(super.widget);
      }
      reassemble() {
        super.reassemble();
        let value = this[_delegateState].hasValue ? this[_delegateState].value : null;
        if (reassemble_handler.ReassembleHandler.is(value)) {
          value.reassemble();
        }
      }
      updateDependencies(dependent, aspect) {
        let t19;
        let dependencies = this.getDependencies(dependent);
        if (dependencies != null && !__t$_DependencyOfT().is(dependencies)) {
          return;
        }
        if (__t$TTobool().is(aspect)) {
          let selectorDependency = __t$_DependencyOfT().as((t19 = dependencies, t19 == null ? new (__t$_DependencyOfT()).new() : t19));
          if (selectorDependency.shouldClearSelectors) {
            selectorDependency.shouldClearSelectors = false;
            __t$ListOfTTobool().as(selectorDependency.selectors)[$clear]();
          }
          if (selectorDependency.shouldClearMutationScheduled === false) {
            selectorDependency.shouldClearMutationScheduled = true;
            T$.FutureOfNull().microtask(dart.fn(() => {
              let t19;
              t19 = selectorDependency;
              (() => {
                t19.shouldClearMutationScheduled = false;
                t19.shouldClearSelectors = true;
                return t19;
              })();
            }, T$.VoidToNull()));
          }
          __t$ListOfTTobool().as(selectorDependency.selectors)[$add](aspect);
          this.setDependencies(dependent, selectorDependency);
        } else {
          this.setDependencies(dependent, C[1] || CT.C1);
        }
      }
      notifyDependent(oldWidget, dependent) {
        framework.InheritedWidget.as(oldWidget);
        let dependencies = this.getDependencies(dependent);
        {
          provider$.ProviderBinding.debugInstance.providerDidChange(this[_debugId]);
        }
        let shouldNotify = false;
        if (dependencies != null) {
          if (__t$_DependencyOfT().is(dependencies)) {
            if (dependent.dirty) {
              return;
            }
            for (let updateShouldNotify of __t$ListOfTTobool().as(dependencies.selectors)) {
              try {
                if (!dart.fn(() => {
                  provider$._debugIsSelecting = true;
                  return true;
                }, T$.VoidTobool())()) dart.assertFailed(null, I[21], 480, 20, "() {\n              _debugIsSelecting = true;\n              return true;\n            }()");
                shouldNotify = updateShouldNotify(this.value);
              } finally {
                if (!dart.fn(() => {
                  provider$._debugIsSelecting = false;
                  return true;
                }, T$.VoidTobool())()) dart.assertFailed(null, I[21], 486, 20, "() {\n              _debugIsSelecting = false;\n              return true;\n            }()");
              }
              if (shouldNotify) {
                break;
              }
            }
          } else {
            shouldNotify = true;
          }
        }
        if (shouldNotify) {
          dependent.didChangeDependencies();
        }
      }
      update(newWidget) {
        __t$_InheritedProviderScopeOfT().as(newWidget);
        if (!dart.fn(() => {
          if (!this.widget.owner[_delegate][$runtimeType]._equals(newWidget.owner[_delegate][$runtimeType])) {
            dart.throw(new core.StateError.new("Rebuilt " + dart.str(this.widget) + " using a different constructor.\n      \nThis is likely a mistake and is unsupported.\nIf you're in this situation, consider passing a `key` unique to each individual constructor.\n"));
          }
          return true;
        }, T$.VoidTobool())()) dart.assertFailed(null, I[21], 507, 12, "() {\n      if (widget.owner._delegate.runtimeType !=\n          newWidget.owner._delegate.runtimeType) {\n        throw StateError('''\nRebuilt $widget using a different constructor.\n      \nThis is likely a mistake and is unsupported.\nIf you're in this situation, consider passing a `key` unique to each individual constructor.\n''');\n      }\n      return true;\n    }()");
        this[_isBuildFromExternalSources] = true;
        this[_updatedShouldNotify] = this[_delegateState].willUpdateDelegate(newWidget.owner[_delegate]);
        super.update(newWidget);
        this[_updatedShouldNotify] = false;
      }
      updated(oldWidget) {
        framework.InheritedWidget.as(oldWidget);
        super.updated(oldWidget);
        if (this[_updatedShouldNotify]) {
          this.notifyClients(oldWidget);
        }
      }
      didChangeDependencies() {
        this[_isBuildFromExternalSources] = true;
        super.didChangeDependencies();
      }
      build() {
        if (this.widget.owner[_lazy] === false) {
          this.value;
        }
        this[_delegateState].build({isBuildFromExternalSources: this[_isBuildFromExternalSources]});
        this[_isBuildFromExternalSources] = false;
        if (this[_shouldNotifyDependents]) {
          this[_shouldNotifyDependents] = false;
          this.notifyClients(this.widget);
        }
        return super.build();
      }
      unmount() {
        let t20;
        this[_delegateState].dispose();
        {
          provider$.ProviderBinding.debugInstance.providerDetails = (t20 = (() => {
            let t19 = T$.LinkedHashMapOfString$ProviderNode().of(provider$.ProviderBinding.debugInstance.providerDetails);
            return t19;
          })(), (() => {
            t20[$remove](this[_debugId]);
            return t20;
          })());
        }
        super.unmount();
      }
      get hasValue() {
        return this[_delegateState].hasValue;
      }
      markNeedsNotifyDependents() {
        if (!this[_isNotifyDependentsEnabled]) {
          return;
        }
        this.markNeedsBuild();
        this[_shouldNotifyDependents] = true;
      }
      [_debugSetInheritedLock](value) {
        if (!dart.fn(() => {
          this[_debugInheritLocked] = value;
          return true;
        }, T$.VoidTobool())()) dart.assertFailed(null, I[21], 582, 12, "() {\n      _debugInheritLocked = value;\n      return true;\n    }()");
        return true;
      }
      get value() {
        return this[_delegateState].value;
      }
      dependOnInheritedElement(ancestor, opts) {
        let aspect = opts && 'aspect' in opts ? opts.aspect : null;
        if (!dart.fn(() => {
          if (this[_debugInheritLocked]) {
            dart.throw(new assertions.FlutterError.fromParts(T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("Tried to listen to an InheritedWidget " + "in a life-cycle that will never be called again."), new assertions.ErrorDescription.new("This error typically happens when calling Provider.of with `listen` to `true`,\nin a situation where listening to the provider doesn't make sense, such as:\n- initState of a StatefulWidget\n- the \"create\" callback of a provider\n\nThis is undesired because these life-cycles are called only once in the\nlifetime of a widget. As such, while `listen` is `true`, the widget has\nno mean to handle the update scenario.\n\nTo fix, consider:\n- passing `listen: false` to `Provider.of`\n- use a life-cycle that handles updates (like didChangeDependencies)\n- use a provider that handles updates (like ProxyProvider).\n")])));
          }
          return true;
        }, T$.VoidTobool())()) dart.assertFailed(null, I[21], 597, 12, "() {\n      if (_debugInheritLocked) {\n        throw FlutterError.fromParts(\n          <DiagnosticsNode>[\n            ErrorSummary(\n              'Tried to listen to an InheritedWidget '\n              'in a life-cycle that will never be called again.',\n            ),\n            ErrorDescription('''\nThis error typically happens when calling Provider.of with `listen` to `true`,\nin a situation where listening to the provider doesn't make sense, such as:\n- initState of a StatefulWidget\n- the \"create\" callback of a provider\n\nThis is undesired because these life-cycles are called only once in the\nlifetime of a widget. As such, while `listen` is `true`, the widget has\nno mean to handle the update scenario.\n\nTo fix, consider:\n- passing `listen: false` to `Provider.of`\n- use a life-cycle that handles updates (like didChangeDependencies)\n- use a provider that handles updates (like ProxyProvider).\n'''),\n          ],\n        );\n      }\n      return true;\n    }()");
        return super.dependOnInheritedElement(ancestor, {aspect: aspect});
      }
      debugFillProperties(properties) {
        super.debugFillProperties(properties);
        this[_delegateState].debugFillProperties(properties);
      }
    }
    (_InheritedProviderScopeElement.new = function(widget) {
      this[_shouldNotifyDependents] = false;
      this[_debugInheritLocked] = false;
      this[_isNotifyDependentsEnabled] = true;
      this[_updatedShouldNotify] = false;
      this[_isBuildFromExternalSources] = false;
      this[___InheritedProviderScopeElement__delegateState] = null;
      this[___InheritedProviderScopeElement__debugId] = null;
      _InheritedProviderScopeElement.__proto__.new.call(this, widget);
      ;
    }).prototype = _InheritedProviderScopeElement.prototype;
    dart.addTypeTests(_InheritedProviderScopeElement);
    _InheritedProviderScopeElement.prototype[_is__InheritedProviderScopeElement_default] = true;
    dart.addTypeCaches(_InheritedProviderScopeElement);
    _InheritedProviderScopeElement[dart.implements] = () => [provider$.InheritedContext$(T)];
    dart.setMethodSignature(_InheritedProviderScopeElement, () => ({
      __proto__: dart.getMethods(_InheritedProviderScopeElement.__proto__),
      mount: dart.fnType(dart.void, [dart.nullable(framework.Element), dart.dynamic]),
      markNeedsNotifyDependents: dart.fnType(dart.void, []),
      [_debugSetInheritedLock]: dart.fnType(core.bool, [core.bool])
    }));
    dart.setGetterSignature(_InheritedProviderScopeElement, () => ({
      __proto__: dart.getGetters(_InheritedProviderScopeElement.__proto__),
      [_delegateState]: provider$._DelegateState$(T, provider$._Delegate$(T)),
      [_debugId]: core.String,
      widget: provider$._InheritedProviderScope$(T),
      hasValue: core.bool,
      value: T
    }));
    dart.setSetterSignature(_InheritedProviderScopeElement, () => ({
      __proto__: dart.getSetters(_InheritedProviderScopeElement.__proto__),
      [_debugId]: core.String
    }));
    dart.setLibraryUri(_InheritedProviderScopeElement, I[23]);
    dart.setFieldSignature(_InheritedProviderScopeElement, () => ({
      __proto__: dart.getFields(_InheritedProviderScopeElement.__proto__),
      [_shouldNotifyDependents]: dart.fieldType(core.bool),
      [_debugInheritLocked]: dart.fieldType(core.bool),
      [_isNotifyDependentsEnabled]: dart.fieldType(core.bool),
      [_updatedShouldNotify]: dart.fieldType(core.bool),
      [_isBuildFromExternalSources]: dart.fieldType(core.bool),
      [___InheritedProviderScopeElement__delegateState]: dart.fieldType(dart.nullable(provider$._DelegateState$(T, provider$._Delegate$(T)))),
      [___InheritedProviderScopeElement__debugId]: dart.fieldType(dart.nullable(core.String))
    }));
    dart.setStaticFieldSignature(_InheritedProviderScopeElement, () => ['_nextProviderId']);
    return _InheritedProviderScopeElement;
  });
  provider$._InheritedProviderScopeElement = provider$._InheritedProviderScopeElement$();
  dart.defineLazy(provider$._InheritedProviderScopeElement, {
    /*provider$._InheritedProviderScopeElement._nextProviderId*/get _nextProviderId() {
      return 0;
    },
    set _nextProviderId(value) {}
  }, false);
  dart.addTypeTests(provider$._InheritedProviderScopeElement, _is__InheritedProviderScopeElement_default);
  var _updateShouldNotify = dart.privateName(provider$, "_updateShouldNotify");
  const _is__CreateInheritedProvider_default = Symbol('_is__CreateInheritedProvider_default');
  provider$._CreateInheritedProvider$ = dart.generic(T => {
    var __t$_CreateInheritedProviderStateOfT = () => (__t$_CreateInheritedProviderStateOfT = dart.constFn(provider$._CreateInheritedProviderState$(T)))();
    class _CreateInheritedProvider extends provider$._Delegate$(T) {
      static ['_#new#tearOff'](T, opts) {
        let create = opts && 'create' in opts ? opts.create : null;
        let update = opts && 'update' in opts ? opts.update : null;
        let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
        let debugCheckInvalidValueType = opts && 'debugCheckInvalidValueType' in opts ? opts.debugCheckInvalidValueType : null;
        let startListening = opts && 'startListening' in opts ? opts.startListening : null;
        let dispose = opts && 'dispose' in opts ? opts.dispose : null;
        return new (provider$._CreateInheritedProvider$(T)).new({create: create, update: update, updateShouldNotify: updateShouldNotify, debugCheckInvalidValueType: debugCheckInvalidValueType, startListening: startListening, dispose: dispose});
      }
      createState() {
        return new (__t$_CreateInheritedProviderStateOfT()).new();
      }
    }
    (_CreateInheritedProvider.new = function(opts) {
      let create = opts && 'create' in opts ? opts.create : null;
      let update = opts && 'update' in opts ? opts.update : null;
      let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
      let debugCheckInvalidValueType = opts && 'debugCheckInvalidValueType' in opts ? opts.debugCheckInvalidValueType : null;
      let startListening = opts && 'startListening' in opts ? opts.startListening : null;
      let dispose = opts && 'dispose' in opts ? opts.dispose : null;
      this.create = create;
      this.update = update;
      this.debugCheckInvalidValueType = debugCheckInvalidValueType;
      this.startListening = startListening;
      this.dispose = dispose;
      if (!(create != null || update != null)) dart.assertFailed(null, I[21], 674, 16, "create != null || update != null");
      this[_updateShouldNotify] = updateShouldNotify;
      ;
    }).prototype = _CreateInheritedProvider.prototype;
    dart.addTypeTests(_CreateInheritedProvider);
    _CreateInheritedProvider.prototype[_is__CreateInheritedProvider_default] = true;
    dart.addTypeCaches(_CreateInheritedProvider);
    dart.setMethodSignature(_CreateInheritedProvider, () => ({
      __proto__: dart.getMethods(_CreateInheritedProvider.__proto__),
      createState: dart.fnType(provider$._CreateInheritedProviderState$(T), [])
    }));
    dart.setLibraryUri(_CreateInheritedProvider, I[23]);
    dart.setFieldSignature(_CreateInheritedProvider, () => ({
      __proto__: dart.getFields(_CreateInheritedProvider.__proto__),
      create: dart.finalFieldType(dart.nullable(dart.fnType(T, [framework.BuildContext]))),
      update: dart.finalFieldType(dart.nullable(dart.fnType(T, [framework.BuildContext, dart.nullable(T)]))),
      [_updateShouldNotify]: dart.finalFieldType(dart.nullable(dart.fnType(core.bool, [T, T]))),
      debugCheckInvalidValueType: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [T]))),
      startListening: dart.finalFieldType(dart.nullable(dart.fnType(dart.fnType(dart.void, []), [provider$.InheritedContext$(dart.nullable(T)), T]))),
      dispose: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [framework.BuildContext, T])))
    }));
    return _CreateInheritedProvider;
  });
  provider$._CreateInheritedProvider = provider$._CreateInheritedProvider$();
  dart.addTypeTests(provider$._CreateInheritedProvider, _is__CreateInheritedProvider_default);
  var _didInitValue = dart.privateName(provider$, "_didInitValue");
  var _previousWidget = dart.privateName(provider$, "_previousWidget");
  var _initError = dart.privateName(provider$, "_initError");
  const _is__CreateInheritedProviderState_default = Symbol('_is__CreateInheritedProviderState_default');
  provider$._CreateInheritedProviderState$ = dart.generic(T => {
    var __t$TTovoid = () => (__t$TTovoid = dart.constFn(dart.fnType(dart.void, [T])))();
    var __t$TToNvoid = () => (__t$TToNvoid = dart.constFn(dart.nullable(__t$TTovoid())))();
    var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
    var __t$BuildContextAndTNToT = () => (__t$BuildContextAndTNToT = dart.constFn(dart.fnType(T, [framework.BuildContext, __t$TN()])))();
    var __t$BuildContextAndTNToNT = () => (__t$BuildContextAndTNToNT = dart.constFn(dart.nullable(__t$BuildContextAndTNToT())))();
    var __t$InheritedContextOfTN = () => (__t$InheritedContextOfTN = dart.constFn(provider$.InheritedContext$(__t$TN())))();
    var __t$InheritedContextOfTNAndTToFn = () => (__t$InheritedContextOfTNAndTToFn = dart.constFn(dart.fnType(T$.VoidTovoid(), [__t$InheritedContextOfTN(), T])))();
    var __t$InheritedContextOfTNAndTToNFn = () => (__t$InheritedContextOfTNAndTToNFn = dart.constFn(dart.nullable(__t$InheritedContextOfTNAndTToFn())))();
    var __t$BuildContextAndTTovoid = () => (__t$BuildContextAndTTovoid = dart.constFn(dart.fnType(dart.void, [framework.BuildContext, T])))();
    var __t$BuildContextAndTToNvoid = () => (__t$BuildContextAndTToNvoid = dart.constFn(dart.nullable(__t$BuildContextAndTTovoid())))();
    var __t$DiagnosticsPropertyOfT = () => (__t$DiagnosticsPropertyOfT = dart.constFn(diagnostics.DiagnosticsProperty$(T)))();
    var __t$TAndTTobool = () => (__t$TAndTTobool = dart.constFn(dart.fnType(core.bool, [T, T])))();
    var __t$TAndTToNbool = () => (__t$TAndTToNbool = dart.constFn(dart.nullable(__t$TAndTTobool())))();
    class _CreateInheritedProviderState extends provider$._DelegateState$(T, provider$._CreateInheritedProvider$(T)) {
      get value() {
        let t20, t21;
        if (this[_didInitValue] && this[_initError] != null) {
          dart.throw(new core.StateError.new("Tried to read a provider that threw during the creation of its value.\n" + "The exception occurred during the creation of type " + dart.str(dart.wrapType(T)) + ".\n\n" + dart.str((t20 = this[_initError], t20 == null ? null : dart.toString(t20)))));
        }
        let _debugPreviousIsInInheritedProviderCreate = null;
        let _debugPreviousIsInInheritedProviderUpdate = null;
        if (!dart.fn(() => {
          _debugPreviousIsInInheritedProviderCreate = provider$.debugIsInInheritedProviderCreate;
          _debugPreviousIsInInheritedProviderUpdate = provider$.debugIsInInheritedProviderUpdate;
          return true;
        }, T$.VoidTobool())()) dart.assertFailed(null, I[21], 718, 12, "() {\n      _debugPreviousIsInInheritedProviderCreate =\n          debugIsInInheritedProviderCreate;\n      _debugPreviousIsInInheritedProviderUpdate =\n          debugIsInInheritedProviderUpdate;\n      return true;\n    }()");
        if (!this[_didInitValue]) {
          this[_didInitValue] = true;
          if (this.delegate.create != null) {
            if (!this.debugSetInheritedLock(true)) dart.assertFailed(null, I[21], 729, 16, "debugSetInheritedLock(true)");
            try {
              if (!dart.fn(() => {
                provider$.debugIsInInheritedProviderCreate = true;
                provider$.debugIsInInheritedProviderUpdate = false;
                return true;
              }, T$.VoidTobool())()) dart.assertFailed(null, I[21], 731, 18, "() {\n            debugIsInInheritedProviderCreate = true;\n            debugIsInInheritedProviderUpdate = false;\n            return true;\n          }()");
              this[_value] = dart.nullCheck(this.delegate.create)(dart.nullCheck(this.element));
            } catch (e$) {
              let e = dart.getThrown(e$);
              let stackTrace = dart.stackTrace(e$);
              if (core.Object.is(e)) {
                this[_initError] = new assertions.FlutterErrorDetails.new({library: "provider", exception: e, stack: stackTrace});
                dart.rethrow(e$);
              } else
                throw e$;
            } finally {
              if (!dart.fn(() => {
                provider$.debugIsInInheritedProviderCreate = dart.nullCheck(_debugPreviousIsInInheritedProviderCreate);
                provider$.debugIsInInheritedProviderUpdate = dart.nullCheck(_debugPreviousIsInInheritedProviderUpdate);
                return true;
              }, T$.VoidTobool())()) dart.assertFailed(null, I[21], 745, 18, "() {\n            debugIsInInheritedProviderCreate =\n                _debugPreviousIsInInheritedProviderCreate!;\n            debugIsInInheritedProviderUpdate =\n                _debugPreviousIsInInheritedProviderUpdate!;\n            return true;\n          }()");
            }
            if (!this.debugSetInheritedLock(false)) dart.assertFailed(null, I[21], 753, 16, "debugSetInheritedLock(false)");
            if (!dart.fn(() => {
              let t21;
              t21 = __t$TToNvoid().as(this.delegate.debugCheckInvalidValueType);
              t21 == null ? null : t21(T.as(this[_value]));
              return true;
            }, T$.VoidTobool())()) dart.assertFailed(null, I[21], 755, 16, "() {\n          delegate.debugCheckInvalidValueType?.call(_value as T);\n          return true;\n        }()");
          }
          if (__t$BuildContextAndTNToNT().as(this.delegate.update) != null) {
            try {
              if (!dart.fn(() => {
                provider$.debugIsInInheritedProviderCreate = false;
                provider$.debugIsInInheritedProviderUpdate = true;
                return true;
              }, T$.VoidTobool())()) dart.assertFailed(null, I[21], 762, 18, "() {\n            debugIsInInheritedProviderCreate = false;\n            debugIsInInheritedProviderUpdate = true;\n            return true;\n          }()");
              this[_value] = dart.nullCheck(__t$BuildContextAndTNToNT().as(this.delegate.update))(dart.nullCheck(this.element), this[_value]);
            } finally {
              if (!dart.fn(() => {
                provider$.debugIsInInheritedProviderCreate = dart.nullCheck(_debugPreviousIsInInheritedProviderCreate);
                provider$.debugIsInInheritedProviderUpdate = dart.nullCheck(_debugPreviousIsInInheritedProviderUpdate);
                return true;
              }, T$.VoidTobool())()) dart.assertFailed(null, I[21], 769, 18, "() {\n            debugIsInInheritedProviderCreate =\n                _debugPreviousIsInInheritedProviderCreate!;\n            debugIsInInheritedProviderUpdate =\n                _debugPreviousIsInInheritedProviderUpdate!;\n            return true;\n          }()");
            }
            if (!dart.fn(() => {
              let t21;
              t21 = __t$TToNvoid().as(this.delegate.debugCheckInvalidValueType);
              t21 == null ? null : t21(T.as(this[_value]));
              return true;
            }, T$.VoidTobool())()) dart.assertFailed(null, I[21], 778, 16, "() {\n          delegate.debugCheckInvalidValueType?.call(_value as T);\n          return true;\n        }()");
          }
        }
        dart.nullCheck(this.element)[_isNotifyDependentsEnabled] = false;
        this[_removeListener] == null ? this[_removeListener] = (t21 = __t$InheritedContextOfTNAndTToNFn().as(this.delegate.startListening), t21 == null ? null : t21(dart.nullCheck(this.element), T.as(this[_value]))) : null;
        dart.nullCheck(this.element)[_isNotifyDependentsEnabled] = true;
        if (!(__t$InheritedContextOfTNAndTToNFn().as(this.delegate.startListening) == null || this[_removeListener] != null)) dart.assertFailed(null, I[21], 788, 12, "delegate.startListening == null || _removeListener != null");
        return T.as(this[_value]);
      }
      dispose() {
        let t21, t21$;
        super.dispose();
        t21 = this[_removeListener];
        t21 == null ? null : t21();
        if (this[_didInitValue]) {
          t21$ = __t$BuildContextAndTToNvoid().as(this.delegate.dispose);
          t21$ == null ? null : t21$(dart.nullCheck(this.element), T.as(this[_value]));
        }
      }
      debugFillProperties(properties) {
        let t21;
        super.debugFillProperties(properties);
        if (this[_didInitValue]) {
          t21 = properties;
          (() => {
            t21.add(new (__t$DiagnosticsPropertyOfT()).new("value", this.value));
            t21.add(new diagnostics.FlagProperty.new("", {value: this[_removeListener] != null, defaultValue: false, ifTrue: "listening to value"}));
            return t21;
          })();
        } else {
          properties.add(new diagnostics.FlagProperty.new("value", {value: true, showName: true, ifTrue: "<not yet loaded>"}));
        }
      }
      build(opts) {
        let t22, t21;
        let isBuildFromExternalSources = opts && 'isBuildFromExternalSources' in opts ? opts.isBuildFromExternalSources : null;
        let shouldNotify = false;
        if (isBuildFromExternalSources && this[_didInitValue] && __t$BuildContextAndTNToNT().as(this.delegate.update) != null) {
          let previousValue = this[_value];
          let _debugPreviousIsInInheritedProviderCreate = null;
          let _debugPreviousIsInInheritedProviderUpdate = null;
          if (!dart.fn(() => {
            _debugPreviousIsInInheritedProviderCreate = provider$.debugIsInInheritedProviderCreate;
            _debugPreviousIsInInheritedProviderUpdate = provider$.debugIsInInheritedProviderUpdate;
            return true;
          }, T$.VoidTobool())()) dart.assertFailed(null, I[21], 839, 14, "() {\n        _debugPreviousIsInInheritedProviderCreate =\n            debugIsInInheritedProviderCreate;\n        _debugPreviousIsInInheritedProviderUpdate =\n            debugIsInInheritedProviderUpdate;\n        return true;\n      }()");
          try {
            if (!dart.fn(() => {
              provider$.debugIsInInheritedProviderCreate = false;
              provider$.debugIsInInheritedProviderUpdate = true;
              return true;
            }, T$.VoidTobool())()) dart.assertFailed(null, I[21], 847, 16, "() {\n          debugIsInInheritedProviderCreate = false;\n          debugIsInInheritedProviderUpdate = true;\n          return true;\n        }()");
            this[_value] = dart.nullCheck(__t$BuildContextAndTNToNT().as(this.delegate.update))(dart.nullCheck(this.element), T.as(this[_value]));
          } finally {
            if (!dart.fn(() => {
              provider$.debugIsInInheritedProviderCreate = dart.nullCheck(_debugPreviousIsInInheritedProviderCreate);
              provider$.debugIsInInheritedProviderUpdate = dart.nullCheck(_debugPreviousIsInInheritedProviderUpdate);
              return true;
            }, T$.VoidTobool())()) dart.assertFailed(null, I[21], 854, 16, "() {\n          debugIsInInheritedProviderCreate =\n              _debugPreviousIsInInheritedProviderCreate!;\n          debugIsInInheritedProviderUpdate =\n              _debugPreviousIsInInheritedProviderUpdate!;\n          return true;\n        }()");
          }
          if (__t$TAndTToNbool().as(this.delegate[_updateShouldNotify]) != null) {
            shouldNotify = dart.nullCheck(__t$TAndTToNbool().as(this.delegate[_updateShouldNotify]))(T.as(previousValue), T.as(this[_value]));
          } else {
            shouldNotify = !dart.equals(this[_value], previousValue);
          }
          if (shouldNotify) {
            if (!dart.fn(() => {
              let t21;
              t21 = __t$TToNvoid().as(this.delegate.debugCheckInvalidValueType);
              t21 == null ? null : t21(T.as(this[_value]));
              return true;
            }, T$.VoidTobool())()) dart.assertFailed(null, I[21], 873, 16, "() {\n          delegate.debugCheckInvalidValueType?.call(_value as T);\n          return true;\n        }()");
            if (this[_removeListener] != null) {
              dart.nullCheck(this[_removeListener])();
              this[_removeListener] = null;
            }
            t21 = this[_previousWidget];
            t21 == null ? null : (t22 = __t$BuildContextAndTToNvoid().as(t21.dispose), t22 == null ? null : t22(dart.nullCheck(this.element), T.as(previousValue)));
          }
        }
        if (shouldNotify) {
          dart.nullCheck(this.element)[_shouldNotifyDependents] = true;
        }
        this[_previousWidget] = this.delegate;
        return super.build({isBuildFromExternalSources: isBuildFromExternalSources});
      }
      get hasValue() {
        return this[_didInitValue];
      }
      static ['_#new#tearOff'](T) {
        return new (provider$._CreateInheritedProviderState$(T)).new();
      }
    }
    (_CreateInheritedProviderState.new = function() {
      this[_removeListener] = null;
      this[_didInitValue] = false;
      this[_value] = null;
      this[_previousWidget] = null;
      this[_initError] = null;
      _CreateInheritedProviderState.__proto__.new.call(this);
      ;
    }).prototype = _CreateInheritedProviderState.prototype;
    dart.addTypeTests(_CreateInheritedProviderState);
    _CreateInheritedProviderState.prototype[_is__CreateInheritedProviderState_default] = true;
    dart.addTypeCaches(_CreateInheritedProviderState);
    dart.setGetterSignature(_CreateInheritedProviderState, () => ({
      __proto__: dart.getGetters(_CreateInheritedProviderState.__proto__),
      value: T,
      hasValue: core.bool
    }));
    dart.setLibraryUri(_CreateInheritedProviderState, I[23]);
    dart.setFieldSignature(_CreateInheritedProviderState, () => ({
      __proto__: dart.getFields(_CreateInheritedProviderState.__proto__),
      [_removeListener]: dart.fieldType(dart.nullable(dart.fnType(dart.void, []))),
      [_didInitValue]: dart.fieldType(core.bool),
      [_value]: dart.fieldType(dart.nullable(T)),
      [_previousWidget]: dart.fieldType(dart.nullable(provider$._CreateInheritedProvider$(T))),
      [_initError]: dart.fieldType(dart.nullable(assertions.FlutterErrorDetails))
    }));
    return _CreateInheritedProviderState;
  });
  provider$._CreateInheritedProviderState = provider$._CreateInheritedProviderState$();
  dart.addTypeTests(provider$._CreateInheritedProviderState, _is__CreateInheritedProviderState_default);
  const _is__ValueInheritedProvider_default = Symbol('_is__ValueInheritedProvider_default');
  provider$._ValueInheritedProvider$ = dart.generic(T => {
    var __t$DiagnosticsPropertyOfT = () => (__t$DiagnosticsPropertyOfT = dart.constFn(diagnostics.DiagnosticsProperty$(T)))();
    var __t$_ValueInheritedProviderStateOfT = () => (__t$_ValueInheritedProviderStateOfT = dart.constFn(provider$._ValueInheritedProviderState$(T)))();
    class _ValueInheritedProvider extends provider$._Delegate$(T) {
      static ['_#new#tearOff'](T, opts) {
        let value = opts && 'value' in opts ? opts.value : null;
        let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
        let startListening = opts && 'startListening' in opts ? opts.startListening : null;
        return new (provider$._ValueInheritedProvider$(T)).new({value: value, updateShouldNotify: updateShouldNotify, startListening: startListening});
      }
      debugFillProperties(properties) {
        super.debugFillProperties(properties);
        properties.add(new (__t$DiagnosticsPropertyOfT()).new("value", this.value));
      }
      createState() {
        return new (__t$_ValueInheritedProviderStateOfT()).new();
      }
    }
    (_ValueInheritedProvider.new = function(opts) {
      let value = opts && 'value' in opts ? opts.value : null;
      let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
      let startListening = opts && 'startListening' in opts ? opts.startListening : null;
      this.value = value;
      this.startListening = startListening;
      this[_updateShouldNotify] = updateShouldNotify;
      ;
    }).prototype = _ValueInheritedProvider.prototype;
    dart.addTypeTests(_ValueInheritedProvider);
    _ValueInheritedProvider.prototype[_is__ValueInheritedProvider_default] = true;
    dart.addTypeCaches(_ValueInheritedProvider);
    dart.setMethodSignature(_ValueInheritedProvider, () => ({
      __proto__: dart.getMethods(_ValueInheritedProvider.__proto__),
      createState: dart.fnType(provider$._ValueInheritedProviderState$(T), [])
    }));
    dart.setLibraryUri(_ValueInheritedProvider, I[23]);
    dart.setFieldSignature(_ValueInheritedProvider, () => ({
      __proto__: dart.getFields(_ValueInheritedProvider.__proto__),
      value: dart.finalFieldType(T),
      [_updateShouldNotify]: dart.finalFieldType(dart.nullable(dart.fnType(core.bool, [T, T]))),
      startListening: dart.finalFieldType(dart.nullable(dart.fnType(dart.fnType(dart.void, []), [provider$.InheritedContext$(dart.nullable(T)), T])))
    }));
    return _ValueInheritedProvider;
  });
  provider$._ValueInheritedProvider = provider$._ValueInheritedProvider$();
  dart.addTypeTests(provider$._ValueInheritedProvider, _is__ValueInheritedProvider_default);
  const _is__ValueInheritedProviderState_default = Symbol('_is__ValueInheritedProviderState_default');
  provider$._ValueInheritedProviderState$ = dart.generic(T => {
    var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
    var __t$InheritedContextOfTN = () => (__t$InheritedContextOfTN = dart.constFn(provider$.InheritedContext$(__t$TN())))();
    var __t$InheritedContextOfTNAndTToFn = () => (__t$InheritedContextOfTNAndTToFn = dart.constFn(dart.fnType(T$.VoidTovoid(), [__t$InheritedContextOfTN(), T])))();
    var __t$InheritedContextOfTNAndTToNFn = () => (__t$InheritedContextOfTNAndTToNFn = dart.constFn(dart.nullable(__t$InheritedContextOfTNAndTToFn())))();
    var __t$_ValueInheritedProviderOfT = () => (__t$_ValueInheritedProviderOfT = dart.constFn(provider$._ValueInheritedProvider$(T)))();
    var __t$TAndTTobool = () => (__t$TAndTTobool = dart.constFn(dart.fnType(core.bool, [T, T])))();
    var __t$TAndTToNbool = () => (__t$TAndTToNbool = dart.constFn(dart.nullable(__t$TAndTTobool())))();
    class _ValueInheritedProviderState extends provider$._DelegateState$(T, provider$._ValueInheritedProvider$(T)) {
      get value() {
        let t21;
        dart.nullCheck(this.element)[_isNotifyDependentsEnabled] = false;
        this[_removeListener] == null ? this[_removeListener] = (t21 = __t$InheritedContextOfTNAndTToNFn().as(this.delegate.startListening), t21 == null ? null : t21(dart.nullCheck(this.element), this.delegate.value)) : null;
        dart.nullCheck(this.element)[_isNotifyDependentsEnabled] = true;
        if (!(__t$InheritedContextOfTNAndTToNFn().as(this.delegate.startListening) == null || this[_removeListener] != null)) dart.assertFailed(null, I[21], 928, 12, "delegate.startListening == null || _removeListener != null");
        return this.delegate.value;
      }
      willUpdateDelegate(newDelegate) {
        __t$_ValueInheritedProviderOfT().as(newDelegate);
        let shouldNotify = null;
        if (__t$TAndTToNbool().as(this.delegate[_updateShouldNotify]) != null) {
          shouldNotify = dart.nullCheck(__t$TAndTToNbool().as(this.delegate[_updateShouldNotify]))(this.delegate.value, newDelegate.value);
        } else {
          shouldNotify = !dart.equals(newDelegate.value, this.delegate.value);
        }
        if (shouldNotify && this[_removeListener] != null) {
          dart.nullCheck(this[_removeListener])();
          this[_removeListener] = null;
        }
        return shouldNotify;
      }
      dispose() {
        let t21;
        super.dispose();
        t21 = this[_removeListener];
        t21 == null ? null : t21();
      }
      debugFillProperties(properties) {
        super.debugFillProperties(properties);
        properties.add(new diagnostics.FlagProperty.new("", {value: this[_removeListener] != null, defaultValue: false, ifTrue: "listening to value"}));
      }
      get hasValue() {
        return true;
      }
      static ['_#new#tearOff'](T) {
        return new (provider$._ValueInheritedProviderState$(T)).new();
      }
    }
    (_ValueInheritedProviderState.new = function() {
      this[_removeListener] = null;
      _ValueInheritedProviderState.__proto__.new.call(this);
      ;
    }).prototype = _ValueInheritedProviderState.prototype;
    dart.addTypeTests(_ValueInheritedProviderState);
    _ValueInheritedProviderState.prototype[_is__ValueInheritedProviderState_default] = true;
    dart.addTypeCaches(_ValueInheritedProviderState);
    dart.setGetterSignature(_ValueInheritedProviderState, () => ({
      __proto__: dart.getGetters(_ValueInheritedProviderState.__proto__),
      value: T,
      hasValue: core.bool
    }));
    dart.setLibraryUri(_ValueInheritedProviderState, I[23]);
    dart.setFieldSignature(_ValueInheritedProviderState, () => ({
      __proto__: dart.getFields(_ValueInheritedProviderState.__proto__),
      [_removeListener]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [])))
    }));
    return _ValueInheritedProviderState;
  });
  provider$._ValueInheritedProviderState = provider$._ValueInheritedProviderState$();
  dart.addTypeTests(provider$._ValueInheritedProviderState, _is__ValueInheritedProviderState_default);
  var DeepCollectionEquality__unordered = dart.privateName(equality, "DeepCollectionEquality._unordered");
  var DeepCollectionEquality__base = dart.privateName(equality, "DeepCollectionEquality._base");
  provider$.debugPostEvent = function debugPostEvent(eventKind, event = C[33] || CT.C33) {
    if (provider$._debugPostEventOverride != null) {
      dart.nullCheck(provider$._debugPostEventOverride)(eventKind, event);
    } else {
      developer.postEvent(eventKind, event);
    }
  };
  provider$.spyPostEvent = function spyPostEvent() {
    if (!(provider$._debugPostEventOverride == null)) dart.assertFailed("postEvent is already spied", I[31], 22, 10, "_debugPostEventOverride == null");
    let spy = new provider$.PostEventSpy.__();
    provider$._debugPostEventOverride = dart.bind(spy, _postEvent);
    return spy;
  };
  provider$['SelectContext|select'] = function SelectContext$124select(T, R, $this, selector) {
    let t22;
    if (!!sliver.SliverWithKeepAliveWidget.is($this.widget)) dart.assertFailed("    Tried to use context.select inside a SliverList/SliderGridView.\n\n    This is likely a mistake, as instead of rebuilding only the item that cares\n    about the selected value, this would rebuild the entire list/grid.\n\n    To fix, add a `Builder` or extract the content of `itemBuilder` in a separate widget:\n\n    ```dart\n    ListView.builder(\n      itemBuilder: (context, index) {\n        return Builder(builder: (context) {\n          final todo = context.select((TodoList list) => list[index]);\n          return Text(todo.name);\n        });\n      },\n    );\n    ```\n    ", I[21], 247, 12, "widget is! SliverWithKeepAliveWidget");
    if (!(layout_builder.LayoutBuilder.is($this.widget) || $this.debugDoingBuild)) dart.assertFailed("Tried to use `context.select` outside of the `build` method of a widget.\n\nAny usage other than inside the `build` method of a widget are not supported.\n", I[21], 266, 12, "widget is LayoutBuilder || debugDoingBuild");
    let inheritedElement = provider$.Provider._inheritedElementOf(T, $this);
    try {
      let value = (t22 = inheritedElement, t22 == null ? null : t22.value);
      if (!T.is(value)) {
        dart.throw(new provider$.ProviderNullException.new(dart.wrapType(T), $this.widget[$runtimeType]));
      }
      if (!dart.fn(() => {
        provider$._debugIsSelecting = true;
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[21], 279, 14, "() {\n        _debugIsSelecting = true;\n        return true;\n      }()");
      let selected = selector(value);
      if (inheritedElement != null) {
        $this.dependOnInheritedElement(inheritedElement, {aspect: dart.fn(newValue => {
            if (!T.is(newValue)) {
              dart.throw(new provider$.ProviderNullException.new(dart.wrapType(T), $this.widget[$runtimeType]));
            }
            return !(C[34] || CT.C34).equals(selector(newValue), selected);
          }, dart.fnType(core.bool, [dart.nullable(T)]))});
      } else {
        $this.dependOnInheritedWidgetOfExactType(provider$._InheritedProviderScope$(dart.nullable(T)));
      }
      return selected;
    } finally {
      if (!dart.fn(() => {
        provider$._debugIsSelecting = false;
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[21], 304, 14, "() {\n        _debugIsSelecting = false;\n        return true;\n      }()");
    }
  };
  provider$['SelectContext|get#select'] = function SelectContext$124get$35select($this) {
    return dart.fn((T, R, selector) => provider$['SelectContext|select'](T, R, $this, selector), T$.FnToR());
  };
  provider$['ReadContext|read'] = function ReadContext$124read(T, $this) {
    return provider$.Provider.of(T, $this, {listen: false});
  };
  provider$['ReadContext|get#read'] = function ReadContext$124get$35read($this) {
    return dart.fn(T => provider$['ReadContext|read'](T, $this), T$.VoidToT());
  };
  provider$['WatchContext|watch'] = function WatchContext$124watch(T, $this) {
    return provider$.Provider.of(T, $this);
  };
  provider$['WatchContext|get#watch'] = function WatchContext$124get$35watch($this) {
    return dart.fn(T => provider$['WatchContext|watch'](T, $this), T$.VoidToT());
  };
  dart.defineLazy(provider$, {
    /*provider$._isSoundMode*/get _isSoundMode() {
      return !T$.ListOfint().is(T$.JSArrayOfintN().of([]));
    },
    /*provider$._debugPostEventOverride*/get _debugPostEventOverride() {
      return null;
    },
    set _debugPostEventOverride(value) {},
    /*provider$._debugIsSelecting*/get _debugIsSelecting() {
      return false;
    },
    set _debugIsSelecting(value) {},
    /*provider$.debugIsInInheritedProviderUpdate*/get debugIsInInheritedProviderUpdate() {
      return false;
    },
    set debugIsInInheritedProviderUpdate(value) {},
    /*provider$.debugIsInInheritedProviderCreate*/get debugIsInInheritedProviderCreate() {
      return false;
    },
    set debugIsInInheritedProviderCreate(value) {}
  }, false);
  const _is_ProxyProvider0_default = Symbol('_is_ProxyProvider0_default');
  proxy_provider.ProxyProvider0$ = dart.generic(R => {
    var __t$RTovoid = () => (__t$RTovoid = dart.constFn(dart.fnType(dart.void, [R])))();
    class ProxyProvider0 extends provider$.InheritedProvider$(R) {
      static ['_#new#tearOff'](R, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let create = opts && 'create' in opts ? opts.create : null;
        let update = opts && 'update' in opts ? opts.update : null;
        let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
        let dispose = opts && 'dispose' in opts ? opts.dispose : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (proxy_provider.ProxyProvider0$(R)).new({key: key, create: create, update: update, updateShouldNotify: updateShouldNotify, dispose: dispose, lazy: lazy, builder: builder, child: child});
      }
    }
    (ProxyProvider0.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let update = opts && 'update' in opts ? opts.update : null;
      let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
      let dispose = opts && 'dispose' in opts ? opts.dispose : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      ProxyProvider0.__proto__.new.call(this, {key: key, lazy: lazy, builder: builder, create: create, update: update, dispose: dispose, updateShouldNotify: updateShouldNotify, debugCheckInvalidValueType: dart.fn(value => {
          let t27;
          t27 = provider$.Provider.debugCheckInvalidValueType;
          return t27 == null ? null : t27(R, value);
        }, __t$RTovoid()), child: child});
      ;
    }).prototype = ProxyProvider0.prototype;
    dart.addTypeTests(ProxyProvider0);
    ProxyProvider0.prototype[_is_ProxyProvider0_default] = true;
    dart.addTypeCaches(ProxyProvider0);
    dart.setLibraryUri(ProxyProvider0, I[32]);
    return ProxyProvider0;
  });
  proxy_provider.ProxyProvider0 = proxy_provider.ProxyProvider0$();
  dart.addTypeTests(proxy_provider.ProxyProvider0, _is_ProxyProvider0_default);
  const _is_ProxyProvider_default = Symbol('_is_ProxyProvider_default');
  proxy_provider.ProxyProvider$ = dart.generic((T, R) => {
    var __t$RN = () => (__t$RN = dart.constFn(dart.nullable(R)))();
    var __t$BuildContextAndRNToR = () => (__t$BuildContextAndRNToR = dart.constFn(dart.fnType(R, [framework.BuildContext, __t$RN()])))();
    class ProxyProvider extends proxy_provider.ProxyProvider0$(R) {
      static ['_#new#tearOff'](T, R, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let create = opts && 'create' in opts ? opts.create : null;
        let update = opts && 'update' in opts ? opts.update : null;
        let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
        let dispose = opts && 'dispose' in opts ? opts.dispose : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (proxy_provider.ProxyProvider$(T, R)).new({key: key, create: create, update: update, updateShouldNotify: updateShouldNotify, dispose: dispose, lazy: lazy, builder: builder, child: child});
      }
    }
    (ProxyProvider.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let update = opts && 'update' in opts ? opts.update : null;
      let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
      let dispose = opts && 'dispose' in opts ? opts.dispose : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      ProxyProvider.__proto__.new.call(this, {key: key, lazy: lazy, builder: builder, create: create, update: dart.fn((context, value) => update(context, provider$.Provider.of(T, context), value), __t$BuildContextAndRNToR()), updateShouldNotify: updateShouldNotify, dispose: dispose, child: child});
      ;
    }).prototype = ProxyProvider.prototype;
    dart.addTypeTests(ProxyProvider);
    ProxyProvider.prototype[_is_ProxyProvider_default] = true;
    dart.addTypeCaches(ProxyProvider);
    dart.setLibraryUri(ProxyProvider, I[32]);
    return ProxyProvider;
  });
  proxy_provider.ProxyProvider = proxy_provider.ProxyProvider$();
  dart.addTypeTests(proxy_provider.ProxyProvider, _is_ProxyProvider_default);
  const _is_ProxyProvider2_default = Symbol('_is_ProxyProvider2_default');
  proxy_provider.ProxyProvider2$ = dart.generic((T, T2, R) => {
    var __t$RN = () => (__t$RN = dart.constFn(dart.nullable(R)))();
    var __t$BuildContextAndRNToR = () => (__t$BuildContextAndRNToR = dart.constFn(dart.fnType(R, [framework.BuildContext, __t$RN()])))();
    class ProxyProvider2 extends proxy_provider.ProxyProvider0$(R) {
      static ['_#new#tearOff'](T, T2, R, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let create = opts && 'create' in opts ? opts.create : null;
        let update = opts && 'update' in opts ? opts.update : null;
        let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
        let dispose = opts && 'dispose' in opts ? opts.dispose : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (proxy_provider.ProxyProvider2$(T, T2, R)).new({key: key, create: create, update: update, updateShouldNotify: updateShouldNotify, dispose: dispose, lazy: lazy, builder: builder, child: child});
      }
    }
    (ProxyProvider2.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let update = opts && 'update' in opts ? opts.update : null;
      let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
      let dispose = opts && 'dispose' in opts ? opts.dispose : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      ProxyProvider2.__proto__.new.call(this, {key: key, lazy: lazy, builder: builder, create: create, update: dart.fn((context, value) => update(context, provider$.Provider.of(T, context), provider$.Provider.of(T2, context), value), __t$BuildContextAndRNToR()), updateShouldNotify: updateShouldNotify, dispose: dispose, child: child});
      ;
    }).prototype = ProxyProvider2.prototype;
    dart.addTypeTests(ProxyProvider2);
    ProxyProvider2.prototype[_is_ProxyProvider2_default] = true;
    dart.addTypeCaches(ProxyProvider2);
    dart.setLibraryUri(ProxyProvider2, I[32]);
    return ProxyProvider2;
  });
  proxy_provider.ProxyProvider2 = proxy_provider.ProxyProvider2$();
  dart.addTypeTests(proxy_provider.ProxyProvider2, _is_ProxyProvider2_default);
  const _is_ProxyProvider3_default = Symbol('_is_ProxyProvider3_default');
  proxy_provider.ProxyProvider3$ = dart.generic((T, T2, T3, R) => {
    var __t$RN = () => (__t$RN = dart.constFn(dart.nullable(R)))();
    var __t$BuildContextAndRNToR = () => (__t$BuildContextAndRNToR = dart.constFn(dart.fnType(R, [framework.BuildContext, __t$RN()])))();
    class ProxyProvider3 extends proxy_provider.ProxyProvider0$(R) {
      static ['_#new#tearOff'](T, T2, T3, R, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let create = opts && 'create' in opts ? opts.create : null;
        let update = opts && 'update' in opts ? opts.update : null;
        let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
        let dispose = opts && 'dispose' in opts ? opts.dispose : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (proxy_provider.ProxyProvider3$(T, T2, T3, R)).new({key: key, create: create, update: update, updateShouldNotify: updateShouldNotify, dispose: dispose, lazy: lazy, builder: builder, child: child});
      }
    }
    (ProxyProvider3.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let update = opts && 'update' in opts ? opts.update : null;
      let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
      let dispose = opts && 'dispose' in opts ? opts.dispose : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      ProxyProvider3.__proto__.new.call(this, {key: key, lazy: lazy, builder: builder, create: create, update: dart.fn((context, value) => update(context, provider$.Provider.of(T, context), provider$.Provider.of(T2, context), provider$.Provider.of(T3, context), value), __t$BuildContextAndRNToR()), updateShouldNotify: updateShouldNotify, dispose: dispose, child: child});
      ;
    }).prototype = ProxyProvider3.prototype;
    dart.addTypeTests(ProxyProvider3);
    ProxyProvider3.prototype[_is_ProxyProvider3_default] = true;
    dart.addTypeCaches(ProxyProvider3);
    dart.setLibraryUri(ProxyProvider3, I[32]);
    return ProxyProvider3;
  });
  proxy_provider.ProxyProvider3 = proxy_provider.ProxyProvider3$();
  dart.addTypeTests(proxy_provider.ProxyProvider3, _is_ProxyProvider3_default);
  const _is_ProxyProvider4_default = Symbol('_is_ProxyProvider4_default');
  proxy_provider.ProxyProvider4$ = dart.generic((T, T2, T3, T4, R) => {
    var __t$RN = () => (__t$RN = dart.constFn(dart.nullable(R)))();
    var __t$BuildContextAndRNToR = () => (__t$BuildContextAndRNToR = dart.constFn(dart.fnType(R, [framework.BuildContext, __t$RN()])))();
    class ProxyProvider4 extends proxy_provider.ProxyProvider0$(R) {
      static ['_#new#tearOff'](T, T2, T3, T4, R, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let create = opts && 'create' in opts ? opts.create : null;
        let update = opts && 'update' in opts ? opts.update : null;
        let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
        let dispose = opts && 'dispose' in opts ? opts.dispose : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (proxy_provider.ProxyProvider4$(T, T2, T3, T4, R)).new({key: key, create: create, update: update, updateShouldNotify: updateShouldNotify, dispose: dispose, lazy: lazy, builder: builder, child: child});
      }
    }
    (ProxyProvider4.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let update = opts && 'update' in opts ? opts.update : null;
      let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
      let dispose = opts && 'dispose' in opts ? opts.dispose : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      ProxyProvider4.__proto__.new.call(this, {key: key, lazy: lazy, builder: builder, create: create, update: dart.fn((context, value) => update(context, provider$.Provider.of(T, context), provider$.Provider.of(T2, context), provider$.Provider.of(T3, context), provider$.Provider.of(T4, context), value), __t$BuildContextAndRNToR()), updateShouldNotify: updateShouldNotify, dispose: dispose, child: child});
      ;
    }).prototype = ProxyProvider4.prototype;
    dart.addTypeTests(ProxyProvider4);
    ProxyProvider4.prototype[_is_ProxyProvider4_default] = true;
    dart.addTypeCaches(ProxyProvider4);
    dart.setLibraryUri(ProxyProvider4, I[32]);
    return ProxyProvider4;
  });
  proxy_provider.ProxyProvider4 = proxy_provider.ProxyProvider4$();
  dart.addTypeTests(proxy_provider.ProxyProvider4, _is_ProxyProvider4_default);
  const _is_ProxyProvider5_default = Symbol('_is_ProxyProvider5_default');
  proxy_provider.ProxyProvider5$ = dart.generic((T, T2, T3, T4, T5, R) => {
    var __t$RN = () => (__t$RN = dart.constFn(dart.nullable(R)))();
    var __t$BuildContextAndRNToR = () => (__t$BuildContextAndRNToR = dart.constFn(dart.fnType(R, [framework.BuildContext, __t$RN()])))();
    class ProxyProvider5 extends proxy_provider.ProxyProvider0$(R) {
      static ['_#new#tearOff'](T, T2, T3, T4, T5, R, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let create = opts && 'create' in opts ? opts.create : null;
        let update = opts && 'update' in opts ? opts.update : null;
        let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
        let dispose = opts && 'dispose' in opts ? opts.dispose : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (proxy_provider.ProxyProvider5$(T, T2, T3, T4, T5, R)).new({key: key, create: create, update: update, updateShouldNotify: updateShouldNotify, dispose: dispose, lazy: lazy, builder: builder, child: child});
      }
    }
    (ProxyProvider5.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let update = opts && 'update' in opts ? opts.update : null;
      let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
      let dispose = opts && 'dispose' in opts ? opts.dispose : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      ProxyProvider5.__proto__.new.call(this, {key: key, lazy: lazy, builder: builder, create: create, update: dart.fn((context, value) => update(context, provider$.Provider.of(T, context), provider$.Provider.of(T2, context), provider$.Provider.of(T3, context), provider$.Provider.of(T4, context), provider$.Provider.of(T5, context), value), __t$BuildContextAndRNToR()), updateShouldNotify: updateShouldNotify, dispose: dispose, child: child});
      ;
    }).prototype = ProxyProvider5.prototype;
    dart.addTypeTests(ProxyProvider5);
    ProxyProvider5.prototype[_is_ProxyProvider5_default] = true;
    dart.addTypeCaches(ProxyProvider5);
    dart.setLibraryUri(ProxyProvider5, I[32]);
    return ProxyProvider5;
  });
  proxy_provider.ProxyProvider5 = proxy_provider.ProxyProvider5$();
  dart.addTypeTests(proxy_provider.ProxyProvider5, _is_ProxyProvider5_default);
  const _is_ProxyProvider6_default = Symbol('_is_ProxyProvider6_default');
  proxy_provider.ProxyProvider6$ = dart.generic((T, T2, T3, T4, T5, T6, R) => {
    var __t$RN = () => (__t$RN = dart.constFn(dart.nullable(R)))();
    var __t$BuildContextAndRNToR = () => (__t$BuildContextAndRNToR = dart.constFn(dart.fnType(R, [framework.BuildContext, __t$RN()])))();
    class ProxyProvider6 extends proxy_provider.ProxyProvider0$(R) {
      static ['_#new#tearOff'](T, T2, T3, T4, T5, T6, R, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let create = opts && 'create' in opts ? opts.create : null;
        let update = opts && 'update' in opts ? opts.update : null;
        let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
        let dispose = opts && 'dispose' in opts ? opts.dispose : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (proxy_provider.ProxyProvider6$(T, T2, T3, T4, T5, T6, R)).new({key: key, create: create, update: update, updateShouldNotify: updateShouldNotify, dispose: dispose, lazy: lazy, builder: builder, child: child});
      }
    }
    (ProxyProvider6.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let update = opts && 'update' in opts ? opts.update : null;
      let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
      let dispose = opts && 'dispose' in opts ? opts.dispose : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      ProxyProvider6.__proto__.new.call(this, {key: key, lazy: lazy, builder: builder, create: create, update: dart.fn((context, value) => update(context, provider$.Provider.of(T, context), provider$.Provider.of(T2, context), provider$.Provider.of(T3, context), provider$.Provider.of(T4, context), provider$.Provider.of(T5, context), provider$.Provider.of(T6, context), value), __t$BuildContextAndRNToR()), updateShouldNotify: updateShouldNotify, dispose: dispose, child: child});
      ;
    }).prototype = ProxyProvider6.prototype;
    dart.addTypeTests(ProxyProvider6);
    ProxyProvider6.prototype[_is_ProxyProvider6_default] = true;
    dart.addTypeCaches(ProxyProvider6);
    dart.setLibraryUri(ProxyProvider6, I[32]);
    return ProxyProvider6;
  });
  proxy_provider.ProxyProvider6 = proxy_provider.ProxyProvider6$();
  dart.addTypeTests(proxy_provider.ProxyProvider6, _is_ProxyProvider6_default);
  reassemble_handler.ReassembleHandler = class ReassembleHandler extends core.Object {};
  (reassemble_handler.ReassembleHandler.new = function() {
    ;
  }).prototype = reassemble_handler.ReassembleHandler.prototype;
  dart.addTypeTests(reassemble_handler.ReassembleHandler);
  dart.addTypeCaches(reassemble_handler.ReassembleHandler);
  dart.setLibraryUri(reassemble_handler.ReassembleHandler, I[33]);
  var builder$7 = dart.privateName(selector$, "Selector0.builder");
  var selector$0 = dart.privateName(selector$, "Selector0.selector");
  var _shouldRebuild = dart.privateName(selector$, "_shouldRebuild");
  var _child$0 = dart.privateName(nested, "SingleChildStatefulWidget._child");
  nested.SingleChildStatefulWidget = class SingleChildStatefulWidget extends framework.StatefulWidget {
    get [_child$]() {
      return this[_child$0];
    }
    set [_child$](value) {
      super[_child$] = value;
    }
    createElement() {
      return new nested.SingleChildStatefulElement.new(this);
    }
  };
  (nested.SingleChildStatefulWidget.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let child = opts && 'child' in opts ? opts.child : null;
    this[_child$0] = child;
    nested.SingleChildStatefulWidget.__proto__.new.call(this, {key: key});
    ;
  }).prototype = nested.SingleChildStatefulWidget.prototype;
  dart.addTypeTests(nested.SingleChildStatefulWidget);
  dart.addTypeCaches(nested.SingleChildStatefulWidget);
  nested.SingleChildStatefulWidget[dart.implements] = () => [nested.SingleChildWidget];
  dart.setMethodSignature(nested.SingleChildStatefulWidget, () => ({
    __proto__: dart.getMethods(nested.SingleChildStatefulWidget.__proto__),
    createElement: dart.fnType(nested.SingleChildStatefulElement, [])
  }));
  dart.setLibraryUri(nested.SingleChildStatefulWidget, I[22]);
  dart.setFieldSignature(nested.SingleChildStatefulWidget, () => ({
    __proto__: dart.getFields(nested.SingleChildStatefulWidget.__proto__),
    [_child$]: dart.finalFieldType(dart.nullable(framework.Widget))
  }));
  const _is_Selector0_default = Symbol('_is_Selector0_default');
  selector$.Selector0$ = dart.generic(T => {
    var __t$_Selector0StateOfT = () => (__t$_Selector0StateOfT = dart.constFn(selector$._Selector0State$(T)))();
    class Selector0 extends nested.SingleChildStatefulWidget {
      get builder() {
        return this[builder$7];
      }
      set builder(value) {
        super.builder = value;
      }
      get selector() {
        return this[selector$0];
      }
      set selector(value) {
        super.selector = value;
      }
      static ['_#new#tearOff'](T, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let selector = opts && 'selector' in opts ? opts.selector : null;
        let shouldRebuild = opts && 'shouldRebuild' in opts ? opts.shouldRebuild : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (selector$.Selector0$(T)).new({key: key, builder: builder, selector: selector, shouldRebuild: shouldRebuild, child: child});
      }
      createState() {
        return new (__t$_Selector0StateOfT()).new();
      }
    }
    (Selector0.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let selector = opts && 'selector' in opts ? opts.selector : null;
      let shouldRebuild = opts && 'shouldRebuild' in opts ? opts.shouldRebuild : null;
      let child = opts && 'child' in opts ? opts.child : null;
      this[builder$7] = builder;
      this[selector$0] = selector;
      this[_shouldRebuild] = shouldRebuild;
      Selector0.__proto__.new.call(this, {key: key, child: child});
      ;
    }).prototype = Selector0.prototype;
    dart.addTypeTests(Selector0);
    Selector0.prototype[_is_Selector0_default] = true;
    dart.addTypeCaches(Selector0);
    dart.setMethodSignature(Selector0, () => ({
      __proto__: dart.getMethods(Selector0.__proto__),
      createState: dart.fnType(selector$._Selector0State$(T), [])
    }));
    dart.setLibraryUri(Selector0, I[34]);
    dart.setFieldSignature(Selector0, () => ({
      __proto__: dart.getFields(Selector0.__proto__),
      builder: dart.finalFieldType(dart.fnType(framework.Widget, [framework.BuildContext, T, dart.nullable(framework.Widget)])),
      selector: dart.finalFieldType(dart.fnType(T, [framework.BuildContext])),
      [_shouldRebuild]: dart.finalFieldType(dart.nullable(dart.fnType(core.bool, [T, T])))
    }));
    return Selector0;
  });
  selector$.Selector0 = selector$.Selector0$();
  dart.addTypeTests(selector$.Selector0, _is_Selector0_default);
  var value$ = dart.privateName(selector$, "_Selector0State.value");
  const _is_SingleChildState_default = Symbol('_is_SingleChildState_default');
  nested.SingleChildState$ = dart.generic(T => {
    class SingleChildState extends framework.State$(T) {
      build(context) {
        return this.buildWithChild(context, this.widget[_child$]);
      }
    }
    (SingleChildState.new = function() {
      SingleChildState.__proto__.new.call(this);
      ;
    }).prototype = SingleChildState.prototype;
    dart.addTypeTests(SingleChildState);
    SingleChildState.prototype[_is_SingleChildState_default] = true;
    dart.addTypeCaches(SingleChildState);
    dart.setMethodSignature(SingleChildState, () => ({
      __proto__: dart.getMethods(SingleChildState.__proto__),
      build: dart.fnType(framework.Widget, [framework.BuildContext])
    }));
    dart.setLibraryUri(SingleChildState, I[22]);
    return SingleChildState;
  });
  nested.SingleChildState = nested.SingleChildState$();
  dart.addTypeTests(nested.SingleChildState, _is_SingleChildState_default);
  const _is__Selector0State_default = Symbol('_is__Selector0State_default');
  selector$._Selector0State$ = dart.generic(T => {
    var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
    var __t$TAndTTobool = () => (__t$TAndTTobool = dart.constFn(dart.fnType(core.bool, [T, T])))();
    var __t$TAndTToNbool = () => (__t$TAndTToNbool = dart.constFn(dart.nullable(__t$TAndTTobool())))();
    var __t$BuildContextAndTAndWidgetNToWidget = () => (__t$BuildContextAndTAndWidgetNToWidget = dart.constFn(dart.fnType(framework.Widget, [framework.BuildContext, T, T$.WidgetN()])))();
    var __t$DiagnosticsPropertyOfT = () => (__t$DiagnosticsPropertyOfT = dart.constFn(diagnostics.DiagnosticsProperty$(T)))();
    class _Selector0State extends nested.SingleChildState$(selector$.Selector0$(T)) {
      get value() {
        return this[value$];
      }
      set value(value) {
        this[value$] = __t$TN().as(value);
      }
      buildWithChild(context, child) {
        let t28, t27, t30, t29, t28$, t27$;
        let selected = (t27 = this.widget, t28 = context, t27.selector(t28));
        let shouldInvalidateCache = !dart.equals(this.oldWidget, this.widget) || __t$TAndTToNbool().as(this.widget[_shouldRebuild]) != null && dart.nullCheck(__t$TAndTToNbool().as(this.widget[_shouldRebuild]))(T.as(this.value), selected) || __t$TAndTToNbool().as(this.widget[_shouldRebuild]) == null && !(C[34] || CT.C34).equals(this.value, selected);
        if (shouldInvalidateCache) {
          this.value = selected;
          this.oldWidget = this.widget;
          this.cache = (t27$ = this.widget, t28$ = context, t29 = selected, t30 = child, __t$BuildContextAndTAndWidgetNToWidget().as(t27$.builder)(t28$, t29, t30));
        }
        return dart.nullCheck(this.cache);
      }
      debugFillProperties(properties) {
        super.debugFillProperties(properties);
        properties.add(new (__t$DiagnosticsPropertyOfT()).new("value", this.value));
      }
      static ['_#new#tearOff'](T) {
        return new (selector$._Selector0State$(T)).new();
      }
    }
    (_Selector0State.new = function() {
      this[value$] = null;
      this.cache = null;
      this.oldWidget = null;
      _Selector0State.__proto__.new.call(this);
      ;
    }).prototype = _Selector0State.prototype;
    dart.addTypeTests(_Selector0State);
    _Selector0State.prototype[_is__Selector0State_default] = true;
    dart.addTypeCaches(_Selector0State);
    dart.setMethodSignature(_Selector0State, () => ({
      __proto__: dart.getMethods(_Selector0State.__proto__),
      buildWithChild: dart.fnType(framework.Widget, [framework.BuildContext, dart.nullable(framework.Widget)])
    }));
    dart.setLibraryUri(_Selector0State, I[34]);
    dart.setFieldSignature(_Selector0State, () => ({
      __proto__: dart.getFields(_Selector0State.__proto__),
      value: dart.fieldType(dart.nullable(T)),
      cache: dart.fieldType(dart.nullable(framework.Widget)),
      oldWidget: dart.fieldType(dart.nullable(framework.Widget))
    }));
    return _Selector0State;
  });
  selector$._Selector0State = selector$._Selector0State$();
  dart.addTypeTests(selector$._Selector0State, _is__Selector0State_default);
  const _is_Selector_default = Symbol('_is_Selector_default');
  selector$.Selector$ = dart.generic((A, S) => {
    var __t$BuildContextToS = () => (__t$BuildContextToS = dart.constFn(dart.fnType(S, [framework.BuildContext])))();
    class Selector extends selector$.Selector0$(S) {
      static ['_#new#tearOff'](A, S, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let selector = opts && 'selector' in opts ? opts.selector : null;
        let shouldRebuild = opts && 'shouldRebuild' in opts ? opts.shouldRebuild : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (selector$.Selector$(A, S)).new({key: key, builder: builder, selector: selector, shouldRebuild: shouldRebuild, child: child});
      }
    }
    (Selector.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let selector = opts && 'selector' in opts ? opts.selector : null;
      let shouldRebuild = opts && 'shouldRebuild' in opts ? opts.shouldRebuild : null;
      let child = opts && 'child' in opts ? opts.child : null;
      Selector.__proto__.new.call(this, {key: key, shouldRebuild: shouldRebuild, builder: builder, selector: dart.fn(context => selector(context, provider$.Provider.of(A, context)), __t$BuildContextToS()), child: child});
      ;
    }).prototype = Selector.prototype;
    dart.addTypeTests(Selector);
    Selector.prototype[_is_Selector_default] = true;
    dart.addTypeCaches(Selector);
    dart.setLibraryUri(Selector, I[34]);
    return Selector;
  });
  selector$.Selector = selector$.Selector$();
  dart.addTypeTests(selector$.Selector, _is_Selector_default);
  const _is_Selector2_default = Symbol('_is_Selector2_default');
  selector$.Selector2$ = dart.generic((A, B, S) => {
    var __t$BuildContextToS = () => (__t$BuildContextToS = dart.constFn(dart.fnType(S, [framework.BuildContext])))();
    class Selector2 extends selector$.Selector0$(S) {
      static ['_#new#tearOff'](A, B, S, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let selector = opts && 'selector' in opts ? opts.selector : null;
        let shouldRebuild = opts && 'shouldRebuild' in opts ? opts.shouldRebuild : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (selector$.Selector2$(A, B, S)).new({key: key, builder: builder, selector: selector, shouldRebuild: shouldRebuild, child: child});
      }
    }
    (Selector2.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let selector = opts && 'selector' in opts ? opts.selector : null;
      let shouldRebuild = opts && 'shouldRebuild' in opts ? opts.shouldRebuild : null;
      let child = opts && 'child' in opts ? opts.child : null;
      Selector2.__proto__.new.call(this, {key: key, shouldRebuild: shouldRebuild, builder: builder, selector: dart.fn(context => selector(context, provider$.Provider.of(A, context), provider$.Provider.of(B, context)), __t$BuildContextToS()), child: child});
      ;
    }).prototype = Selector2.prototype;
    dart.addTypeTests(Selector2);
    Selector2.prototype[_is_Selector2_default] = true;
    dart.addTypeCaches(Selector2);
    dart.setLibraryUri(Selector2, I[34]);
    return Selector2;
  });
  selector$.Selector2 = selector$.Selector2$();
  dart.addTypeTests(selector$.Selector2, _is_Selector2_default);
  const _is_Selector3_default = Symbol('_is_Selector3_default');
  selector$.Selector3$ = dart.generic((A, B, C, S) => {
    var __t$BuildContextToS = () => (__t$BuildContextToS = dart.constFn(dart.fnType(S, [framework.BuildContext])))();
    class Selector3 extends selector$.Selector0$(S) {
      static ['_#new#tearOff'](A, B, C, S, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let selector = opts && 'selector' in opts ? opts.selector : null;
        let shouldRebuild = opts && 'shouldRebuild' in opts ? opts.shouldRebuild : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (selector$.Selector3$(A, B, C, S)).new({key: key, builder: builder, selector: selector, shouldRebuild: shouldRebuild, child: child});
      }
    }
    (Selector3.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let selector = opts && 'selector' in opts ? opts.selector : null;
      let shouldRebuild = opts && 'shouldRebuild' in opts ? opts.shouldRebuild : null;
      let child = opts && 'child' in opts ? opts.child : null;
      Selector3.__proto__.new.call(this, {key: key, shouldRebuild: shouldRebuild, builder: builder, selector: dart.fn(context => selector(context, provider$.Provider.of(A, context), provider$.Provider.of(B, context), provider$.Provider.of(C, context)), __t$BuildContextToS()), child: child});
      ;
    }).prototype = Selector3.prototype;
    dart.addTypeTests(Selector3);
    Selector3.prototype[_is_Selector3_default] = true;
    dart.addTypeCaches(Selector3);
    dart.setLibraryUri(Selector3, I[34]);
    return Selector3;
  });
  selector$.Selector3 = selector$.Selector3$();
  dart.addTypeTests(selector$.Selector3, _is_Selector3_default);
  const _is_Selector4_default = Symbol('_is_Selector4_default');
  selector$.Selector4$ = dart.generic((A, B, C, D, S) => {
    var __t$BuildContextToS = () => (__t$BuildContextToS = dart.constFn(dart.fnType(S, [framework.BuildContext])))();
    class Selector4 extends selector$.Selector0$(S) {
      static ['_#new#tearOff'](A, B, C, D, S, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let selector = opts && 'selector' in opts ? opts.selector : null;
        let shouldRebuild = opts && 'shouldRebuild' in opts ? opts.shouldRebuild : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (selector$.Selector4$(A, B, C, D, S)).new({key: key, builder: builder, selector: selector, shouldRebuild: shouldRebuild, child: child});
      }
    }
    (Selector4.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let selector = opts && 'selector' in opts ? opts.selector : null;
      let shouldRebuild = opts && 'shouldRebuild' in opts ? opts.shouldRebuild : null;
      let child = opts && 'child' in opts ? opts.child : null;
      Selector4.__proto__.new.call(this, {key: key, shouldRebuild: shouldRebuild, builder: builder, selector: dart.fn(context => selector(context, provider$.Provider.of(A, context), provider$.Provider.of(B, context), provider$.Provider.of(C, context), provider$.Provider.of(D, context)), __t$BuildContextToS()), child: child});
      ;
    }).prototype = Selector4.prototype;
    dart.addTypeTests(Selector4);
    Selector4.prototype[_is_Selector4_default] = true;
    dart.addTypeCaches(Selector4);
    dart.setLibraryUri(Selector4, I[34]);
    return Selector4;
  });
  selector$.Selector4 = selector$.Selector4$();
  dart.addTypeTests(selector$.Selector4, _is_Selector4_default);
  const _is_Selector5_default = Symbol('_is_Selector5_default');
  selector$.Selector5$ = dart.generic((A, B, C, D, E, S) => {
    var __t$BuildContextToS = () => (__t$BuildContextToS = dart.constFn(dart.fnType(S, [framework.BuildContext])))();
    class Selector5 extends selector$.Selector0$(S) {
      static ['_#new#tearOff'](A, B, C, D, E, S, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let selector = opts && 'selector' in opts ? opts.selector : null;
        let shouldRebuild = opts && 'shouldRebuild' in opts ? opts.shouldRebuild : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (selector$.Selector5$(A, B, C, D, E, S)).new({key: key, builder: builder, selector: selector, shouldRebuild: shouldRebuild, child: child});
      }
    }
    (Selector5.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let selector = opts && 'selector' in opts ? opts.selector : null;
      let shouldRebuild = opts && 'shouldRebuild' in opts ? opts.shouldRebuild : null;
      let child = opts && 'child' in opts ? opts.child : null;
      Selector5.__proto__.new.call(this, {key: key, shouldRebuild: shouldRebuild, builder: builder, selector: dart.fn(context => selector(context, provider$.Provider.of(A, context), provider$.Provider.of(B, context), provider$.Provider.of(C, context), provider$.Provider.of(D, context), provider$.Provider.of(E, context)), __t$BuildContextToS()), child: child});
      ;
    }).prototype = Selector5.prototype;
    dart.addTypeTests(Selector5);
    Selector5.prototype[_is_Selector5_default] = true;
    dart.addTypeCaches(Selector5);
    dart.setLibraryUri(Selector5, I[34]);
    return Selector5;
  });
  selector$.Selector5 = selector$.Selector5$();
  dart.addTypeTests(selector$.Selector5, _is_Selector5_default);
  const _is_Selector6_default = Symbol('_is_Selector6_default');
  selector$.Selector6$ = dart.generic((A, B, C, D, E, F, S) => {
    var __t$BuildContextToS = () => (__t$BuildContextToS = dart.constFn(dart.fnType(S, [framework.BuildContext])))();
    class Selector6 extends selector$.Selector0$(S) {
      static ['_#new#tearOff'](A, B, C, D, E, F, S, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let selector = opts && 'selector' in opts ? opts.selector : null;
        let shouldRebuild = opts && 'shouldRebuild' in opts ? opts.shouldRebuild : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (selector$.Selector6$(A, B, C, D, E, F, S)).new({key: key, builder: builder, selector: selector, shouldRebuild: shouldRebuild, child: child});
      }
    }
    (Selector6.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let selector = opts && 'selector' in opts ? opts.selector : null;
      let shouldRebuild = opts && 'shouldRebuild' in opts ? opts.shouldRebuild : null;
      let child = opts && 'child' in opts ? opts.child : null;
      Selector6.__proto__.new.call(this, {key: key, shouldRebuild: shouldRebuild, builder: builder, selector: dart.fn(context => selector(context, provider$.Provider.of(A, context), provider$.Provider.of(B, context), provider$.Provider.of(C, context), provider$.Provider.of(D, context), provider$.Provider.of(E, context), provider$.Provider.of(F, context)), __t$BuildContextToS()), child: child});
      ;
    }).prototype = Selector6.prototype;
    dart.addTypeTests(Selector6);
    Selector6.prototype[_is_Selector6_default] = true;
    dart.addTypeCaches(Selector6);
    dart.setLibraryUri(Selector6, I[34]);
    return Selector6;
  });
  selector$.Selector6 = selector$.Selector6$();
  dart.addTypeTests(selector$.Selector6, _is_Selector6_default);
  var _valueListenable = dart.privateName(value_listenable_provider, "_valueListenable");
  var _updateShouldNotify$ = dart.privateName(value_listenable_provider, "_updateShouldNotify");
  const _is_ValueListenableProvider_default = Symbol('_is_ValueListenableProvider_default');
  value_listenable_provider.ValueListenableProvider$ = dart.generic(T => {
    var __t$ValueListenableBuilderOfT = () => (__t$ValueListenableBuilderOfT = dart.constFn(value_listenable_builder.ValueListenableBuilder$(T)))();
    var __t$ProviderOfT = () => (__t$ProviderOfT = dart.constFn(provider$.Provider$(T)))();
    var __t$BuildContextAndTAndWidgetNToProviderOfT = () => (__t$BuildContextAndTAndWidgetNToProviderOfT = dart.constFn(dart.fnType(__t$ProviderOfT(), [framework.BuildContext, T, T$.WidgetN()])))();
    var __t$DiagnosticsPropertyOfT = () => (__t$DiagnosticsPropertyOfT = dart.constFn(diagnostics.DiagnosticsProperty$(T)))();
    class ValueListenableProvider extends nested.SingleChildStatelessWidget {
      static ['_#value#tearOff'](T, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let value = opts && 'value' in opts ? opts.value : null;
        let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (value_listenable_provider.ValueListenableProvider$(T)).value({key: key, value: value, updateShouldNotify: updateShouldNotify, child: child});
      }
      buildWithChild(context, child) {
        return new (__t$ValueListenableBuilderOfT()).new({valueListenable: this[_valueListenable], builder: dart.fn((context, value, _) => new (__t$ProviderOfT()).value({value: value, updateShouldNotify: this[_updateShouldNotify$], child: child}), __t$BuildContextAndTAndWidgetNToProviderOfT())});
      }
      debugFillProperties(properties) {
        super.debugFillProperties(properties);
        properties.add(new (__t$DiagnosticsPropertyOfT()).new("value", this[_valueListenable].value));
      }
    }
    (ValueListenableProvider.value = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let value = opts && 'value' in opts ? opts.value : null;
      let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
      let child = opts && 'child' in opts ? opts.child : null;
      this[_valueListenable] = value;
      this[_updateShouldNotify$] = updateShouldNotify;
      ValueListenableProvider.__proto__.new.call(this, {key: key, child: child});
      ;
    }).prototype = ValueListenableProvider.prototype;
    dart.addTypeTests(ValueListenableProvider);
    ValueListenableProvider.prototype[_is_ValueListenableProvider_default] = true;
    dart.addTypeCaches(ValueListenableProvider);
    dart.setMethodSignature(ValueListenableProvider, () => ({
      __proto__: dart.getMethods(ValueListenableProvider.__proto__),
      buildWithChild: dart.fnType(framework.Widget, [framework.BuildContext, dart.nullable(framework.Widget)])
    }));
    dart.setLibraryUri(ValueListenableProvider, I[35]);
    dart.setFieldSignature(ValueListenableProvider, () => ({
      __proto__: dart.getFields(ValueListenableProvider.__proto__),
      [_valueListenable]: dart.finalFieldType(change_notifier.ValueListenable$(T)),
      [_updateShouldNotify$]: dart.finalFieldType(dart.nullable(dart.fnType(core.bool, [T, T])))
    }));
    return ValueListenableProvider;
  });
  value_listenable_provider.ValueListenableProvider = value_listenable_provider.ValueListenableProvider$();
  dart.addTypeTests(value_listenable_provider.ValueListenableProvider, _is_ValueListenableProvider_default);
  router_utils.APP_PAGE = class APP_PAGE extends core._Enum {
    [_enumToString]() {
      return "APP_PAGE." + this[_name];
    }
  };
  (router_utils.APP_PAGE.new = function(index, name) {
    router_utils.APP_PAGE.__proto__.new.call(this, index, name);
    ;
  }).prototype = router_utils.APP_PAGE.prototype;
  dart.addTypeTests(router_utils.APP_PAGE);
  dart.addTypeCaches(router_utils.APP_PAGE);
  dart.setMethodSignature(router_utils.APP_PAGE, () => ({
    __proto__: dart.getMethods(router_utils.APP_PAGE.__proto__),
    [_enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(router_utils.APP_PAGE, I[36]);
  dart.setStaticFieldSignature(router_utils.APP_PAGE, () => ['values', 'onboard', 'auth', 'home', 'search']);
  dart.defineLazy(router_utils.APP_PAGE, {
    /*router_utils.APP_PAGE.values*/get values() {
      return C[36] || CT.C36;
    },
    /*router_utils.APP_PAGE.onboard*/get onboard() {
      return C[37] || CT.C37;
    },
    /*router_utils.APP_PAGE.auth*/get auth() {
      return C[38] || CT.C38;
    },
    /*router_utils.APP_PAGE.home*/get home() {
      return C[39] || CT.C39;
    },
    /*router_utils.APP_PAGE.search*/get search() {
      return C[40] || CT.C40;
    }
  }, false);
  router_utils['AppPageExtension|get#routePath'] = function AppPageExtension$124get$35routePath($this) {
    switch ($this) {
      case C[39] || CT.C39:
        {
          return "/";
        }
      case C[37] || CT.C37:
        {
          return "/onboard";
        }
      case C[38] || CT.C38:
        {
          return "/auth";
        }
      case C[40] || CT.C40:
        {
          return "/search";
        }
      default:
        {
          return "/";
        }
    }
  };
  router_utils['AppPageExtension|get#routeName'] = function AppPageExtension$124get$35routeName($this) {
    switch ($this) {
      case C[39] || CT.C39:
        {
          return "ГЛАВНАЯ";
        }
      case C[37] || CT.C37:
        {
          return "ВВЕДЕНИЕ";
        }
      case C[38] || CT.C38:
        {
          return "АВТОРИЗАЦИЯ";
        }
      case C[40] || CT.C40:
        {
          return "Поиск";
        }
      default:
        {
          return "ГЛАВНАЯ";
        }
    }
  };
  router_utils['AppPageExtension|get#routePageTitle'] = function AppPageExtension$124get$35routePageTitle($this) {
    switch ($this) {
      case C[39] || CT.C39:
        {
          return "ГЛАВНАЯ";
        }
      case C[37] || CT.C37:
        {
          return "ВВЕДЕНИЕ";
        }
      case C[38] || CT.C38:
        {
          return "АВТОРИЗАЦИЯ";
        }
      case C[40] || CT.C40:
        {
          return "Поиск";
        }
      default:
        {
          return "Astha";
        }
    }
  };
  home.Home = class Home extends framework.StatefulWidget {
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      return new home.Home.new({key: key});
    }
    createState() {
      return new home._HomeState.new();
    }
  };
  (home.Home.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    home.Home.__proto__.new.call(this, {key: key});
    ;
  }).prototype = home.Home.prototype;
  dart.addTypeTests(home.Home);
  dart.addTypeCaches(home.Home);
  dart.setMethodSignature(home.Home, () => ({
    __proto__: dart.getMethods(home.Home.__proto__),
    createState: dart.fnType(framework.State$(home.Home), [])
  }));
  dart.setLibraryUri(home.Home, I[37]);
  var Icon_textDirection = dart.privateName(icon, "Icon.textDirection");
  var Icon_semanticLabel = dart.privateName(icon, "Icon.semanticLabel");
  var Icon_shadows = dart.privateName(icon, "Icon.shadows");
  var Icon_color = dart.privateName(icon, "Icon.color");
  var Icon_opticalSize = dart.privateName(icon, "Icon.opticalSize");
  var Icon_grade = dart.privateName(icon, "Icon.grade");
  var Icon_weight = dart.privateName(icon, "Icon.weight");
  var Icon_fill = dart.privateName(icon, "Icon.fill");
  var Icon_size = dart.privateName(icon, "Icon.size");
  var IconData_matchTextDirection = dart.privateName(icon_data, "IconData.matchTextDirection");
  var IconData_fontPackage = dart.privateName(icon_data, "IconData.fontPackage");
  var IconData_fontFamily = dart.privateName(icon_data, "IconData.fontFamily");
  var IconData_codePoint = dart.privateName(icon_data, "IconData.codePoint");
  var Icon_icon = dart.privateName(icon, "Icon.icon");
  var Text_selectionColor = dart.privateName(text, "Text.selectionColor");
  var Text_textHeightBehavior = dart.privateName(text, "Text.textHeightBehavior");
  var Text_textWidthBasis = dart.privateName(text, "Text.textWidthBasis");
  var Text_semanticsLabel = dart.privateName(text, "Text.semanticsLabel");
  var Text_maxLines = dart.privateName(text, "Text.maxLines");
  var Text_textScaleFactor = dart.privateName(text, "Text.textScaleFactor");
  var Text_overflow = dart.privateName(text, "Text.overflow");
  var Text_softWrap = dart.privateName(text, "Text.softWrap");
  var Text_locale = dart.privateName(text, "Text.locale");
  var Text_textDirection = dart.privateName(text, "Text.textDirection");
  var Text_textAlign = dart.privateName(text, "Text.textAlign");
  var Text_strutStyle = dart.privateName(text, "Text.strutStyle");
  var Text_style = dart.privateName(text, "Text.style");
  var Text_textSpan = dart.privateName(text, "Text.textSpan");
  var Text_data = dart.privateName(text, "Text.data");
  home._HomeState = class _HomeState extends framework.State$(home.Home) {
    build(context) {
      let colorScheme = theme.Theme.of(context).colorScheme;
      let oddItemColor = colorScheme.primary.withOpacity(0.05);
      let evenItemColor = colorScheme.primary.withOpacity(0.15);
      return new tab_controller.DefaultTabController.new({initialIndex: 1, length: 3, child: new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: new text.Text.new(router_utils['AppPageExtension|get#routePageTitle'](router_utils.APP_PAGE.home)), notificationPredicate: dart.fn(notification => notification.depth === 1, T$.ScrollNotificationTobool()), scrolledUnderElevation: 4, shadowColor: theme.Theme.of(context).shadowColor, bottom: new tabs.TabBar.new({tabs: T$.JSArrayOfWidget().of([new tabs.Tab.new({icon: C[41] || CT.C41, text: home.titles[$_get](0)}), new tabs.Tab.new({icon: C[43] || CT.C43, text: home.titles[$_get](1)}), new tabs.Tab.new({icon: C[45] || CT.C45, text: home.titles[$_get](2)})])})}), body: new tabs.TabBarView.new({children: T$.JSArrayOfWidget().of([new scroll_view.ListView.builder({itemCount: 5, itemBuilder: dart.fn((context, index) => {
                  index = index + 1;
                  return new list_tile.ListTile.new({tileColor: index[$isOdd] ? oddItemColor : evenItemColor, title: new text.Text.new(home.titles[$_get](0) + " " + dart.str(index))});
                }, T$.BuildContextAndintToListTile())}), new scroll_view.ListView.builder({itemCount: 5, itemBuilder: dart.fn((context, index) => {
                  index = index + 1;
                  return new list_tile.ListTile.new({tileColor: index[$isOdd] ? oddItemColor : evenItemColor, title: new text.Text.new(home.titles[$_get](1) + " " + dart.str(index))});
                }, T$.BuildContextAndintToListTile())}), new basic.Column.new({children: T$.JSArrayOfWidget().of([new basic.Padding.new({padding: new edge_insets.EdgeInsets.only({top: 30})}), new basic.Row.new({mainAxisAlignment: flex.MainAxisAlignment.center, children: T$.JSArrayOfWidget().of([new text.Text.new("ФИО", {style: new text_style.TextStyle.new({fontFamily: "Roboto", fontSize: 32})})])}), new basic.Padding.new({padding: new edge_insets.EdgeInsets.only({top: 30})}), new circle_avatar.CircleAvatar.new({backgroundImage: new image_resolution.AssetImage.new("assets/nophoto.jpg"), radius: 100}), new basic.Padding.new({padding: new edge_insets.EdgeInsets.only({top: 30})}), new basic.Row.new({mainAxisAlignment: flex.MainAxisAlignment.center, children: T$.JSArrayOfWidget().of([new icon.Icon.new(icons.Icons.mail_outline, {size: 25}), new basic.Padding.new({padding: new edge_insets.EdgeInsets.only({left: 20})}), new text.Text.new("test@test.com", {style: new text_style.TextStyle.new({fontFamily: "Roboto"})})])}), new basic.Padding.new({padding: new edge_insets.EdgeInsets.only({top: 10})}), new basic.Row.new({mainAxisAlignment: flex.MainAxisAlignment.center, children: T$.JSArrayOfWidget().of([new icon.Icon.new(icons.Icons.key_outlined, {size: 25}), new basic.Padding.new({padding: new edge_insets.EdgeInsets.only({left: 20})}), new text.Text.new("**********", {style: new text_style.TextStyle.new({fontFamily: "Roboto"})})])}), new basic.Padding.new({padding: new edge_insets.EdgeInsets.only({top: 50})}), new list_tile.ListTile.new({leading: new icon.Icon.new(icons.Icons.logout, {color: theme.Theme.of(context).colorScheme.secondary}), title: C[47] || CT.C47, onTap: dart.fn(() => {
                      core.print("Тут будет функционал выхода");
                    }, T$.VoidTovoid())})])})])})})});
    }
    static ['_#new#tearOff']() {
      return new home._HomeState.new();
    }
  };
  (home._HomeState.new = function() {
    home._HomeState.__proto__.new.call(this);
    ;
  }).prototype = home._HomeState.prototype;
  dart.addTypeTests(home._HomeState);
  dart.addTypeCaches(home._HomeState);
  dart.setMethodSignature(home._HomeState, () => ({
    __proto__: dart.getMethods(home._HomeState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(home._HomeState, I[37]);
  dart.defineLazy(home, {
    /*home.titles*/get titles() {
      return T$.JSArrayOfString().of(["Сотрудники", "Задачи", "Профиль"]);
    },
    set titles(value) {}
  }, false);
  onboard_screen.OnBoardScreen = class OnBoardScreen extends framework.StatefulWidget {
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      return new onboard_screen.OnBoardScreen.new({key: key});
    }
    createState() {
      return new onboard_screen._OnBoardScreenState.new();
    }
  };
  (onboard_screen.OnBoardScreen.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    onboard_screen.OnBoardScreen.__proto__.new.call(this, {key: key});
    ;
  }).prototype = onboard_screen.OnBoardScreen.prototype;
  dart.addTypeTests(onboard_screen.OnBoardScreen);
  dart.addTypeCaches(onboard_screen.OnBoardScreen);
  dart.setMethodSignature(onboard_screen.OnBoardScreen, () => ({
    __proto__: dart.getMethods(onboard_screen.OnBoardScreen.__proto__),
    createState: dart.fnType(framework.State$(onboard_screen.OnBoardScreen), [])
  }));
  dart.setLibraryUri(onboard_screen.OnBoardScreen, I[38]);
  var _currentImgIndex = dart.privateName(onboard_screen, "_currentImgIndex");
  var EdgeInsets_bottom = dart.privateName(edge_insets, "EdgeInsets.bottom");
  var EdgeInsets_right = dart.privateName(edge_insets, "EdgeInsets.right");
  var EdgeInsets_top = dart.privateName(edge_insets, "EdgeInsets.top");
  var EdgeInsets_left = dart.privateName(edge_insets, "EdgeInsets.left");
  onboard_screen._OnBoardScreenState = class _OnBoardScreenState extends framework.State$(onboard_screen.OnBoardScreen) {
    nextImage() {
      if (this[_currentImgIndex] < this.onBoardScreenImages[$length] - 1) {
        this.setState(dart.fn(() => this[_currentImgIndex] = this[_currentImgIndex] + 1, T$.VoidTovoid()));
      }
    }
    prevImage() {
      if (this[_currentImgIndex] > 0) {
        this.setState(dart.fn(() => this[_currentImgIndex] = this[_currentImgIndex] - 1, T$.VoidTovoid()));
      }
    }
    build(context) {
      let appStateProvider = provider$.Provider.of(app_state_provider.AppStateProvider, context);
      return new scaffold.Scaffold.new({body: new safe_area.SafeArea.new({child: new container.Container.new({color: C[48] || CT.C48, padding: C[49] || CT.C49, child: new basic.Column.new({children: T$.JSArrayOfWidget().of([new animated_switcher.AnimatedSwitcher.new({switchInCurve: curves.Curves.easeInOut, switchOutCurve: curves.Curves.easeOut, transitionBuilder: dart.fn((child, animation) => new transitions.ScaleTransition.new({scale: animation, child: child}), T$.WidgetAndAnimationOfdoubleToScaleTransition()), duration: C[50] || CT.C50, child: new image.Image.asset(this.onBoardScreenImages[$_get](this[_currentImgIndex]), {height: media_query.MediaQuery.of(context).size.height * 0.8, width: 1 / 0, key: new (T$.ValueKeyOfint()).new(this[_currentImgIndex])})}), new container.Container.new({color: colors.Colors.black26, child: new basic.Row.new({mainAxisAlignment: flex.MainAxisAlignment.spaceBetween, children: T$.JSArrayOfWidget().of([new icon_button.IconButton.new({onPressed: dart.bind(this, 'prevImage'), icon: this[_currentImgIndex] === 0 ? C[51] || CT.C51 : C[52] || CT.C52}), new icon_button.IconButton.new({onPressed: this[_currentImgIndex] === this.onBoardScreenImages[$length] - 1 ? dart.fn(() => onboard_screen.onSubmitDone(appStateProvider, context), T$.VoidTovoid()) : dart.bind(this, 'nextImage'), icon: this[_currentImgIndex] === this.onBoardScreenImages[$length] - 1 ? C[54] || CT.C54 : C[56] || CT.C56})])})})])})})})});
    }
    static ['_#new#tearOff']() {
      return new onboard_screen._OnBoardScreenState.new();
    }
  };
  (onboard_screen._OnBoardScreenState.new = function() {
    this[_currentImgIndex] = 0;
    this.onBoardScreenImages = T$.JSArrayOfString().of(["assets/nophoto.jpg", "assets/cat.jpeg"]);
    onboard_screen._OnBoardScreenState.__proto__.new.call(this);
    ;
  }).prototype = onboard_screen._OnBoardScreenState.prototype;
  dart.addTypeTests(onboard_screen._OnBoardScreenState);
  dart.addTypeCaches(onboard_screen._OnBoardScreenState);
  dart.setMethodSignature(onboard_screen._OnBoardScreenState, () => ({
    __proto__: dart.getMethods(onboard_screen._OnBoardScreenState.__proto__),
    nextImage: dart.fnType(dart.void, []),
    prevImage: dart.fnType(dart.void, []),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(onboard_screen._OnBoardScreenState, I[38]);
  dart.setFieldSignature(onboard_screen._OnBoardScreenState, () => ({
    __proto__: dart.getFields(onboard_screen._OnBoardScreenState.__proto__),
    [_currentImgIndex]: dart.fieldType(core.int),
    onBoardScreenImages: dart.finalFieldType(core.List$(core.String))
  }));
  onboard_screen.onSubmitDone = function onSubmitDone(stateProvider, context) {
    stateProvider.hasOnboarded();
    go_router$.GoRouter.of(context).go("/");
  };
  auth_screen.AuthScreen = class AuthScreen extends framework.StatelessWidget {
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      return new auth_screen.AuthScreen.new({key: key});
    }
    build(context) {
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: new text.Text.new(router_utils['AppPageExtension|get#routePageTitle'](router_utils.APP_PAGE.auth))}), body: new safe_area.SafeArea.new({child: new basic.Listener.new({onPointerDown: dart.fn(event => {
              let t32;
              t32 = focus_manager.FocusManager.instance.primaryFocus;
              return t32 == null ? null : t32.unfocus();
            }, T$.PointerDownEventTovoid()), child: new single_child_scroll_view.SingleChildScrollView.new({child: new basic.SizedBox.new({width: 1 / 0, child: new basic.Column.new({children: T$.JSArrayOfWidget().of([new basic.Padding.new({padding: C[58] || CT.C58, child: new image.Image.asset("assets/cat.jpeg", {fit: box_fit.BoxFit.fill})}), C[59] || CT.C59])})})})})})});
    }
  };
  (auth_screen.AuthScreen.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    auth_screen.AuthScreen.__proto__.new.call(this, {key: key});
    ;
  }).prototype = auth_screen.AuthScreen.prototype;
  dart.addTypeTests(auth_screen.AuthScreen);
  dart.addTypeCaches(auth_screen.AuthScreen);
  dart.setMethodSignature(auth_screen.AuthScreen, () => ({
    __proto__: dart.getMethods(auth_screen.AuthScreen.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(auth_screen.AuthScreen, I[39]);
  plugin_platform_interface.MockPlatformInterfaceMixin = class MockPlatformInterfaceMixin extends core.Object {};
  (plugin_platform_interface.MockPlatformInterfaceMixin.new = function() {
    ;
  }).prototype = plugin_platform_interface.MockPlatformInterfaceMixin.prototype;
  dart.addTypeTests(plugin_platform_interface.MockPlatformInterfaceMixin);
  dart.addTypeCaches(plugin_platform_interface.MockPlatformInterfaceMixin);
  plugin_platform_interface.MockPlatformInterfaceMixin[dart.implements] = () => [plugin_platform_interface.PlatformInterface];
  dart.setLibraryUri(plugin_platform_interface.MockPlatformInterfaceMixin, I[4]);
  method_channel_shared_preferences.MethodChannelSharedPreferencesStore = class MethodChannelSharedPreferencesStore extends shared_preferences_platform_interface.SharedPreferencesStorePlatform {
    remove(key) {
      return async.async(core.bool, function* remove() {
        return dart.nullCheck(yield method_channel_shared_preferences._kChannel.invokeMethod(core.bool, "remove", new (T$.IdentityMapOfString$dynamic()).from(["key", key])));
      });
    }
    setValue(valueType, key, value) {
      return async.async(core.bool, function* setValue() {
        return dart.nullCheck(yield method_channel_shared_preferences._kChannel.invokeMethod(core.bool, "set" + valueType, new (T$.IdentityMapOfString$dynamic()).from(["key", key, "value", value])));
      });
    }
    clear() {
      return async.async(core.bool, function* clear() {
        return dart.nullCheck(yield method_channel_shared_preferences._kChannel.invokeMethod(core.bool, "clear"));
      });
    }
    clearWithPrefix(prefix) {
      return async.async(core.bool, (function* clearWithPrefix() {
        return this.clearWithParameters(new types.ClearParameters.new({filter: new types.PreferencesFilter.new({prefix: prefix})}));
      }).bind(this));
    }
    clearWithParameters(parameters) {
      return async.async(core.bool, function* clearWithParameters() {
        let t32;
        let filter = parameters.filter;
        return dart.nullCheck(yield method_channel_shared_preferences._kChannel.invokeMethod(core.bool, "clearWithParameters", new (T$.IdentityMapOfString$dynamic()).from(["prefix", filter.prefix, "allowList", (t32 = filter.allowList, t32 == null ? null : t32[$toList]())])));
      });
    }
    getAll() {
      return async.async(T$.MapOfString$Object(), function* getAll() {
        let t32;
        t32 = (yield method_channel_shared_preferences._kChannel.invokeMapMethod(core.String, core.Object, "getAll"));
        return t32 == null ? new (T$.IdentityMapOfString$Object()).new() : t32;
      });
    }
    getAllWithPrefix(prefix, opts) {
      let allowList = opts && 'allowList' in opts ? opts.allowList : null;
      return async.async(T$.MapOfString$Object(), (function* getAllWithPrefix() {
        return this.getAllWithParameters(new types.GetAllParameters.new({filter: new types.PreferencesFilter.new({prefix: prefix})}));
      }).bind(this));
    }
    getAllWithParameters(parameters) {
      return async.async(T$.MapOfString$Object(), function* getAllWithParameters() {
        let t32, t32$;
        let filter = parameters.filter;
        let allowListAsList = (t32 = filter.allowList, t32 == null ? null : t32[$toList]());
        t32$ = (yield method_channel_shared_preferences._kChannel.invokeMapMethod(core.String, core.Object, "getAllWithParameters", new (T$.IdentityMapOfString$dynamic()).from(["prefix", filter.prefix, "allowList", allowListAsList])));
        return t32$ == null ? new (T$.IdentityMapOfString$Object()).new() : t32$;
      });
    }
    static ['_#new#tearOff']() {
      return new method_channel_shared_preferences.MethodChannelSharedPreferencesStore.new();
    }
  };
  (method_channel_shared_preferences.MethodChannelSharedPreferencesStore.new = function() {
    method_channel_shared_preferences.MethodChannelSharedPreferencesStore.__proto__.new.call(this);
    ;
  }).prototype = method_channel_shared_preferences.MethodChannelSharedPreferencesStore.prototype;
  dart.addTypeTests(method_channel_shared_preferences.MethodChannelSharedPreferencesStore);
  dart.addTypeCaches(method_channel_shared_preferences.MethodChannelSharedPreferencesStore);
  dart.setMethodSignature(method_channel_shared_preferences.MethodChannelSharedPreferencesStore, () => ({
    __proto__: dart.getMethods(method_channel_shared_preferences.MethodChannelSharedPreferencesStore.__proto__),
    remove: dart.fnType(async.Future$(core.bool), [core.String]),
    setValue: dart.fnType(async.Future$(core.bool), [core.String, core.String, core.Object]),
    clear: dart.fnType(async.Future$(core.bool), []),
    getAll: dart.fnType(async.Future$(core.Map$(core.String, core.Object)), []),
    getAllWithPrefix: dart.fnType(async.Future$(core.Map$(core.String, core.Object)), [core.String], {allowList: dart.nullable(core.Set$(core.String))}, {})
  }));
  dart.setLibraryUri(method_channel_shared_preferences.MethodChannelSharedPreferencesStore, I[40]);
  var MethodChannel__binaryMessenger = dart.privateName(platform_channel, "MethodChannel._binaryMessenger");
  var StandardMethodCodec_messageCodec = dart.privateName(message_codecs, "StandardMethodCodec.messageCodec");
  var MethodChannel_codec = dart.privateName(platform_channel, "MethodChannel.codec");
  var MethodChannel_name = dart.privateName(platform_channel, "MethodChannel.name");
  dart.defineLazy(method_channel_shared_preferences, {
    /*method_channel_shared_preferences._kChannel*/get _kChannel() {
      return C[60] || CT.C60;
    }
  }, false);
  go_route_information_parser.GoRouteInformationParser = class GoRouteInformationParser extends router.RouteInformationParser$(core.Uri) {
    parseRouteInformation(routeInformation) {
      return new (T$.SynchronousFutureOfUri()).new(core.Uri.parse(dart.nullCheck(routeInformation.location)));
    }
    restoreRouteInformation(configuration) {
      core.Uri.as(configuration);
      return new router.RouteInformation.new({location: configuration.toString()});
    }
    static ['_#new#tearOff']() {
      return new go_route_information_parser.GoRouteInformationParser.new();
    }
  };
  (go_route_information_parser.GoRouteInformationParser.new = function() {
    go_route_information_parser.GoRouteInformationParser.__proto__.new.call(this);
    ;
  }).prototype = go_route_information_parser.GoRouteInformationParser.prototype;
  dart.addTypeTests(go_route_information_parser.GoRouteInformationParser);
  dart.addTypeCaches(go_route_information_parser.GoRouteInformationParser);
  dart.setMethodSignature(go_route_information_parser.GoRouteInformationParser, () => ({
    __proto__: dart.getMethods(go_route_information_parser.GoRouteInformationParser.__proto__),
    restoreRouteInformation: dart.fnType(router.RouteInformation, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(go_route_information_parser.GoRouteInformationParser, I[41]);
  var builderWithNav$ = dart.privateName(go_router_delegate, "GoRouterDelegate.builderWithNav");
  var routes$1 = dart.privateName(go_router_delegate, "GoRouterDelegate.routes");
  var errorPageBuilder$ = dart.privateName(go_router_delegate, "GoRouterDelegate.errorPageBuilder");
  var errorBuilder$ = dart.privateName(go_router_delegate, "GoRouterDelegate.errorBuilder");
  var topRedirect$ = dart.privateName(go_router_delegate, "GoRouterDelegate.topRedirect");
  var redirectLimit$ = dart.privateName(go_router_delegate, "GoRouterDelegate.redirectLimit");
  var refreshListenable$ = dart.privateName(go_router_delegate, "GoRouterDelegate.refreshListenable");
  var observers$ = dart.privateName(go_router_delegate, "GoRouterDelegate.observers");
  var debugLogDiagnostics$ = dart.privateName(go_router_delegate, "GoRouterDelegate.debugLogDiagnostics");
  var routerNeglect$ = dart.privateName(go_router_delegate, "GoRouterDelegate.routerNeglect");
  var restorationScopeId$ = dart.privateName(go_router_delegate, "GoRouterDelegate.restorationScopeId");
  var _key = dart.privateName(go_router_delegate, "_key");
  var _matches = dart.privateName(go_router_delegate, "_matches");
  var _namedMatches = dart.privateName(go_router_delegate, "_namedMatches");
  var _pushCounts = dart.privateName(go_router_delegate, "_pushCounts");
  var _pageBuilderForAppType = dart.privateName(go_router_delegate, "_pageBuilderForAppType");
  var _errorBuilderForAppType = dart.privateName(go_router_delegate, "_errorBuilderForAppType");
  var _cacheNamedRoutes = dart.privateName(go_router_delegate, "_cacheNamedRoutes");
  var _outputKnownRoutes = dart.privateName(go_router_delegate, "_outputKnownRoutes");
  var _go = dart.privateName(go_router_delegate, "_go");
  var _getNameRouteMatch = dart.privateName(go_router_delegate, "_getNameRouteMatch");
  var _push = dart.privateName(go_router_delegate, "_push");
  var _builder = dart.privateName(go_router_delegate, "_builder");
  var _getLocRouteMatchesWithRedirects = dart.privateName(go_router_delegate, "_getLocRouteMatchesWithRedirects");
  var _getLocRouteMatches = dart.privateName(go_router_delegate, "_getLocRouteMatches");
  var _errorPageBuilder = dart.privateName(go_router_delegate, "_errorPageBuilder");
  var _pageBuilder = dart.privateName(go_router_delegate, "_pageBuilder");
  var _cacheAppType = dart.privateName(go_router_delegate, "_cacheAppType");
  var _outputFullPathsFor = dart.privateName(go_router_delegate, "_outputFullPathsFor");
  const RouterDelegate_PopNavigatorRouterDelegateMixin$36 = class RouterDelegate_PopNavigatorRouterDelegateMixin extends router.RouterDelegate$(core.Uri) {};
  (RouterDelegate_PopNavigatorRouterDelegateMixin$36.new = function() {
    RouterDelegate_PopNavigatorRouterDelegateMixin$36.__proto__.new.call(this);
  }).prototype = RouterDelegate_PopNavigatorRouterDelegateMixin$36.prototype;
  dart.applyMixin(RouterDelegate_PopNavigatorRouterDelegateMixin$36, router.PopNavigatorRouterDelegateMixin$(core.Uri));
  const RouterDelegate_ChangeNotifier$36 = class RouterDelegate_ChangeNotifier extends RouterDelegate_PopNavigatorRouterDelegateMixin$36 {};
  (RouterDelegate_ChangeNotifier$36.new = function() {
    change_notifier.ChangeNotifier.new.call(this);
    RouterDelegate_ChangeNotifier$36.__proto__.new.call(this);
  }).prototype = RouterDelegate_ChangeNotifier$36.prototype;
  dart.applyMixin(RouterDelegate_ChangeNotifier$36, change_notifier.ChangeNotifier);
  go_router_delegate.GoRouterDelegate = class GoRouterDelegate extends RouterDelegate_ChangeNotifier$36 {
    get builderWithNav() {
      return this[builderWithNav$];
    }
    set builderWithNav(value) {
      super.builderWithNav = value;
    }
    get routes() {
      return this[routes$1];
    }
    set routes(value) {
      super.routes = value;
    }
    get errorPageBuilder() {
      return this[errorPageBuilder$];
    }
    set errorPageBuilder(value) {
      super.errorPageBuilder = value;
    }
    get errorBuilder() {
      return this[errorBuilder$];
    }
    set errorBuilder(value) {
      super.errorBuilder = value;
    }
    get topRedirect() {
      return this[topRedirect$];
    }
    set topRedirect(value) {
      super.topRedirect = value;
    }
    get redirectLimit() {
      return this[redirectLimit$];
    }
    set redirectLimit(value) {
      super.redirectLimit = value;
    }
    get refreshListenable() {
      return this[refreshListenable$];
    }
    set refreshListenable(value) {
      super.refreshListenable = value;
    }
    get observers() {
      return this[observers$];
    }
    set observers(value) {
      super.observers = value;
    }
    get debugLogDiagnostics() {
      return this[debugLogDiagnostics$];
    }
    set debugLogDiagnostics(value) {
      super.debugLogDiagnostics = value;
    }
    get routerNeglect() {
      return this[routerNeglect$];
    }
    set routerNeglect(value) {
      super.routerNeglect = value;
    }
    get restorationScopeId() {
      return this[restorationScopeId$];
    }
    set restorationScopeId(value) {
      super.restorationScopeId = value;
    }
    static ['_#new#tearOff'](opts) {
      let builderWithNav = opts && 'builderWithNav' in opts ? opts.builderWithNav : null;
      let routes = opts && 'routes' in opts ? opts.routes : null;
      let errorPageBuilder = opts && 'errorPageBuilder' in opts ? opts.errorPageBuilder : null;
      let errorBuilder = opts && 'errorBuilder' in opts ? opts.errorBuilder : null;
      let topRedirect = opts && 'topRedirect' in opts ? opts.topRedirect : null;
      let redirectLimit = opts && 'redirectLimit' in opts ? opts.redirectLimit : null;
      let refreshListenable = opts && 'refreshListenable' in opts ? opts.refreshListenable : null;
      let initUri = opts && 'initUri' in opts ? opts.initUri : null;
      let observers = opts && 'observers' in opts ? opts.observers : null;
      let debugLogDiagnostics = opts && 'debugLogDiagnostics' in opts ? opts.debugLogDiagnostics : null;
      let routerNeglect = opts && 'routerNeglect' in opts ? opts.routerNeglect : null;
      let restorationScopeId = opts && 'restorationScopeId' in opts ? opts.restorationScopeId : null;
      return new go_router_delegate.GoRouterDelegate.new({builderWithNav: builderWithNav, routes: routes, errorPageBuilder: errorPageBuilder, errorBuilder: errorBuilder, topRedirect: topRedirect, redirectLimit: redirectLimit, refreshListenable: refreshListenable, initUri: initUri, observers: observers, debugLogDiagnostics: debugLogDiagnostics, routerNeglect: routerNeglect, restorationScopeId: restorationScopeId});
    }
    [_cacheNamedRoutes](routes, parentFullpath, namedFullpaths) {
      for (let route of routes) {
        let fullpath = go_router_delegate.GoRouterDelegate.fullLocFor(parentFullpath, route.path);
        if (route.name != null) {
          let name = dart.nullCheck(route.name)[$toLowerCase]();
          if (!!namedFullpaths[$containsKey](name)) dart.assertFailed("duplication fullpaths for name \"" + name + "\":" + dart.nullCheck(namedFullpaths[$_get](name)).fullpath + ", " + fullpath, I[42], 114, 16, "!namedFullpaths.containsKey(name)");
          let match = new go_route_match.GoRouteMatch.new({route: route, subloc: "/TBD", fullpath: fullpath, encodedParams: new (T$.IdentityMapOfString$String()).new(), queryParams: new (T$.IdentityMapOfString$String()).new(), extra: null, error: null});
          namedFullpaths[$_set](name, match);
        }
        if (route.routes[$isNotEmpty]) {
          this[_cacheNamedRoutes](route.routes, fullpath, namedFullpaths);
        }
      }
    }
    namedLocation(name, opts) {
      let params = opts && 'params' in opts ? opts.params : null;
      let queryParams = opts && 'queryParams' in opts ? opts.queryParams : null;
      logging.log.info("getting location for name: " + "\"" + name + "\"" + (params[$isEmpty] ? "" : ", params: " + dart.str(params)) + (queryParams[$isEmpty] ? "" : ", queryParams: " + dart.str(queryParams)));
      let match = this[_getNameRouteMatch](name[$toLowerCase](), {params: params, queryParams: queryParams});
      if (!(match != null)) dart.assertFailed("unknown route name: " + name, I[42], 156, 12, "match != null");
      if (!(dart.nullCheck(match).queryParams === queryParams)) dart.assertFailed(null, I[42], 157, 12, "identical(match!.queryParams, queryParams)");
      return go_router_delegate.GoRouterDelegate._addQueryParams(dart.nullCheck(match).subloc, queryParams);
    }
    go(location, opts) {
      let extra = opts && 'extra' in opts ? opts.extra : null;
      logging.log.info("going to " + location);
      this[_go](location, {extra: extra});
      this.notifyListeners();
    }
    push(location, opts) {
      let extra = opts && 'extra' in opts ? opts.extra : null;
      logging.log.info("pushing " + location);
      this[_push](location, {extra: extra});
      this.notifyListeners();
    }
    pop() {
      this[_matches][$remove](this[_matches][$last]);
      if (!this[_matches][$isNotEmpty]) dart.assertFailed("have popped the last page off of the stack; there are no pages left to show", I[42], 178, 12, "_matches.isNotEmpty");
      this.notifyListeners();
    }
    refresh() {
      logging.log.info("refreshing " + this.location);
      this[_go](this.location, {extra: this[_matches][$last].extra});
      this.notifyListeners();
    }
    get location() {
      return go_router_delegate.GoRouterDelegate._addQueryParams(this[_matches][$last].subloc, this[_matches][$last].queryParams);
    }
    get matches() {
      return this[_matches];
    }
    dispose() {
      let t32;
      t32 = this.refreshListenable;
      t32 == null ? null : t32.removeListener(dart.bind(this, 'refresh'));
      super.dispose();
    }
    get navigatorKey() {
      return this[_key];
    }
    get currentConfiguration() {
      return core.Uri.parse(this.location);
    }
    build(context) {
      return this[_builder](context, this[_matches]);
    }
    setInitialRoutePath(configuration) {
      core.Uri.as(configuration);
      let config = configuration.toString();
      if (config === "/") {
        this[_go](this.location);
      } else {
        logging.log.info("deep linking to " + config);
        this[_go](config);
      }
      return new (T$.SynchronousFutureOfvoid()).new(null);
    }
    setNewRoutePath(configuration) {
      core.Uri.as(configuration);
      return async.async(dart.void, (function* setNewRoutePath() {
        let config = configuration.toString();
        logging.log.info("going to " + config);
        this[_go](config);
      }).bind(this));
    }
    [_go](location, opts) {
      let t32;
      let extra = opts && 'extra' in opts ? opts.extra : null;
      let matches = this[_getLocRouteMatchesWithRedirects](location, {extra: extra});
      if (!matches[$isNotEmpty]) dart.assertFailed(null, I[42], 246, 12, "matches.isNotEmpty");
      t32 = this[_matches];
      (() => {
        t32[$clear]();
        t32[$addAll](matches);
        return t32;
      })();
    }
    [_push](location, opts) {
      let t32;
      let extra = opts && 'extra' in opts ? opts.extra : null;
      let matches = this[_getLocRouteMatchesWithRedirects](location, {extra: extra});
      if (!matches[$isNotEmpty]) dart.assertFailed(null, I[42], 257, 12, "matches.isNotEmpty");
      let top = matches[$last];
      let fullpath = top.fullpath;
      let count = dart.notNull((t32 = this[_pushCounts][$_get](fullpath), t32 == null ? 0 : t32)) + 1;
      this[_pushCounts][$_set](fullpath, count);
      let pageKey = new (T$.ValueKeyOfString()).new(fullpath + "-p" + dart.str(count));
      let match = new go_route_match.GoRouteMatch.new({route: top.route, subloc: top.subloc, fullpath: top.fullpath, encodedParams: top.encodedParams, queryParams: top.queryParams, extra: extra, error: null, pageKey: pageKey});
      if (!matches[$isNotEmpty]) dart.assertFailed(null, I[42], 277, 12, "matches.isNotEmpty");
      this[_matches][$add](match);
    }
    [_getLocRouteMatchesWithRedirects](location, opts) {
      let t34, t35, t34$;
      let extra = opts && 'extra' in opts ? opts.extra : null;
      let matches = null;
      try {
        let redirects = T$.JSArrayOfString().of([go_router_delegate.GoRouterDelegate._canonicalUri(location)]);
        const redirected = redir => {
          if (redir == null) {
            return false;
          }
          if (!(core.Uri.tryParse(redir) != null)) dart.assertFailed("invalid redirect: " + dart.str(redir), I[42], 296, 16, "Uri.tryParse(redir) != null");
          if (!!redirects[$contains](redir)) dart.assertFailed("redirect loop detected: " + (() => {
            let t32 = T$.ListOfString().of(redirects);
            t32.push(redir);
            return t32;
          })()[$join](" => "), I[42], 299, 13, "!redirects.contains(redir)");
          if (!(redirects[$length] < this.redirectLimit)) dart.assertFailed("too many redirects: " + (() => {
            let t33 = T$.ListOfString().of(redirects);
            t33.push(redir);
            return t33;
          })()[$join](" => "), I[42], 305, 13, "redirects.length < redirectLimit");
          redirects[$add](redir);
          logging.log.info("redirecting to " + dart.str(redir));
          return true;
        };
        dart.fn(redirected, T$.StringNTobool());
        while (true) {
          let loc = redirects[$last];
          let uri = core.Uri.parse(loc);
          if (redirected((t34 = new go_router_state.GoRouterState.new(this, {location: loc, name: null, subloc: uri.path, queryParams: uri.queryParameters}), this.topRedirect(t34)))) {
            continue;
          }
          matches = this[_getLocRouteMatches](loc, {extra: extra});
          let previouslyMatchedParams = new (T$.IdentityMapOfString$String()).new();
          for (let match of matches) {
            if (!!previouslyMatchedParams[$keys][$any](dart.bind(match.encodedParams, $containsKey))) dart.assertFailed("Duplicated parameter names", I[42], 346, 13, "!previouslyMatchedParams.keys.any(match.encodedParams.containsKey)");
            match.encodedParams[$addAll](previouslyMatchedParams);
            previouslyMatchedParams = match.encodedParams;
          }
          let top = matches[$last];
          if (redirected((t34$ = top.route, t35 = new go_router_state.GoRouterState.new(this, {location: loc, subloc: top.subloc, name: top.route.name, path: top.route.path, fullpath: top.fullpath, params: top.decodedParams, queryParams: top.queryParams, extra: extra}), t34$.redirect(t35)))) {
            continue;
          }
          if (redirects[$length] > 1) {
            this.notifyListeners();
          }
          break;
        }
      } catch (e) {
        let err = dart.getThrown(e);
        let stack = dart.stackTrace(e);
        if (core.Object.is(err)) {
          logging.log.severe("Exception during GoRouter navigation", err, stack);
          let error = core.Exception.is(err) ? err : core.Exception.new(err);
          let uri = core.Uri.parse(location);
          matches = T$.JSArrayOfGoRouteMatch().of([new go_route_match.GoRouteMatch.new({subloc: uri.path, fullpath: uri.path, encodedParams: new (T$.IdentityMapOfString$String()).new(), queryParams: uri.queryParameters, extra: null, error: error, route: new go_route.GoRoute.new({path: location, pageBuilder: dart.fn((context, state) => this[_errorPageBuilder](context, new go_router_state.GoRouterState.new(this, {location: state.location, subloc: state.subloc, name: state.name, path: state.path, error: error, fullpath: state.path, params: state.params, queryParams: state.queryParams, extra: state.extra})), T$.BuildContextAndGoRouterStateToPageOfvoid())})})]);
        } else
          throw e;
      }
      if (!matches[$isNotEmpty]) dart.assertFailed(null, I[42], 424, 12, "matches.isNotEmpty");
      return matches;
    }
    [_getLocRouteMatches](location, opts) {
      let extra = opts && 'extra' in opts ? opts.extra : null;
      let uri = core.Uri.parse(location);
      let matchStacks = go_router_delegate.GoRouterDelegate._getLocRouteMatchStacks({loc: uri.path, restLoc: uri.path, routes: this.routes, parentFullpath: "", parentSubloc: "", queryParams: uri.queryParameters, extra: extra})[$toList]();
      if (!matchStacks[$isNotEmpty]) dart.assertFailed("no routes for location: " + location, I[42], 443, 12, "matchStacks.isNotEmpty");
      return matchStacks[$first];
    }
    static _getLocRouteMatchStacks(opts) {
      let loc = opts && 'loc' in opts ? opts.loc : null;
      let restLoc = opts && 'restLoc' in opts ? opts.restLoc : null;
      let parentSubloc = opts && 'parentSubloc' in opts ? opts.parentSubloc : null;
      let routes = opts && 'routes' in opts ? opts.routes : null;
      let parentFullpath = opts && 'parentFullpath' in opts ? opts.parentFullpath : null;
      let queryParams = opts && 'queryParams' in opts ? opts.queryParams : null;
      let extra = opts && 'extra' in opts ? opts.extra : null;
      return new (T$.SyncIterableOfListOfGoRouteMatch()).new(function* _getLocRouteMatchStacks() {
        for (let route of routes) {
          let fullpath = go_router_delegate.GoRouterDelegate.fullLocFor(parentFullpath, route.path);
          let match = go_route_match.GoRouteMatch.match({route: route, restLoc: restLoc, parentSubloc: parentSubloc, path: route.path, fullpath: fullpath, queryParams: queryParams, extra: extra});
          if (match == null) {
            continue;
          }
          if (match.subloc[$toLowerCase]() === loc[$toLowerCase]()) {
            yield T$.JSArrayOfGoRouteMatch().of([match]);
            continue;
          }
          if (route.routes[$isEmpty]) {
            continue;
          }
          let childRestLoc = loc[$substring](match.subloc.length + (match.subloc === "/" ? 0 : 1));
          if (!loc[$startsWith](match.subloc)) dart.assertFailed(null, I[42], 537, 14, "loc.startsWith(match.subloc)");
          if (!restLoc[$isNotEmpty]) dart.assertFailed(null, I[42], 538, 14, "restLoc.isNotEmpty");
          let subRouteMatchStacks = go_router_delegate.GoRouterDelegate._getLocRouteMatchStacks({loc: loc, restLoc: childRestLoc, parentSubloc: match.subloc, routes: route.routes, parentFullpath: fullpath, queryParams: queryParams, extra: extra})[$toList]();
          if (subRouteMatchStacks[$isEmpty]) {
            continue;
          }
          for (let stack of subRouteMatchStacks) {
            yield (() => {
              let t35 = T$.JSArrayOfGoRouteMatch().of([match]);
              t35[$addAll](stack);
              return t35;
            })();
          }
        }
      });
    }
    [_getNameRouteMatch](name, opts) {
      let params = opts && 'params' in opts ? opts.params : C[2] || CT.C2;
      let queryParams = opts && 'queryParams' in opts ? opts.queryParams : C[2] || CT.C2;
      let extra = opts && 'extra' in opts ? opts.extra : null;
      let partialMatch = this[_namedMatches][$_get](name);
      return partialMatch == null ? null : go_route_match.GoRouteMatch.matchNamed({name: name, route: partialMatch.route, fullpath: partialMatch.fullpath, params: params, queryParams: queryParams, extra: extra});
    }
    static fullLocFor(parentFullLoc, path) {
      if (parentFullLoc[$isEmpty]) {
        if (!path[$startsWith]("/")) dart.assertFailed(null, I[42], 591, 14, "path.startsWith('/')");
        if (!(path === "/" || !path[$endsWith]("/"))) dart.assertFailed(null, I[42], 592, 14, "path == '/' || !path.endsWith('/')");
        return path;
      }
      if (!path[$isNotEmpty]) dart.assertFailed(null, I[42], 597, 12, "path.isNotEmpty");
      if (!!path[$startsWith]("/")) dart.assertFailed(null, I[42], 598, 12, "!path.startsWith('/')");
      if (!!path[$endsWith]("/")) dart.assertFailed(null, I[42], 599, 12, "!path.endsWith('/')");
      return (parentFullLoc === "/" ? "" : parentFullLoc) + "/" + path;
    }
    [_builder](context, matches) {
      let t39, t38, t37;
      let pages = null;
      let error = null;
      try {
        if (this.routerNeglect) {
          router.Router.neglect(context, dart.fn(() => pages = this.getPages(context, matches[$toList]())[$toList](), T$.VoidTovoid()));
        } else {
          pages = this.getPages(context, matches[$toList]())[$toList]();
        }
      } catch (e) {
        let err = dart.getThrown(e);
        let stack = dart.stackTrace(e);
        if (core.Object.is(err)) {
          logging.log.severe("Exception during GoRouter navigation", err, stack);
          error = core.Exception.is(err) ? err : core.Exception.new(err);
          let uri = core.Uri.parse(this.location);
          pages = T$.JSArrayOfPage().of([this[_errorPageBuilder](context, new go_router_state.GoRouterState.new(this, {location: this.location, subloc: uri.path, name: null, queryParams: uri.queryParameters, error: error}))]);
        } else
          throw e;
      }
      if (!(pages != null)) dart.assertFailed(null, I[42], 644, 12, "pages != null");
      if (matches[$length] === 1 && matches[$first].error != null) {
        error = matches[$first].error;
      }
      let uri = core.Uri.parse(this.location);
      t37 = context;
      t38 = new go_router_state.GoRouterState.new(this, {location: this.location, name: null, subloc: uri.path, queryParams: uri.queryParameters, error: error});
      t39 = new navigator.Navigator.new({restorationScopeId: this.restorationScopeId, key: this[_key], pages: dart.nullCheck(pages), observers: this.observers, onPopPage: dart.fn((route, result) => {
          if (!route.didPop(result)) {
            return false;
          }
          this.pop();
          return true;
        }, T$.RouteAnddynamicTobool())});
      return this.builderWithNav(t37, t38, t39);
    }
    getPages(context, matches) {
      return new (T$.SyncIterableOfPage()).new((function* getPages() {
        let t38;
        if (!matches[$isNotEmpty]) dart.assertFailed(null, I[42], 708, 12, "matches.isNotEmpty");
        let params = new (T$.IdentityMapOfString$String()).new();
        for (let match of matches) {
          params = (() => {
            let t37 = T$.LinkedHashMapOfString$String().of(params);
            t37[$addAll](match.decodedParams);
            return t37;
          })();
          let state = new go_router_state.GoRouterState.new(this, {location: this.location, subloc: match.subloc, name: match.route.name, path: match.route.path, fullpath: match.fullpath, params: params, queryParams: match.queryParams, extra: match.extra, pageKey: match.pageKey});
          let pageBuilder = match.route.pageBuilder;
          let page = null;
          if (pageBuilder != null) {
            page = pageBuilder(context, state);
            if (route_data.NoOpPage.is(page)) {
              page = null;
            }
          }
          t38 = page;
          yield t38 == null ? this[_pageBuilder](context, state, match.route.builder) : t38;
        }
      }).bind(this));
    }
    [_cacheAppType](context) {
      if (this[_pageBuilderForAppType] == null) {
        if (!(this[_errorBuilderForAppType] == null)) dart.assertFailed(null, I[42], 760, 14, "_errorBuilderForAppType == null");
        let elem = framework.Element.is(context) ? context : null;
        if (elem != null && go_router_material.isMaterialApp(elem)) {
          logging.log.info("MaterialApp found");
          this[_pageBuilderForAppType] = C[63] || CT.C63;
          this[_errorBuilderForAppType] = dart.fn((c, s) => new go_router_material.GoRouterMaterialErrorScreen.new(s.error), T$.BuildContextAndGoRouterStateToGoRouterMaterialErrorScreen());
        } else if (elem != null && go_router_cupertino.isCupertinoApp(elem)) {
          logging.log.info("CupertinoApp found");
          this[_pageBuilderForAppType] = C[64] || CT.C64;
          this[_errorBuilderForAppType] = dart.fn((c, s) => new go_router_cupertino.GoRouterCupertinoErrorScreen.new(s.error), T$.BuildContextAndGoRouterStateToGoRouterCupertinoErrorScreen());
        } else {
          logging.log.info("WidgetsApp assumed");
          this[_pageBuilderForAppType] = dart.bind(this, 'pageBuilderForWidgetApp');
          this[_errorBuilderForAppType] = dart.fn((c, s) => new go_router_error_page.GoRouterErrorScreen.new(s.error), T$.BuildContextAndGoRouterStateToGoRouterErrorScreen());
        }
      }
      if (!(this[_pageBuilderForAppType] != null)) dart.assertFailed(null, I[42], 783, 12, "_pageBuilderForAppType != null");
      if (!(this[_errorBuilderForAppType] != null)) dart.assertFailed(null, I[42], 784, 12, "_errorBuilderForAppType != null");
    }
    [_pageBuilder](context, state, builder) {
      let t38;
      this[_cacheAppType](context);
      return dart.nullCheck(this[_pageBuilderForAppType])({key: state.pageKey, name: (t38 = state.name, t38 == null ? state.fullpath : t38), arguments: (() => {
          let t38 = T$.LinkedHashMapOfString$String().of(state.params);
          t38[$addAll](state.queryParams);
          return t38;
        })(), restorationId: state.pageKey.value, child: builder(context, state)});
    }
    pageBuilderForWidgetApp(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let name = opts && 'name' in opts ? opts.name : null;
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      let restorationId = opts && 'restorationId' in opts ? opts.restorationId : null;
      let child = opts && 'child' in opts ? opts.child : null;
      return new (T$.NoTransitionPageOfvoid()).new({name: name, arguments: $arguments, key: key, restorationId: restorationId, child: child});
    }
    [_errorPageBuilder](context, state) {
      let t39;
      this[_cacheAppType](context);
      return this.errorPageBuilder != null ? dart.nullCheck(this.errorPageBuilder)(context, state) : this[_pageBuilder](context, state, (t39 = this.errorBuilder, t39 == null ? dart.nullCheck(this[_errorBuilderForAppType]) : t39));
    }
    [_outputKnownRoutes]() {
      logging.log.info("known full paths for routes:");
      this[_outputFullPathsFor](this.routes, "", 0);
      if (this[_namedMatches][$isNotEmpty]) {
        logging.log.info("known full paths for route names:");
        for (let e of this[_namedMatches][$entries]) {
          logging.log.info("  " + e.key + " => " + e.value.fullpath);
        }
      }
    }
    [_outputFullPathsFor](routes, parentFullpath, depth) {
      for (let route of routes) {
        let fullpath = go_router_delegate.GoRouterDelegate.fullLocFor(parentFullpath, route.path);
        logging.log.info("  => " + ""[$padLeft](depth * 2) + fullpath);
        this[_outputFullPathsFor](route.routes, fullpath, depth + 1);
      }
    }
    static _canonicalUri(loc) {
      let canon = core.Uri.parse(loc).toString();
      canon = canon[$endsWith]("?") ? canon[$substring](0, canon.length - 1) : canon;
      canon = canon[$endsWith]("/") && canon !== "/" && !canon[$contains]("?") ? canon[$substring](0, canon.length - 1) : canon;
      canon = canon[$replaceFirst]("/?", "?", 1);
      return canon;
    }
    static _addQueryParams(loc, queryParams) {
      let uri = core.Uri.parse(loc);
      if (!uri.queryParameters[$isEmpty]) dart.assertFailed(null, I[42], 884, 12, "uri.queryParameters.isEmpty");
      return go_router_delegate.GoRouterDelegate._canonicalUri(core._Uri.new({path: uri.path, queryParameters: queryParams}).toString());
    }
  };
  (go_router_delegate.GoRouterDelegate.new = function(opts) {
    let t32;
    let builderWithNav = opts && 'builderWithNav' in opts ? opts.builderWithNav : null;
    let routes = opts && 'routes' in opts ? opts.routes : null;
    let errorPageBuilder = opts && 'errorPageBuilder' in opts ? opts.errorPageBuilder : null;
    let errorBuilder = opts && 'errorBuilder' in opts ? opts.errorBuilder : null;
    let topRedirect = opts && 'topRedirect' in opts ? opts.topRedirect : null;
    let redirectLimit = opts && 'redirectLimit' in opts ? opts.redirectLimit : null;
    let refreshListenable = opts && 'refreshListenable' in opts ? opts.refreshListenable : null;
    let initUri = opts && 'initUri' in opts ? opts.initUri : null;
    let observers = opts && 'observers' in opts ? opts.observers : null;
    let debugLogDiagnostics = opts && 'debugLogDiagnostics' in opts ? opts.debugLogDiagnostics : null;
    let routerNeglect = opts && 'routerNeglect' in opts ? opts.routerNeglect : null;
    let restorationScopeId = opts && 'restorationScopeId' in opts ? opts.restorationScopeId : null;
    this[_key] = T$.GlobalKeyOfNavigatorState().new();
    this[_matches] = T$.JSArrayOfGoRouteMatch().of([]);
    this[_namedMatches] = new (T$.IdentityMapOfString$GoRouteMatch()).new();
    this[_pushCounts] = new (T$.IdentityMapOfString$int()).new();
    this[_pageBuilderForAppType] = null;
    this[_errorBuilderForAppType] = null;
    this[builderWithNav$] = builderWithNav;
    this[routes$1] = routes;
    this[errorPageBuilder$] = errorPageBuilder;
    this[errorBuilder$] = errorBuilder;
    this[topRedirect$] = topRedirect;
    this[redirectLimit$] = redirectLimit;
    this[refreshListenable$] = refreshListenable;
    this[observers$] = observers;
    this[debugLogDiagnostics$] = debugLogDiagnostics;
    this[routerNeglect$] = routerNeglect;
    this[restorationScopeId$] = restorationScopeId;
    if (!dart.fn(() => {
      for (let route of routes) {
        if (!route.path[$startsWith]("/")) dart.assertFailed("top-level path must start with \"/\": " + route.path, I[42], 45, 20, "route.path.startsWith('/')");
      }
      return true;
    }, T$.VoidTobool())()) dart.assertFailed(null, I[42], 42, 15, "() {\n          // check top-level route paths are valid\n          for (final GoRoute route in routes) {\n            assert(route.path.startsWith('/'),\n                'top-level path must start with \"/\": ${route.path}');\n          }\n          return true;\n        }()");
    go_router_delegate.GoRouterDelegate.__proto__.new.call(this);
    this[_cacheNamedRoutes](this.routes, "", this[_namedMatches]);
    this[_outputKnownRoutes]();
    logging.log.info("setting initial location " + dart.str(initUri));
    this[_go](initUri.toString());
    t32 = this.refreshListenable;
    t32 == null ? null : t32.addListener(dart.bind(this, 'refresh'));
  }).prototype = go_router_delegate.GoRouterDelegate.prototype;
  dart.addTypeTests(go_router_delegate.GoRouterDelegate);
  dart.addTypeCaches(go_router_delegate.GoRouterDelegate);
  dart.setMethodSignature(go_router_delegate.GoRouterDelegate, () => ({
    __proto__: dart.getMethods(go_router_delegate.GoRouterDelegate.__proto__),
    [_cacheNamedRoutes]: dart.fnType(dart.void, [core.List$(go_route.GoRoute), core.String, core.Map$(core.String, go_route_match.GoRouteMatch)]),
    namedLocation: dart.fnType(core.String, [core.String], {}, {params: core.Map$(core.String, core.String), queryParams: core.Map$(core.String, core.String)}),
    go: dart.fnType(dart.void, [core.String], {extra: dart.nullable(core.Object)}, {}),
    push: dart.fnType(dart.void, [core.String], {extra: dart.nullable(core.Object)}, {}),
    pop: dart.fnType(dart.void, []),
    refresh: dart.fnType(dart.void, []),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    setNewRoutePath: dart.fnType(async.Future$(dart.void), [dart.nullable(core.Object)]),
    [_go]: dart.fnType(dart.void, [core.String], {extra: dart.nullable(core.Object)}, {}),
    [_push]: dart.fnType(dart.void, [core.String], {extra: dart.nullable(core.Object)}, {}),
    [_getLocRouteMatchesWithRedirects]: dart.fnType(core.List$(go_route_match.GoRouteMatch), [core.String], {}, {extra: dart.nullable(core.Object)}),
    [_getLocRouteMatches]: dart.fnType(core.List$(go_route_match.GoRouteMatch), [core.String], {extra: dart.nullable(core.Object)}, {}),
    [_getNameRouteMatch]: dart.fnType(dart.nullable(go_route_match.GoRouteMatch), [core.String], {extra: dart.nullable(core.Object), params: core.Map$(core.String, core.String), queryParams: core.Map$(core.String, core.String)}, {}),
    [_builder]: dart.fnType(framework.Widget, [framework.BuildContext, core.Iterable$(go_route_match.GoRouteMatch)]),
    getPages: dart.fnType(core.Iterable$(navigator.Page), [framework.BuildContext, core.List$(go_route_match.GoRouteMatch)]),
    [_cacheAppType]: dart.fnType(dart.void, [framework.BuildContext]),
    [_pageBuilder]: dart.fnType(navigator.Page, [framework.BuildContext, go_router_state.GoRouterState, dart.fnType(framework.Widget, [framework.BuildContext, go_router_state.GoRouterState])]),
    pageBuilderForWidgetApp: dart.fnType(navigator.Page$(dart.void), [], {}, {arguments: dart.nullable(core.Object), child: framework.Widget, key: key.LocalKey, name: dart.nullable(core.String), restorationId: core.String}),
    [_errorPageBuilder]: dart.fnType(navigator.Page$(dart.void), [framework.BuildContext, go_router_state.GoRouterState]),
    [_outputKnownRoutes]: dart.fnType(dart.void, []),
    [_outputFullPathsFor]: dart.fnType(dart.void, [core.List$(go_route.GoRoute), core.String, core.int])
  }));
  dart.setStaticMethodSignature(go_router_delegate.GoRouterDelegate, () => ['_getLocRouteMatchStacks', 'fullLocFor', '_canonicalUri', '_addQueryParams']);
  dart.setGetterSignature(go_router_delegate.GoRouterDelegate, () => ({
    __proto__: dart.getGetters(go_router_delegate.GoRouterDelegate.__proto__),
    location: core.String,
    matches: core.List$(go_route_match.GoRouteMatch),
    navigatorKey: framework.GlobalKey$(navigator.NavigatorState),
    currentConfiguration: core.Uri
  }));
  dart.setLibraryUri(go_router_delegate.GoRouterDelegate, I[43]);
  dart.setFieldSignature(go_router_delegate.GoRouterDelegate, () => ({
    __proto__: dart.getFields(go_router_delegate.GoRouterDelegate.__proto__),
    builderWithNav: dart.finalFieldType(dart.fnType(framework.Widget, [framework.BuildContext, go_router_state.GoRouterState, navigator.Navigator])),
    routes: dart.finalFieldType(core.List$(go_route.GoRoute)),
    errorPageBuilder: dart.finalFieldType(dart.nullable(dart.fnType(navigator.Page$(dart.void), [framework.BuildContext, go_router_state.GoRouterState]))),
    errorBuilder: dart.finalFieldType(dart.nullable(dart.fnType(framework.Widget, [framework.BuildContext, go_router_state.GoRouterState]))),
    topRedirect: dart.finalFieldType(dart.fnType(dart.nullable(core.String), [go_router_state.GoRouterState])),
    redirectLimit: dart.finalFieldType(core.int),
    refreshListenable: dart.finalFieldType(dart.nullable(change_notifier.Listenable)),
    observers: dart.finalFieldType(core.List$(navigator.NavigatorObserver)),
    debugLogDiagnostics: dart.finalFieldType(core.bool),
    routerNeglect: dart.finalFieldType(core.bool),
    restorationScopeId: dart.finalFieldType(dart.nullable(core.String)),
    [_key]: dart.finalFieldType(framework.GlobalKey$(navigator.NavigatorState)),
    [_matches]: dart.finalFieldType(core.List$(go_route_match.GoRouteMatch)),
    [_namedMatches]: dart.finalFieldType(core.Map$(core.String, go_route_match.GoRouteMatch)),
    [_pushCounts]: dart.finalFieldType(core.Map$(core.String, core.int)),
    [_pageBuilderForAppType]: dart.fieldType(dart.nullable(dart.fnType(navigator.Page$(dart.void), [], {}, {arguments: dart.nullable(core.Object), child: framework.Widget, key: key.LocalKey, name: dart.nullable(core.String), restorationId: core.String}))),
    [_errorBuilderForAppType]: dart.fieldType(dart.nullable(dart.fnType(framework.Widget, [framework.BuildContext, go_router_state.GoRouterState])))
  }));
  logging.setLogging = function setLogging(opts) {
    let t39;
    let enabled = opts && 'enabled' in opts ? opts.enabled : false;
    t39 = logging._subscription;
    t39 == null ? null : t39.cancel();
    if (!enabled) {
      return;
    }
    logging._subscription = logging.log.onRecord.listen(dart.fn(e => {
      if (e.level['>='](level.Level.SEVERE)) {
        let error = e.error;
        assertions.FlutterError.dumpErrorToConsole(new assertions.FlutterErrorDetails.new({exception: core.Exception.is(error) ? error : core.Exception.new(error), stack: e.stackTrace, library: e.loggerName, context: new assertions.ErrorDescription.new(e.message)}));
      } else {
        developer.log(e.message, {time: e.time, sequenceNumber: e.sequenceNumber, level: e.level.value, name: e.loggerName, zone: e.zone, error: e.error, stackTrace: e.stackTrace});
      }
    }, T$.LogRecordTovoid()));
  };
  dart.defineLazy(logging, {
    /*logging.log*/get log() {
      return logger.Logger.new("GoRouter");
    },
    /*logging._subscription*/get _subscription() {
      return null;
    },
    set _subscription(value) {}
  }, false);
  var HashUrlStrategy__platformLocation = dart.privateName(url_strategy, "HashUrlStrategy._platformLocation");
  path_strategy_web.setUrlPathStrategyImpl = function setUrlPathStrategyImpl(strategy) {
    url_strategy.setUrlStrategy(strategy === url_path_strategy.UrlPathStrategy.path ? new url_strategy.PathUrlStrategy.new() : C[65] || CT.C65);
  };
  path_parser.patternToRegExp = function patternToRegExp(pattern, parameters) {
    let buffer = new core.StringBuffer.new("^");
    let start = 0;
    for (let match of path_parser._parameterRegExp.allMatches(pattern)) {
      if (match.start > start) {
        buffer.write(core.RegExp.escape(pattern[$substring](start, match.start)));
      }
      let name = dart.nullCheck(match._get(1));
      let optionalPattern = match._get(2);
      let regex = optionalPattern != null ? path_parser._escapeGroup(optionalPattern, name) : "(?<" + name + ">[^/]+)";
      buffer.write(regex);
      parameters[$add](name);
      start = match.end;
    }
    if (start < pattern.length) {
      buffer.write(core.RegExp.escape(pattern[$substring](start)));
    }
    if (!pattern[$endsWith]("/")) {
      buffer.write("(?=/|$)");
    }
    return core.RegExp.new(buffer.toString(), {caseSensitive: false});
  };
  path_parser._escapeGroup = function _escapeGroup(group, name) {
    let escapedGroup = group[$replaceFirstMapped](core.RegExp.new("[:=!]"), dart.fn(match => "\\" + dart.str(match._get(0)), T$.MatchToString()));
    return "(?<" + name + ">" + escapedGroup + ")";
  };
  path_parser.patternToPath = function patternToPath(pattern, pathParameters) {
    let buffer = new core.StringBuffer.new("");
    let start = 0;
    for (let match of path_parser._parameterRegExp.allMatches(pattern)) {
      if (match.start > start) {
        buffer.write(pattern[$substring](start, match.start));
      }
      let name = dart.nullCheck(match._get(1));
      buffer.write(pathParameters[$_get](name));
      start = match.end;
    }
    if (start < pattern.length) {
      buffer.write(pattern[$substring](start));
    }
    return buffer.toString();
  };
  path_parser.extractPathParameters = function extractPathParameters(parameters, match) {
    return (() => {
      let t39 = new (T$.IdentityMapOfString$String()).new();
      for (let i = 0; i < parameters[$length]; i = i + 1)
        t39[$_set](parameters[$_get](i), dart.nullCheck(match.namedGroup(parameters[$_get](i))));
      return t39;
    })();
  };
  dart.defineLazy(path_parser, {
    /*path_parser._parameterRegExp*/get _parameterRegExp() {
      return core.RegExp.new(":(\\w+)(\\((?:\\\\.|[^\\\\()])+\\))?");
    }
  }, false);
  var route$ = dart.privateName(go_route_match, "GoRouteMatch.route");
  var subloc$0 = dart.privateName(go_route_match, "GoRouteMatch.subloc");
  var fullpath$0 = dart.privateName(go_route_match, "GoRouteMatch.fullpath");
  var encodedParams$ = dart.privateName(go_route_match, "GoRouteMatch.encodedParams");
  var queryParams$0 = dart.privateName(go_route_match, "GoRouteMatch.queryParams");
  var extra$0 = dart.privateName(go_route_match, "GoRouteMatch.extra");
  var error$0 = dart.privateName(go_route_match, "GoRouteMatch.error");
  var pageKey$0 = dart.privateName(go_route_match, "GoRouteMatch.pageKey");
  go_route_match.GoRouteMatch = class GoRouteMatch extends core.Object {
    get route() {
      return this[route$];
    }
    set route(value) {
      super.route = value;
    }
    get subloc() {
      return this[subloc$0];
    }
    set subloc(value) {
      super.subloc = value;
    }
    get fullpath() {
      return this[fullpath$0];
    }
    set fullpath(value) {
      super.fullpath = value;
    }
    get encodedParams() {
      return this[encodedParams$];
    }
    set encodedParams(value) {
      super.encodedParams = value;
    }
    get queryParams() {
      return this[queryParams$0];
    }
    set queryParams(value) {
      super.queryParams = value;
    }
    get extra() {
      return this[extra$0];
    }
    set extra(value) {
      super.extra = value;
    }
    get error() {
      return this[error$0];
    }
    set error(value) {
      super.error = value;
    }
    get pageKey() {
      return this[pageKey$0];
    }
    set pageKey(value) {
      super.pageKey = value;
    }
    static ['_#new#tearOff'](opts) {
      let route = opts && 'route' in opts ? opts.route : null;
      let subloc = opts && 'subloc' in opts ? opts.subloc : null;
      let fullpath = opts && 'fullpath' in opts ? opts.fullpath : null;
      let encodedParams = opts && 'encodedParams' in opts ? opts.encodedParams : null;
      let queryParams = opts && 'queryParams' in opts ? opts.queryParams : null;
      let extra = opts && 'extra' in opts ? opts.extra : null;
      let error = opts && 'error' in opts ? opts.error : null;
      let pageKey = opts && 'pageKey' in opts ? opts.pageKey : null;
      return new go_route_match.GoRouteMatch.new({route: route, subloc: subloc, fullpath: fullpath, encodedParams: encodedParams, queryParams: queryParams, extra: extra, error: error, pageKey: pageKey});
    }
    static matchNamed(opts) {
      let route = opts && 'route' in opts ? opts.route : null;
      let name = opts && 'name' in opts ? opts.name : null;
      let fullpath = opts && 'fullpath' in opts ? opts.fullpath : null;
      let params = opts && 'params' in opts ? opts.params : null;
      let queryParams = opts && 'queryParams' in opts ? opts.queryParams : null;
      let extra = opts && 'extra' in opts ? opts.extra : null;
      if (!(route.name != null)) dart.assertFailed(null, I[44], 46, 12, "route.name != null");
      if (!(dart.nullCheck(route.name)[$toLowerCase]() === name[$toLowerCase]())) dart.assertFailed(null, I[44], 47, 12, "route.name!.toLowerCase() == name.toLowerCase()");
      if (!dart.fn(() => {
        let paramNames = T$.JSArrayOfString().of([]);
        path_parser.patternToRegExp(fullpath, paramNames);
        for (let paramName of paramNames) {
          if (!params[$containsKey](paramName)) dart.assertFailed("missing param \"" + paramName + "\" for " + fullpath, I[44], 53, 16, "params.containsKey(paramName)");
        }
        for (let key of params[$keys]) {
          if (!paramNames[$contains](key)) dart.assertFailed("unknown param \"" + key + "\" for " + fullpath, I[44], 59, 16, "paramNames.contains(key)");
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[44], 48, 12, "() {\n      // check that we have all the params we need\n      final List<String> paramNames = <String>[];\n      patternToRegExp(fullpath, paramNames);\n      for (final String paramName in paramNames) {\n        assert(params.containsKey(paramName),\n            'missing param \"$paramName\" for $fullpath');\n      }\n\n      // check that we have don't have extra params\n      for (final String key in params.keys) {\n        assert(paramNames.contains(key), 'unknown param \"$key\" for $fullpath');\n      }\n      return true;\n    }()");
      let encodedParams = (() => {
        let t40 = new (T$.IdentityMapOfString$String()).new();
        for (let param of params[$entries])
          t40[$_set](param.key, core.Uri.encodeComponent(param.value));
        return t40;
      })();
      let subloc = go_route_match.GoRouteMatch._locationFor(fullpath, encodedParams);
      return new go_route_match.GoRouteMatch.new({route: route, subloc: subloc, fullpath: fullpath, encodedParams: encodedParams, queryParams: queryParams, extra: extra, error: null});
    }
    static ['_#matchNamed#tearOff'](opts) {
      let route = opts && 'route' in opts ? opts.route : null;
      let name = opts && 'name' in opts ? opts.name : null;
      let fullpath = opts && 'fullpath' in opts ? opts.fullpath : null;
      let params = opts && 'params' in opts ? opts.params : null;
      let queryParams = opts && 'queryParams' in opts ? opts.queryParams : null;
      let extra = opts && 'extra' in opts ? opts.extra : null;
      return go_route_match.GoRouteMatch.matchNamed({route: route, name: name, fullpath: fullpath, params: params, queryParams: queryParams, extra: extra});
    }
    static match(opts) {
      let route = opts && 'route' in opts ? opts.route : null;
      let restLoc = opts && 'restLoc' in opts ? opts.restLoc : null;
      let parentSubloc = opts && 'parentSubloc' in opts ? opts.parentSubloc : null;
      let path = opts && 'path' in opts ? opts.path : null;
      let fullpath = opts && 'fullpath' in opts ? opts.fullpath : null;
      let queryParams = opts && 'queryParams' in opts ? opts.queryParams : null;
      let extra = opts && 'extra' in opts ? opts.extra : null;
      if (!!path[$contains]("//")) dart.assertFailed(null, I[44], 91, 12, "!path.contains('//')");
      let match = route.matchPatternAsPrefix(restLoc);
      if (match == null) {
        return null;
      }
      let encodedParams = route.extractPathParams(match);
      let pathLoc = go_route_match.GoRouteMatch._locationFor(path, encodedParams);
      let subloc = go_router_delegate.GoRouterDelegate.fullLocFor(parentSubloc, pathLoc);
      return new go_route_match.GoRouteMatch.new({route: route, subloc: subloc, fullpath: fullpath, encodedParams: encodedParams, queryParams: queryParams, extra: extra, error: null});
    }
    get decodedParams() {
      return (() => {
        let t41 = new (T$.IdentityMapOfString$String()).new();
        for (let param of this.encodedParams[$entries])
          t41[$_set](param.key, core.Uri.decodeComponent(param.value));
        return t41;
      })();
    }
    toString() {
      return "GoRouteMatch(" + this.fullpath + ", " + dart.str(this.encodedParams) + ")";
    }
    static _locationFor(pattern, params) {
      return path_parser.patternToPath(pattern, params);
    }
  };
  (go_route_match.GoRouteMatch.new = function(opts) {
    let route = opts && 'route' in opts ? opts.route : null;
    let subloc = opts && 'subloc' in opts ? opts.subloc : null;
    let fullpath = opts && 'fullpath' in opts ? opts.fullpath : null;
    let encodedParams = opts && 'encodedParams' in opts ? opts.encodedParams : null;
    let queryParams = opts && 'queryParams' in opts ? opts.queryParams : null;
    let extra = opts && 'extra' in opts ? opts.extra : null;
    let error = opts && 'error' in opts ? opts.error : null;
    let pageKey = opts && 'pageKey' in opts ? opts.pageKey : null;
    this[route$] = route;
    this[subloc$0] = subloc;
    this[fullpath$0] = fullpath;
    this[encodedParams$] = encodedParams;
    this[queryParams$0] = queryParams;
    this[extra$0] = extra;
    this[error$0] = error;
    this[pageKey$0] = pageKey;
    if (!subloc[$startsWith]("/")) dart.assertFailed(null, I[44], 25, 16, "subloc.startsWith('/')");
    if (!core.Uri.parse(subloc).queryParameters[$isEmpty]) dart.assertFailed(null, I[44], 26, 16, "Uri.parse(subloc).queryParameters.isEmpty");
    if (!fullpath[$startsWith]("/")) dart.assertFailed(null, I[44], 27, 16, "fullpath.startsWith('/')");
    if (!core.Uri.parse(fullpath).queryParameters[$isEmpty]) dart.assertFailed(null, I[44], 28, 16, "Uri.parse(fullpath).queryParameters.isEmpty");
    if (!dart.fn(() => {
      for (let p of encodedParams[$entries]) {
        if (!(p.value === core.Uri.encodeComponent(core.Uri.decodeComponent(p.value)))) dart.assertFailed("encodedParams[" + p.key + "] is not encoded properly: \"" + p.value + "\"", I[44], 31, 20, "p.value == Uri.encodeComponent(Uri.decodeComponent(p.value))");
      }
      return true;
    }, T$.VoidTobool())()) dart.assertFailed(null, I[44], 29, 16, "() {\n          for (final MapEntry<String, String> p in encodedParams.entries) {\n            assert(p.value == Uri.encodeComponent(Uri.decodeComponent(p.value)),\n                'encodedParams[${p.key}] is not encoded properly: \"${p.value}\"');\n          }\n          return true;\n        }()");
    ;
  }).prototype = go_route_match.GoRouteMatch.prototype;
  dart.addTypeTests(go_route_match.GoRouteMatch);
  dart.addTypeCaches(go_route_match.GoRouteMatch);
  dart.setStaticMethodSignature(go_route_match.GoRouteMatch, () => ['matchNamed', 'match', '_locationFor']);
  dart.setGetterSignature(go_route_match.GoRouteMatch, () => ({
    __proto__: dart.getGetters(go_route_match.GoRouteMatch.__proto__),
    decodedParams: core.Map$(core.String, core.String)
  }));
  dart.setLibraryUri(go_route_match.GoRouteMatch, I[45]);
  dart.setFieldSignature(go_route_match.GoRouteMatch, () => ({
    __proto__: dart.getFields(go_route_match.GoRouteMatch.__proto__),
    route: dart.finalFieldType(go_route.GoRoute),
    subloc: dart.finalFieldType(core.String),
    fullpath: dart.finalFieldType(core.String),
    encodedParams: dart.finalFieldType(core.Map$(core.String, core.String)),
    queryParams: dart.finalFieldType(core.Map$(core.String, core.String)),
    extra: dart.finalFieldType(dart.nullable(core.Object)),
    error: dart.finalFieldType(dart.nullable(core.Exception)),
    pageKey: dart.finalFieldType(dart.nullable(key.ValueKey$(core.String)))
  }));
  dart.defineExtensionMethods(go_route_match.GoRouteMatch, ['toString']);
  const StatelessElement_SingleChildWidgetElementMixin$36$ = class StatelessElement_SingleChildWidgetElementMixin extends framework.StatelessElement {};
  (StatelessElement_SingleChildWidgetElementMixin$36$.new = function(widget) {
    nested.SingleChildWidgetElementMixin[dart.mixinNew].call(this);
    StatelessElement_SingleChildWidgetElementMixin$36$.__proto__.new.call(this, widget);
  }).prototype = StatelessElement_SingleChildWidgetElementMixin$36$.prototype;
  dart.applyMixin(StatelessElement_SingleChildWidgetElementMixin$36$, nested.SingleChildWidgetElementMixin);
  nested._NestedElement = class _NestedElement extends StatelessElement_SingleChildWidgetElementMixin$36$ {
    static ['_#new#tearOff'](widget) {
      return new nested._NestedElement.new(widget);
    }
    get widget() {
      return nested.Nested.as(super.widget);
    }
    build() {
      let t42, t42$, t42$0;
      let nestedHook = null;
      let nextNode = (t42$ = (t42 = this[_parent], t42 == null ? null : t42.injectedChild), t42$ == null ? this.widget[_child$] : t42$);
      for (let child of this.widget[_children][$reversed]) {
        nextNode = nestedHook = new nested._NestedHook.new({owner: this, wrappedWidget: child, injectedChild: nextNode});
      }
      if (nestedHook != null) {
        for (let node of this.nodes) {
          t42$0 = node;
          (() => {
            t42$0.wrappedChild = dart.nullCheck(nestedHook).wrappedWidget;
            t42$0.injectedChild = nestedHook.injectedChild;
            return t42$0;
          })();
          let next = nestedHook.injectedChild;
          if (nested._NestedHook.is(next)) {
            nestedHook = next;
          } else {
            break;
          }
        }
      }
      return dart.nullCheck(nextNode);
    }
  };
  (nested._NestedElement.new = function(widget) {
    this.nodes = T$.LinkedHashSetOf_NestedHookElement().new();
    nested._NestedElement.__proto__.new.call(this, widget);
    ;
  }).prototype = nested._NestedElement.prototype;
  dart.addTypeTests(nested._NestedElement);
  dart.addTypeCaches(nested._NestedElement);
  dart.setGetterSignature(nested._NestedElement, () => ({
    __proto__: dart.getGetters(nested._NestedElement.__proto__),
    widget: nested.Nested
  }));
  dart.setLibraryUri(nested._NestedElement, I[22]);
  dart.setFieldSignature(nested._NestedElement, () => ({
    __proto__: dart.getFields(nested._NestedElement.__proto__),
    nodes: dart.finalFieldType(core.Set$(nested._NestedHookElement))
  }));
  nested._NestedHook = class _NestedHook extends framework.StatelessWidget {
    static ['_#new#tearOff'](opts) {
      let injectedChild = opts && 'injectedChild' in opts ? opts.injectedChild : null;
      let wrappedWidget = opts && 'wrappedWidget' in opts ? opts.wrappedWidget : null;
      let owner = opts && 'owner' in opts ? opts.owner : null;
      return new nested._NestedHook.new({injectedChild: injectedChild, wrappedWidget: wrappedWidget, owner: owner});
    }
    createElement() {
      return new nested._NestedHookElement.new(this);
    }
    build(context) {
      return dart.throw(new core.StateError.new("handled internally"));
    }
  };
  (nested._NestedHook.new = function(opts) {
    let injectedChild = opts && 'injectedChild' in opts ? opts.injectedChild : null;
    let wrappedWidget = opts && 'wrappedWidget' in opts ? opts.wrappedWidget : null;
    let owner = opts && 'owner' in opts ? opts.owner : null;
    this.injectedChild = injectedChild;
    this.wrappedWidget = wrappedWidget;
    this.owner = owner;
    nested._NestedHook.__proto__.new.call(this);
    ;
  }).prototype = nested._NestedHook.prototype;
  dart.addTypeTests(nested._NestedHook);
  dart.addTypeCaches(nested._NestedHook);
  dart.setMethodSignature(nested._NestedHook, () => ({
    __proto__: dart.getMethods(nested._NestedHook.__proto__),
    createElement: dart.fnType(nested._NestedHookElement, []),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(nested._NestedHook, I[22]);
  dart.setFieldSignature(nested._NestedHook, () => ({
    __proto__: dart.getFields(nested._NestedHook.__proto__),
    wrappedWidget: dart.finalFieldType(nested.SingleChildWidget),
    injectedChild: dart.finalFieldType(dart.nullable(framework.Widget)),
    owner: dart.finalFieldType(nested._NestedElement)
  }));
  var _injectedChild = dart.privateName(nested, "_injectedChild");
  var _wrappedChild = dart.privateName(nested, "_wrappedChild");
  nested._NestedHookElement = class _NestedHookElement extends framework.StatelessElement {
    static ['_#new#tearOff'](widget) {
      return new nested._NestedHookElement.new(widget);
    }
    get widget() {
      return nested._NestedHook.as(super.widget);
    }
    get injectedChild() {
      return this[_injectedChild];
    }
    set injectedChild(value) {
      let previous = this[_injectedChild];
      if (nested._NestedHook.is(value) && nested._NestedHook.is(previous) && framework.Widget.canUpdate(value.wrappedWidget, previous.wrappedWidget)) {
        return;
      }
      if (!dart.equals(previous, value)) {
        this[_injectedChild] = value;
        this.visitChildren(dart.fn(e => e.markNeedsBuild(), T$.ElementTovoid()));
      }
    }
    get wrappedChild() {
      return this[_wrappedChild];
    }
    set wrappedChild(value) {
      if (!dart.equals(this[_wrappedChild], value)) {
        this[_wrappedChild] = value;
        this.markNeedsBuild();
      }
    }
    mount(parent, newSlot) {
      this.widget.owner.nodes.add(this);
      this[_wrappedChild] = this.widget.wrappedWidget;
      this[_injectedChild] = this.widget.injectedChild;
      super.mount(parent, newSlot);
    }
    unmount() {
      this.widget.owner.nodes.remove(this);
      super.unmount();
    }
    build() {
      return dart.nullCheck(this.wrappedChild);
    }
  };
  (nested._NestedHookElement.new = function(widget) {
    this[_injectedChild] = null;
    this[_wrappedChild] = null;
    nested._NestedHookElement.__proto__.new.call(this, widget);
    ;
  }).prototype = nested._NestedHookElement.prototype;
  dart.addTypeTests(nested._NestedHookElement);
  dart.addTypeCaches(nested._NestedHookElement);
  dart.setMethodSignature(nested._NestedHookElement, () => ({
    __proto__: dart.getMethods(nested._NestedHookElement.__proto__),
    mount: dart.fnType(dart.void, [dart.nullable(framework.Element), dart.dynamic])
  }));
  dart.setGetterSignature(nested._NestedHookElement, () => ({
    __proto__: dart.getGetters(nested._NestedHookElement.__proto__),
    widget: nested._NestedHook,
    injectedChild: dart.nullable(framework.Widget),
    wrappedChild: dart.nullable(nested.SingleChildWidget)
  }));
  dart.setSetterSignature(nested._NestedHookElement, () => ({
    __proto__: dart.getSetters(nested._NestedHookElement.__proto__),
    injectedChild: dart.nullable(framework.Widget),
    wrappedChild: dart.nullable(nested.SingleChildWidget)
  }));
  dart.setLibraryUri(nested._NestedHookElement, I[22]);
  dart.setFieldSignature(nested._NestedHookElement, () => ({
    __proto__: dart.getFields(nested._NestedHookElement.__proto__),
    [_injectedChild]: dart.fieldType(dart.nullable(framework.Widget)),
    [_wrappedChild]: dart.fieldType(dart.nullable(nested.SingleChildWidget))
  }));
  nested.SingleChildWidget = class SingleChildWidget extends core.Object {};
  (nested.SingleChildWidget.new = function() {
    ;
  }).prototype = nested.SingleChildWidget.prototype;
  dart.addTypeTests(nested.SingleChildWidget);
  dart.addTypeCaches(nested.SingleChildWidget);
  nested.SingleChildWidget[dart.implements] = () => [framework.Widget];
  dart.setLibraryUri(nested.SingleChildWidget, I[22]);
  const StatefulElement_SingleChildWidgetElementMixin$36 = class StatefulElement_SingleChildWidgetElementMixin extends framework.StatefulElement {};
  (StatefulElement_SingleChildWidgetElementMixin$36.new = function(widget) {
    nested.SingleChildWidgetElementMixin[dart.mixinNew].call(this);
    StatefulElement_SingleChildWidgetElementMixin$36.__proto__.new.call(this, widget);
  }).prototype = StatefulElement_SingleChildWidgetElementMixin$36.prototype;
  dart.applyMixin(StatefulElement_SingleChildWidgetElementMixin$36, nested.SingleChildWidgetElementMixin);
  nested.SingleChildStatefulElement = class SingleChildStatefulElement extends StatefulElement_SingleChildWidgetElementMixin$36 {
    static ['_#new#tearOff'](widget) {
      return new nested.SingleChildStatefulElement.new(widget);
    }
    get widget() {
      return nested.SingleChildStatefulWidget.as(super.widget);
    }
    get state() {
      return T$.SingleChildStateOfSingleChildStatefulWidget().as(super.state);
    }
    build() {
      if (this[_parent] != null) {
        return this.state.buildWithChild(this, dart.nullCheck(dart.nullCheck(this[_parent]).injectedChild));
      }
      return super.build();
    }
  };
  (nested.SingleChildStatefulElement.new = function(widget) {
    nested.SingleChildStatefulElement.__proto__.new.call(this, widget);
    ;
  }).prototype = nested.SingleChildStatefulElement.prototype;
  dart.addTypeTests(nested.SingleChildStatefulElement);
  dart.addTypeCaches(nested.SingleChildStatefulElement);
  dart.setGetterSignature(nested.SingleChildStatefulElement, () => ({
    __proto__: dart.getGetters(nested.SingleChildStatefulElement.__proto__),
    widget: nested.SingleChildStatefulWidget,
    state: nested.SingleChildState$(nested.SingleChildStatefulWidget)
  }));
  dart.setLibraryUri(nested.SingleChildStatefulElement, I[22]);
  var builder$8 = dart.privateName(nested, "SingleChildBuilder.builder");
  nested.SingleChildBuilder = class SingleChildBuilder extends nested.SingleChildStatelessWidget {
    get builder() {
      return this[builder$8];
    }
    set builder(value) {
      super.builder = value;
    }
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      return new nested.SingleChildBuilder.new({key: key, builder: builder, child: child});
    }
    buildWithChild(context, child) {
      let t43, t42;
      t42 = context;
      t43 = child;
      return this.builder(t42, t43);
    }
  };
  (nested.SingleChildBuilder.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let builder = opts && 'builder' in opts ? opts.builder : null;
    let child = opts && 'child' in opts ? opts.child : null;
    this[builder$8] = builder;
    nested.SingleChildBuilder.__proto__.new.call(this, {key: key, child: child});
    ;
  }).prototype = nested.SingleChildBuilder.prototype;
  dart.addTypeTests(nested.SingleChildBuilder);
  dart.addTypeCaches(nested.SingleChildBuilder);
  dart.setMethodSignature(nested.SingleChildBuilder, () => ({
    __proto__: dart.getMethods(nested.SingleChildBuilder.__proto__),
    buildWithChild: dart.fnType(framework.Widget, [framework.BuildContext, dart.nullable(framework.Widget)])
  }));
  dart.setLibraryUri(nested.SingleChildBuilder, I[22]);
  dart.setFieldSignature(nested.SingleChildBuilder, () => ({
    __proto__: dart.getFields(nested.SingleChildBuilder.__proto__),
    builder: dart.finalFieldType(dart.fnType(framework.Widget, [framework.BuildContext, dart.nullable(framework.Widget)]))
  }));
  nested.SingleChildStatelessWidgetMixin = class SingleChildStatelessWidgetMixin extends core.Object {};
  nested.SingleChildStatelessWidgetMixin[dart.mixinOn] = Object => class SingleChildStatelessWidgetMixin extends Object {
    get [_child$]() {
      return this.child;
    }
    createElement() {
      return new nested.SingleChildStatelessElement.new(this);
    }
    build(context) {
      return this.buildWithChild(context, this.child);
    }
  };
  (nested.SingleChildStatelessWidgetMixin[dart.mixinNew] = function() {
  }).prototype = nested.SingleChildStatelessWidgetMixin.prototype;
  dart.addTypeTests(nested.SingleChildStatelessWidgetMixin);
  dart.addTypeCaches(nested.SingleChildStatelessWidgetMixin);
  nested.SingleChildStatelessWidgetMixin[dart.implements] = () => [framework.StatelessWidget, nested.SingleChildStatelessWidget, core.Object];
  dart.setMethodSignature(nested.SingleChildStatelessWidgetMixin, () => ({
    __proto__: dart.getMethods(nested.SingleChildStatelessWidgetMixin.__proto__),
    createElement: dart.fnType(nested.SingleChildStatelessElement, []),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(nested.SingleChildStatelessWidgetMixin, () => ({
    __proto__: dart.getGetters(nested.SingleChildStatelessWidgetMixin.__proto__),
    [_child$]: dart.nullable(framework.Widget)
  }));
  dart.setLibraryUri(nested.SingleChildStatelessWidgetMixin, I[22]);
  nested.SingleChildStatefulWidgetMixin = class SingleChildStatefulWidgetMixin extends framework.StatefulWidget {};
  nested.SingleChildStatefulWidgetMixin[dart.mixinOn] = StatefulWidget => class SingleChildStatefulWidgetMixin extends StatefulWidget {
    createElement() {
      return new nested._SingleChildStatefulMixinElement.new(this);
    }
  };
  dart.addTypeTests(nested.SingleChildStatefulWidgetMixin);
  dart.addTypeCaches(nested.SingleChildStatefulWidgetMixin);
  nested.SingleChildStatefulWidgetMixin[dart.implements] = () => [nested.SingleChildWidget, framework.StatefulWidget];
  dart.setMethodSignature(nested.SingleChildStatefulWidgetMixin, () => ({
    __proto__: dart.getMethods(nested.SingleChildStatefulWidgetMixin.__proto__),
    createElement: dart.fnType(nested._SingleChildStatefulMixinElement, [])
  }));
  dart.setLibraryUri(nested.SingleChildStatefulWidgetMixin, I[22]);
  const _is_SingleChildStateMixin_default = Symbol('_is_SingleChildStateMixin_default');
  nested.SingleChildStateMixin$ = dart.generic(T => {
    class SingleChildStateMixin extends framework.State$(T) {}
    SingleChildStateMixin[dart.mixinOn] = State => class SingleChildStateMixin extends State {
      build(context) {
        return this.buildWithChild(context, dart.nullCheck(nested.SingleChildStatefulWidgetMixin.as(this.widget).child));
      }
    };
    dart.addTypeTests(SingleChildStateMixin);
    SingleChildStateMixin.prototype[_is_SingleChildStateMixin_default] = true;
    dart.addTypeCaches(SingleChildStateMixin);
    SingleChildStateMixin[dart.implements] = () => [framework.State$(T)];
    dart.setMethodSignature(SingleChildStateMixin, () => ({
      __proto__: dart.getMethods(SingleChildStateMixin.__proto__),
      build: dart.fnType(framework.Widget, [framework.BuildContext])
    }));
    dart.setLibraryUri(SingleChildStateMixin, I[22]);
    return SingleChildStateMixin;
  });
  nested.SingleChildStateMixin = nested.SingleChildStateMixin$();
  dart.addTypeTests(nested.SingleChildStateMixin, _is_SingleChildStateMixin_default);
  const StatefulElement_SingleChildWidgetElementMixin$36$ = class StatefulElement_SingleChildWidgetElementMixin extends framework.StatefulElement {};
  (StatefulElement_SingleChildWidgetElementMixin$36$.new = function(widget) {
    nested.SingleChildWidgetElementMixin[dart.mixinNew].call(this);
    StatefulElement_SingleChildWidgetElementMixin$36$.__proto__.new.call(this, widget);
  }).prototype = StatefulElement_SingleChildWidgetElementMixin$36$.prototype;
  dart.applyMixin(StatefulElement_SingleChildWidgetElementMixin$36$, nested.SingleChildWidgetElementMixin);
  nested._SingleChildStatefulMixinElement = class _SingleChildStatefulMixinElement extends StatefulElement_SingleChildWidgetElementMixin$36$ {
    static ['_#new#tearOff'](widget) {
      return new nested._SingleChildStatefulMixinElement.new(widget);
    }
    get widget() {
      return nested.SingleChildStatefulWidgetMixin.as(super.widget);
    }
    get state() {
      return T$.SingleChildStateMixinOfStatefulWidget().as(super.state);
    }
    build() {
      if (this[_parent] != null) {
        return this.state.buildWithChild(this, dart.nullCheck(dart.nullCheck(this[_parent]).injectedChild));
      }
      return super.build();
    }
  };
  (nested._SingleChildStatefulMixinElement.new = function(widget) {
    nested._SingleChildStatefulMixinElement.__proto__.new.call(this, widget);
    ;
  }).prototype = nested._SingleChildStatefulMixinElement.prototype;
  dart.addTypeTests(nested._SingleChildStatefulMixinElement);
  dart.addTypeCaches(nested._SingleChildStatefulMixinElement);
  dart.setGetterSignature(nested._SingleChildStatefulMixinElement, () => ({
    __proto__: dart.getGetters(nested._SingleChildStatefulMixinElement.__proto__),
    widget: nested.SingleChildStatefulWidgetMixin,
    state: nested.SingleChildStateMixin$(framework.StatefulWidget)
  }));
  dart.setLibraryUri(nested._SingleChildStatefulMixinElement, I[22]);
  nested.SingleChildInheritedElementMixin = class SingleChildInheritedElementMixin extends core.Object {};
  nested.SingleChildInheritedElementMixin[dart.mixinOn] = _SingleChildInheritedElementMixin$36InheritedElement$36SingleChildWidgetElementMixin => class SingleChildInheritedElementMixin extends _SingleChildInheritedElementMixin$36InheritedElement$36SingleChildWidgetElementMixin {
    build() {
      if (this[_parent] != null) {
        return dart.nullCheck(dart.nullCheck(this[_parent]).injectedChild);
      }
      return super.build();
    }
  };
  dart.addTypeTests(nested.SingleChildInheritedElementMixin);
  dart.addTypeCaches(nested.SingleChildInheritedElementMixin);
  nested.SingleChildInheritedElementMixin[dart.implements] = () => [nested.SingleChildWidgetElementMixin, framework.InheritedElement];
  dart.setMethodSignature(nested.SingleChildInheritedElementMixin, () => ({
    __proto__: dart.getMethods(nested.SingleChildInheritedElementMixin.__proto__),
    build: dart.fnType(framework.Widget, [])
  }));
  dart.setLibraryUri(nested.SingleChildInheritedElementMixin, I[22]);
  auth_form_widget.AuthFormWidget = class AuthFormWidget extends framework.StatefulWidget {
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      return new auth_form_widget.AuthFormWidget.new({key: key});
    }
    createState() {
      return new auth_form_widget._AuthFormWidgetState.new();
    }
  };
  (auth_form_widget.AuthFormWidget.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    auth_form_widget.AuthFormWidget.__proto__.new.call(this, {key: key});
    ;
  }).prototype = auth_form_widget.AuthFormWidget.prototype;
  dart.addTypeTests(auth_form_widget.AuthFormWidget);
  dart.addTypeCaches(auth_form_widget.AuthFormWidget);
  dart.setMethodSignature(auth_form_widget.AuthFormWidget, () => ({
    __proto__: dart.getMethods(auth_form_widget.AuthFormWidget.__proto__),
    createState: dart.fnType(framework.State$(auth_form_widget.AuthFormWidget), [])
  }));
  dart.setLibraryUri(auth_form_widget.AuthFormWidget, I[46]);
  var _formKey = dart.privateName(auth_form_widget, "_formKey");
  auth_form_widget._AuthFormWidgetState = class _AuthFormWidgetState extends framework.State$(auth_form_widget.AuthFormWidget) {
    build(context) {
      return new basic.Padding.new({padding: C[58] || CT.C58, child: new form.Form.new({key: this[_formKey], child: new text_form_field.TextFormField.new()})});
    }
    static ['_#new#tearOff']() {
      return new auth_form_widget._AuthFormWidgetState.new();
    }
  };
  (auth_form_widget._AuthFormWidgetState.new = function() {
    this[_formKey] = T$.GlobalKeyOfFormState().new();
    this.authValidator = new auth_validators.AuthValidators.new();
    auth_form_widget._AuthFormWidgetState.__proto__.new.call(this);
    ;
  }).prototype = auth_form_widget._AuthFormWidgetState.prototype;
  dart.addTypeTests(auth_form_widget._AuthFormWidgetState);
  dart.addTypeCaches(auth_form_widget._AuthFormWidgetState);
  dart.setMethodSignature(auth_form_widget._AuthFormWidgetState, () => ({
    __proto__: dart.getMethods(auth_form_widget._AuthFormWidgetState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(auth_form_widget._AuthFormWidgetState, I[46]);
  dart.setFieldSignature(auth_form_widget._AuthFormWidgetState, () => ({
    __proto__: dart.getFields(auth_form_widget._AuthFormWidgetState.__proto__),
    [_formKey]: dart.finalFieldType(framework.GlobalKey$(form.FormState)),
    authValidator: dart.finalFieldType(auth_validators.AuthValidators)
  }));
  var error$1 = dart.privateName(go_router_cupertino, "GoRouterCupertinoErrorScreen.error");
  var _HeroTag_navigator = dart.privateName(nav_bar, "_HeroTag.navigator");
  var CupertinoNavigationBar_heroTag = dart.privateName(nav_bar, "CupertinoNavigationBar.heroTag");
  var CupertinoNavigationBar_transitionBetweenRoutes = dart.privateName(nav_bar, "CupertinoNavigationBar.transitionBetweenRoutes");
  var Border_left = dart.privateName(box_border, "Border.left");
  var Border_bottom = dart.privateName(box_border, "Border.bottom");
  var Border_right = dart.privateName(box_border, "Border.right");
  var Border_top = dart.privateName(box_border, "Border.top");
  var CupertinoNavigationBar_border = dart.privateName(nav_bar, "CupertinoNavigationBar.border");
  var CupertinoNavigationBar_padding = dart.privateName(nav_bar, "CupertinoNavigationBar.padding");
  var CupertinoNavigationBar_brightness = dart.privateName(nav_bar, "CupertinoNavigationBar.brightness");
  var CupertinoNavigationBar_backgroundColor = dart.privateName(nav_bar, "CupertinoNavigationBar.backgroundColor");
  var CupertinoNavigationBar_trailing = dart.privateName(nav_bar, "CupertinoNavigationBar.trailing");
  var CupertinoNavigationBar_middle = dart.privateName(nav_bar, "CupertinoNavigationBar.middle");
  var CupertinoNavigationBar_previousPageTitle = dart.privateName(nav_bar, "CupertinoNavigationBar.previousPageTitle");
  var CupertinoNavigationBar_automaticallyImplyMiddle = dart.privateName(nav_bar, "CupertinoNavigationBar.automaticallyImplyMiddle");
  var CupertinoNavigationBar_automaticallyImplyLeading = dart.privateName(nav_bar, "CupertinoNavigationBar.automaticallyImplyLeading");
  var CupertinoNavigationBar_leading = dart.privateName(nav_bar, "CupertinoNavigationBar.leading");
  go_router_cupertino.GoRouterCupertinoErrorScreen = class GoRouterCupertinoErrorScreen extends framework.StatelessWidget {
    get error() {
      return this[error$1];
    }
    set error(value) {
      super.error = value;
    }
    static ['_#new#tearOff'](error, opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      return new go_router_cupertino.GoRouterCupertinoErrorScreen.new(error, {key: key});
    }
    build(context) {
      let t42, t42$;
      return new page_scaffold.CupertinoPageScaffold.new({navigationBar: C[67] || CT.C67, child: new basic.Center.new({child: new basic.Column.new({mainAxisAlignment: flex.MainAxisAlignment.center, children: T$.JSArrayOfWidget().of([new text.Text.new((t42$ = (t42 = this.error, t42 == null ? null : dart.toString(t42)), t42$ == null ? "page not found" : t42$)), new button.CupertinoButton.new({onPressed: dart.fn(() => go_router['GoRouterHelper|go'](context, "/"), T$.VoidTovoid()), child: C[75] || CT.C75})])})})});
    }
  };
  (go_router_cupertino.GoRouterCupertinoErrorScreen.new = function(error, opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    this[error$1] = error;
    go_router_cupertino.GoRouterCupertinoErrorScreen.__proto__.new.call(this, {key: key});
    ;
  }).prototype = go_router_cupertino.GoRouterCupertinoErrorScreen.prototype;
  dart.addTypeTests(go_router_cupertino.GoRouterCupertinoErrorScreen);
  dart.addTypeCaches(go_router_cupertino.GoRouterCupertinoErrorScreen);
  dart.setMethodSignature(go_router_cupertino.GoRouterCupertinoErrorScreen, () => ({
    __proto__: dart.getMethods(go_router_cupertino.GoRouterCupertinoErrorScreen.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(go_router_cupertino.GoRouterCupertinoErrorScreen, I[47]);
  dart.setFieldSignature(go_router_cupertino.GoRouterCupertinoErrorScreen, () => ({
    __proto__: dart.getFields(go_router_cupertino.GoRouterCupertinoErrorScreen.__proto__),
    error: dart.finalFieldType(dart.nullable(core.Exception))
  }));
  go_router_cupertino.isCupertinoApp = function isCupertinoApp(elem) {
    return elem.findAncestorWidgetOfExactType(app$.CupertinoApp) != null;
  };
  go_router_cupertino.pageBuilderForCupertinoApp = function pageBuilderForCupertinoApp(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let name = opts && 'name' in opts ? opts.name : null;
    let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
    let restorationId = opts && 'restorationId' in opts ? opts.restorationId : null;
    let child = opts && 'child' in opts ? opts.child : null;
    return new (T$.CupertinoPageOfvoid()).new({name: name, arguments: $arguments, key: key, restorationId: restorationId, child: child});
  };
  var error$2 = dart.privateName(go_router_error_page, "GoRouterErrorScreen.error");
  var FontWeight_value = dart.privateName(ui, "FontWeight.value");
  var FontWeight_index = dart.privateName(ui, "FontWeight.index");
  go_router_error_page.GoRouterErrorScreen = class GoRouterErrorScreen extends framework.StatelessWidget {
    get error() {
      return this[error$2];
    }
    set error(value) {
      super.error = value;
    }
    static ['_#new#tearOff'](error, opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      return new go_router_error_page.GoRouterErrorScreen.new(error, {key: key});
    }
    build(context) {
      let t42, t42$;
      return new safe_area.SafeArea.new({child: new basic.Center.new({child: new basic.Column.new({mainAxisAlignment: flex.MainAxisAlignment.center, children: T$.JSArrayOfWidget().of([C[76] || CT.C76, C[79] || CT.C79, new text.Text.new((t42$ = (t42 = this.error, t42 == null ? null : dart.toString(t42)), t42$ == null ? "page not found" : t42$)), C[79] || CT.C79, new go_router_error_page._Button.new({onPressed: dart.fn(() => go_router['GoRouterHelper|go'](context, "/"), T$.VoidTovoid()), child: C[80] || CT.C80})])})})});
    }
  };
  (go_router_error_page.GoRouterErrorScreen.new = function(error, opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    this[error$2] = error;
    go_router_error_page.GoRouterErrorScreen.__proto__.new.call(this, {key: key});
    ;
  }).prototype = go_router_error_page.GoRouterErrorScreen.prototype;
  dart.addTypeTests(go_router_error_page.GoRouterErrorScreen);
  dart.addTypeCaches(go_router_error_page.GoRouterErrorScreen);
  dart.setMethodSignature(go_router_error_page.GoRouterErrorScreen, () => ({
    __proto__: dart.getMethods(go_router_error_page.GoRouterErrorScreen.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(go_router_error_page.GoRouterErrorScreen, I[48]);
  dart.setFieldSignature(go_router_error_page.GoRouterErrorScreen, () => ({
    __proto__: dart.getFields(go_router_error_page.GoRouterErrorScreen.__proto__),
    error: dart.finalFieldType(dart.nullable(core.Exception))
  }));
  dart.setStaticFieldSignature(go_router_error_page.GoRouterErrorScreen, () => ['_kWhite']);
  dart.defineLazy(go_router_error_page.GoRouterErrorScreen, {
    /*go_router_error_page.GoRouterErrorScreen._kWhite*/get _kWhite() {
      return C[82] || CT.C82;
    }
  }, false);
  var onPressed$ = dart.privateName(go_router_error_page, "_Button.onPressed");
  var child$0 = dart.privateName(go_router_error_page, "_Button.child");
  go_router_error_page._Button = class _Button extends framework.StatefulWidget {
    get onPressed() {
      return this[onPressed$];
    }
    set onPressed(value) {
      super.onPressed = value;
    }
    get child() {
      return this[child$0];
    }
    set child(value) {
      super.child = value;
    }
    static ['_#new#tearOff'](opts) {
      let onPressed = opts && 'onPressed' in opts ? opts.onPressed : null;
      let child = opts && 'child' in opts ? opts.child : null;
      let key = opts && 'key' in opts ? opts.key : null;
      return new go_router_error_page._Button.new({onPressed: onPressed, child: child, key: key});
    }
    createState() {
      return new go_router_error_page._ButtonState.new();
    }
  };
  (go_router_error_page._Button.new = function(opts) {
    let onPressed = opts && 'onPressed' in opts ? opts.onPressed : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let key = opts && 'key' in opts ? opts.key : null;
    this[onPressed$] = onPressed;
    this[child$0] = child;
    go_router_error_page._Button.__proto__.new.call(this, {key: key});
    ;
  }).prototype = go_router_error_page._Button.prototype;
  dart.addTypeTests(go_router_error_page._Button);
  dart.addTypeCaches(go_router_error_page._Button);
  dart.setMethodSignature(go_router_error_page._Button, () => ({
    __proto__: dart.getMethods(go_router_error_page._Button.__proto__),
    createState: dart.fnType(framework.State$(go_router_error_page._Button), [])
  }));
  dart.setLibraryUri(go_router_error_page._Button, I[48]);
  dart.setFieldSignature(go_router_error_page._Button, () => ({
    __proto__: dart.getFields(go_router_error_page._Button.__proto__),
    onPressed: dart.finalFieldType(dart.fnType(dart.void, [])),
    child: dart.finalFieldType(framework.Widget)
  }));
  var ___ButtonState__color = dart.privateName(go_router_error_page, "_#_ButtonState#_color");
  var _color = dart.privateName(go_router_error_page, "_color");
  go_router_error_page._ButtonState = class _ButtonState extends framework.State$(go_router_error_page._Button) {
    get [_color]() {
      let t42;
      t42 = this[___ButtonState__color];
      return t42 == null ? dart.throw(new _internal.LateError.fieldNI("_color")) : t42;
    }
    set [_color](_color$35param) {
      if (this[___ButtonState__color] == null)
        this[___ButtonState__color] = _color$35param;
      else
        dart.throw(new _internal.LateError.fieldAI("_color"));
    }
    didChangeDependencies() {
      let t42, t42$;
      super.didChangeDependencies();
      this[_color] = (t42$ = (t42 = framework.Element.as(this.context).findAncestorWidgetOfExactType(app$0.WidgetsApp), t42 == null ? null : t42.color), t42$ == null ? C[83] || CT.C83 : t42$);
    }
    build(context) {
      return new gesture_detector.GestureDetector.new({onTap: this.widget.onPressed, child: new container.Container.new({padding: C[58] || CT.C58, color: this[_color], child: this.widget.child})});
    }
    static ['_#new#tearOff']() {
      return new go_router_error_page._ButtonState.new();
    }
  };
  (go_router_error_page._ButtonState.new = function() {
    this[___ButtonState__color] = null;
    go_router_error_page._ButtonState.__proto__.new.call(this);
    ;
  }).prototype = go_router_error_page._ButtonState.prototype;
  dart.addTypeTests(go_router_error_page._ButtonState);
  dart.addTypeCaches(go_router_error_page._ButtonState);
  dart.setMethodSignature(go_router_error_page._ButtonState, () => ({
    __proto__: dart.getMethods(go_router_error_page._ButtonState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(go_router_error_page._ButtonState, () => ({
    __proto__: dart.getGetters(go_router_error_page._ButtonState.__proto__),
    [_color]: ui.Color
  }));
  dart.setSetterSignature(go_router_error_page._ButtonState, () => ({
    __proto__: dart.getSetters(go_router_error_page._ButtonState.__proto__),
    [_color]: ui.Color
  }));
  dart.setLibraryUri(go_router_error_page._ButtonState, I[48]);
  dart.setFieldSignature(go_router_error_page._ButtonState, () => ({
    __proto__: dart.getFields(go_router_error_page._ButtonState.__proto__),
    [___ButtonState__color]: dart.fieldType(dart.nullable(ui.Color))
  }));
  var error$3 = dart.privateName(go_router_material, "GoRouterMaterialErrorScreen.error");
  go_router_material.GoRouterMaterialErrorScreen = class GoRouterMaterialErrorScreen extends framework.StatelessWidget {
    get error() {
      return this[error$3];
    }
    set error(value) {
      super.error = value;
    }
    static ['_#new#tearOff'](error, opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      return new go_router_material.GoRouterMaterialErrorScreen.new(error, {key: key});
    }
    build(context) {
      let t42, t42$;
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: C[74] || CT.C74}), body: new basic.Center.new({child: new basic.Column.new({mainAxisAlignment: flex.MainAxisAlignment.center, children: T$.JSArrayOfWidget().of([new selectable_text.SelectableText.new((t42$ = (t42 = this.error, t42 == null ? null : dart.toString(t42)), t42$ == null ? "page not found" : t42$)), new text_button.TextButton.new({onPressed: dart.fn(() => go_router['GoRouterHelper|go'](context, "/"), T$.VoidTovoid()), child: C[75] || CT.C75})])})})});
    }
  };
  (go_router_material.GoRouterMaterialErrorScreen.new = function(error, opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    this[error$3] = error;
    go_router_material.GoRouterMaterialErrorScreen.__proto__.new.call(this, {key: key});
    ;
  }).prototype = go_router_material.GoRouterMaterialErrorScreen.prototype;
  dart.addTypeTests(go_router_material.GoRouterMaterialErrorScreen);
  dart.addTypeCaches(go_router_material.GoRouterMaterialErrorScreen);
  dart.setMethodSignature(go_router_material.GoRouterMaterialErrorScreen, () => ({
    __proto__: dart.getMethods(go_router_material.GoRouterMaterialErrorScreen.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(go_router_material.GoRouterMaterialErrorScreen, I[49]);
  dart.setFieldSignature(go_router_material.GoRouterMaterialErrorScreen, () => ({
    __proto__: dart.getFields(go_router_material.GoRouterMaterialErrorScreen.__proto__),
    error: dart.finalFieldType(dart.nullable(core.Exception))
  }));
  go_router_material.isMaterialApp = function isMaterialApp(elem) {
    return elem.findAncestorWidgetOfExactType(app.MaterialApp) != null;
  };
  go_router_material.pageBuilderForMaterialApp = function pageBuilderForMaterialApp(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let name = opts && 'name' in opts ? opts.name : null;
    let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
    let restorationId = opts && 'restorationId' in opts ? opts.restorationId : null;
    let child = opts && 'child' in opts ? opts.child : null;
    return new (T$.MaterialPageOfvoid()).new({name: name, arguments: $arguments, key: key, restorationId: restorationId, child: child});
  };
  auth_validators.AuthValidators = class AuthValidators extends core.Object {
    emailValidator(val) {
      let email = dart.nullCast(val, core.String);
      if (email.length <= 4) return auth_validators.AuthValidators.emailErrMsg;
      let hasAtSymbol = email[$contains]("@");
      let indexOfAt = email[$indexOf]("@");
      let numbersOfAt = "@"[$allMatches](email)[$length];
      if (!hasAtSymbol) return auth_validators.AuthValidators.emailErrMsg;
      if (numbersOfAt !== 1) return auth_validators.AuthValidators.emailErrMsg;
      if (indexOfAt === 0 || indexOfAt === email.length - 1) return auth_validators.AuthValidators.emailErrMsg;
      return null;
    }
    passwordVlidator(val) {
      let password = dart.nullCast(val, core.String);
      if (password[$isEmpty] || password.length <= 7) return auth_validators.AuthValidators.passwordErrMsg;
      return null;
    }
    confirmPasswordValidator(val, firstPasswordInpTxt) {
      let firstPassword = core.String.as(firstPasswordInpTxt);
      let secondPassword = dart.nullCast(val, core.String);
      if (firstPassword[$isEmpty] || secondPassword[$isEmpty] || firstPassword.length !== secondPassword.length) {
        return "Пароли не совпадают";
      }
      if (firstPassword !== secondPassword) return "Пароли не совпадают";
      return null;
    }
    static ['_#new#tearOff']() {
      return new auth_validators.AuthValidators.new();
    }
  };
  (auth_validators.AuthValidators.new = function() {
    ;
  }).prototype = auth_validators.AuthValidators.prototype;
  dart.addTypeTests(auth_validators.AuthValidators);
  dart.addTypeCaches(auth_validators.AuthValidators);
  dart.setMethodSignature(auth_validators.AuthValidators, () => ({
    __proto__: dart.getMethods(auth_validators.AuthValidators.__proto__),
    emailValidator: dart.fnType(dart.nullable(core.String), [dart.nullable(core.String)]),
    passwordVlidator: dart.fnType(dart.nullable(core.String), [dart.nullable(core.String)]),
    confirmPasswordValidator: dart.fnType(dart.nullable(core.String), [dart.nullable(core.String), dart.dynamic])
  }));
  dart.setLibraryUri(auth_validators.AuthValidators, I[50]);
  dart.setStaticFieldSignature(auth_validators.AuthValidators, () => ['emailErrMsg', 'passwordErrMsg', 'confirmPasswordErrMsg', 'userAlreadyExistsErrMsg']);
  dart.defineLazy(auth_validators.AuthValidators, {
    /*auth_validators.AuthValidators.emailErrMsg*/get emailErrMsg() {
      return "Некорректный адрес электронной почты";
    },
    /*auth_validators.AuthValidators.passwordErrMsg*/get passwordErrMsg() {
      return "Пароль должен состоять как минимум из 6 символов";
    },
    /*auth_validators.AuthValidators.confirmPasswordErrMsg*/get confirmPasswordErrMsg() {
      return "Пароли не совпадают";
    },
    /*auth_validators.AuthValidators.userAlreadyExistsErrMsg*/get userAlreadyExistsErrMsg() {
      return "Пользователь с данной электронной почтой уже зарегистрирован";
    }
  }, false);
  var name$1 = dart.privateName(level, "Level.name");
  var value$0 = dart.privateName(level, "Level.value");
  level.Level = class Level extends core.Object {
    get name() {
      return this[name$1];
    }
    set name(value) {
      super.name = value;
    }
    get value() {
      return this[value$0];
    }
    set value(value) {
      super.value = value;
    }
    static ['_#new#tearOff'](name, value) {
      return new level.Level.new(name, value);
    }
    _equals(other) {
      if (other == null) return false;
      return level.Level.is(other) && this.value === other.value;
    }
    ['<'](other) {
      return this.value < other.value;
    }
    ['<='](other) {
      return this.value <= other.value;
    }
    ['>'](other) {
      return this.value > other.value;
    }
    ['>='](other) {
      return this.value >= other.value;
    }
    compareTo(other) {
      level.Level.as(other);
      return this.value - other.value;
    }
    get hashCode() {
      return this.value;
    }
    toString() {
      return this.name;
    }
  };
  (level.Level.new = function(name, value) {
    this[name$1] = name;
    this[value$0] = value;
    ;
  }).prototype = level.Level.prototype;
  dart.addTypeTests(level.Level);
  dart.addTypeCaches(level.Level);
  level.Level[dart.implements] = () => [core.Comparable$(level.Level)];
  dart.setMethodSignature(level.Level, () => ({
    __proto__: dart.getMethods(level.Level.__proto__),
    '<': dart.fnType(core.bool, [level.Level]),
    '<=': dart.fnType(core.bool, [level.Level]),
    '>': dart.fnType(core.bool, [level.Level]),
    '>=': dart.fnType(core.bool, [level.Level]),
    compareTo: dart.fnType(core.int, [dart.nullable(core.Object)]),
    [$compareTo]: dart.fnType(core.int, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(level.Level, I[51]);
  dart.setFieldSignature(level.Level, () => ({
    __proto__: dart.getFields(level.Level.__proto__),
    name: dart.finalFieldType(core.String),
    value: dart.finalFieldType(core.int)
  }));
  dart.setStaticFieldSignature(level.Level, () => ['ALL', 'OFF', 'FINEST', 'FINER', 'FINE', 'CONFIG', 'INFO', 'WARNING', 'SEVERE', 'SHOUT', 'LEVELS']);
  dart.defineExtensionMethods(level.Level, ['_equals', 'compareTo', 'toString']);
  dart.defineExtensionAccessors(level.Level, ['hashCode']);
  dart.defineLazy(level.Level, {
    /*level.Level.ALL*/get ALL() {
      return C[84] || CT.C84;
    },
    /*level.Level.OFF*/get OFF() {
      return C[85] || CT.C85;
    },
    /*level.Level.FINEST*/get FINEST() {
      return C[86] || CT.C86;
    },
    /*level.Level.FINER*/get FINER() {
      return C[87] || CT.C87;
    },
    /*level.Level.FINE*/get FINE() {
      return C[88] || CT.C88;
    },
    /*level.Level.CONFIG*/get CONFIG() {
      return C[89] || CT.C89;
    },
    /*level.Level.INFO*/get INFO() {
      return C[90] || CT.C90;
    },
    /*level.Level.WARNING*/get WARNING() {
      return C[91] || CT.C91;
    },
    /*level.Level.SEVERE*/get SEVERE() {
      return C[92] || CT.C92;
    },
    /*level.Level.SHOUT*/get SHOUT() {
      return C[93] || CT.C93;
    },
    /*level.Level.LEVELS*/get LEVELS() {
      return C[94] || CT.C94;
    }
  }, false);
  var level$ = dart.privateName(log_record, "LogRecord.level");
  var message$ = dart.privateName(log_record, "LogRecord.message");
  var object$ = dart.privateName(log_record, "LogRecord.object");
  var loggerName$ = dart.privateName(log_record, "LogRecord.loggerName");
  var time = dart.privateName(log_record, "LogRecord.time");
  var sequenceNumber = dart.privateName(log_record, "LogRecord.sequenceNumber");
  var error$4 = dart.privateName(log_record, "LogRecord.error");
  var stackTrace$ = dart.privateName(log_record, "LogRecord.stackTrace");
  var zone$ = dart.privateName(log_record, "LogRecord.zone");
  log_record.LogRecord = class LogRecord extends core.Object {
    get level() {
      return this[level$];
    }
    set level(value) {
      super.level = value;
    }
    get message() {
      return this[message$];
    }
    set message(value) {
      super.message = value;
    }
    get object() {
      return this[object$];
    }
    set object(value) {
      super.object = value;
    }
    get loggerName() {
      return this[loggerName$];
    }
    set loggerName(value) {
      super.loggerName = value;
    }
    get time() {
      return this[time];
    }
    set time(value) {
      super.time = value;
    }
    get sequenceNumber() {
      return this[sequenceNumber];
    }
    set sequenceNumber(value) {
      super.sequenceNumber = value;
    }
    get error() {
      return this[error$4];
    }
    set error(value) {
      super.error = value;
    }
    get stackTrace() {
      return this[stackTrace$];
    }
    set stackTrace(value) {
      super.stackTrace = value;
    }
    get zone() {
      return this[zone$];
    }
    set zone(value) {
      super.zone = value;
    }
    static ['_#new#tearOff'](level, message, loggerName, error = null, stackTrace = null, zone = null, object = null) {
      return new log_record.LogRecord.new(level, message, loggerName, error, stackTrace, zone, object);
    }
    toString() {
      return "[" + this.level.name + "] " + this.loggerName + ": " + this.message;
    }
  };
  (log_record.LogRecord.new = function(level, message, loggerName, error = null, stackTrace = null, zone = null, object = null) {
    let t42;
    this[level$] = level;
    this[message$] = message;
    this[loggerName$] = loggerName;
    this[error$4] = error;
    this[stackTrace$] = stackTrace;
    this[zone$] = zone;
    this[object$] = object;
    this[time] = new core.DateTime.now();
    this[sequenceNumber] = (t42 = log_record.LogRecord._nextNumber, log_record.LogRecord._nextNumber = dart.notNull(t42) + 1, t42);
    ;
  }).prototype = log_record.LogRecord.prototype;
  dart.addTypeTests(log_record.LogRecord);
  dart.addTypeCaches(log_record.LogRecord);
  dart.setLibraryUri(log_record.LogRecord, I[52]);
  dart.setFieldSignature(log_record.LogRecord, () => ({
    __proto__: dart.getFields(log_record.LogRecord.__proto__),
    level: dart.finalFieldType(level.Level),
    message: dart.finalFieldType(core.String),
    object: dart.finalFieldType(dart.nullable(core.Object)),
    loggerName: dart.finalFieldType(core.String),
    time: dart.finalFieldType(core.DateTime),
    sequenceNumber: dart.finalFieldType(core.int),
    error: dart.finalFieldType(dart.nullable(core.Object)),
    stackTrace: dart.finalFieldType(dart.nullable(core.StackTrace)),
    zone: dart.finalFieldType(dart.nullable(async.Zone))
  }));
  dart.setStaticFieldSignature(log_record.LogRecord, () => ['_nextNumber']);
  dart.defineExtensionMethods(log_record.LogRecord, ['toString']);
  dart.defineLazy(log_record.LogRecord, {
    /*log_record.LogRecord._nextNumber*/get _nextNumber() {
      return 0;
    },
    set _nextNumber(value) {}
  }, false);
  var name$2 = dart.privateName(logger, "Logger.name");
  var parent$ = dart.privateName(logger, "Logger.parent");
  var children$ = dart.privateName(logger, "Logger.children");
  var _level = dart.privateName(logger, "_level");
  var _controller$ = dart.privateName(logger, "_controller");
  var _levelChangedController = dart.privateName(logger, "_levelChangedController");
  var _children$ = dart.privateName(logger, "_children");
  var _getStream = dart.privateName(logger, "_getStream");
  var _publish = dart.privateName(logger, "_publish");
  logger.Logger = class Logger extends core.Object {
    get name() {
      return this[name$2];
    }
    set name(value) {
      super.name = value;
    }
    get parent() {
      return this[parent$];
    }
    set parent(value) {
      super.parent = value;
    }
    get children() {
      return this[children$];
    }
    set children(value) {
      super.children = value;
    }
    get fullName() {
      let t42, t42$;
      return dart.test((t42$ = (t42 = this.parent, t42 == null ? null : t42.name[$isNotEmpty]), t42$ == null ? false : t42$)) ? dart.nullCheck(this.parent).fullName + "." + this.name : this.name;
    }
    static new(name) {
      return logger.Logger._loggers[$putIfAbsent](name, dart.fn(() => logger.Logger._named(name), T$.VoidToLogger()));
    }
    static ['_#new#tearOff'](name) {
      return logger.Logger.new(name);
    }
    static detached(name) {
      return new logger.Logger._internal(name, null, new (T$.IdentityMapOfString$Logger()).new());
    }
    static ['_#detached#tearOff'](name) {
      return logger.Logger.detached(name);
    }
    static _named(name) {
      if (name[$startsWith](".")) {
        dart.throw(new core.ArgumentError.new("name shouldn't start with a '.'"));
      }
      if (name[$endsWith](".")) {
        dart.throw(new core.ArgumentError.new("name shouldn't end with a '.'"));
      }
      let dot = name[$lastIndexOf](".");
      let parent = null;
      let thisName = null;
      if (dot === -1) {
        if (name !== "") parent = logger.Logger.new("");
        thisName = name;
      } else {
        parent = logger.Logger.new(name[$substring](0, dot));
        thisName = name[$substring](dot + 1);
      }
      return new logger.Logger._internal(thisName, parent, new (T$.IdentityMapOfString$Logger()).new());
    }
    static ['_#_named#tearOff'](name) {
      return logger.Logger._named(name);
    }
    static ['_#_internal#tearOff'](name, parent, children) {
      return new logger.Logger._internal(name, parent, children);
    }
    get level() {
      let t42;
      let effectiveLevel = null;
      if (this.parent == null) {
        effectiveLevel = dart.nullCheck(this[_level]);
      } else if (!logger.hierarchicalLoggingEnabled) {
        effectiveLevel = dart.nullCheck(logger.Logger.root[_level]);
      } else {
        effectiveLevel = (t42 = this[_level], t42 == null ? dart.nullCheck(this.parent).level : t42);
      }
      if (!(effectiveLevel != null)) dart.assertFailed(null, I[53], 128, 12, "effectiveLevel != null");
      return effectiveLevel;
    }
    set level(value) {
      let t42;
      if (!logger.hierarchicalLoggingEnabled && this.parent != null) {
        dart.throw(new core.UnsupportedError.new("Please set \"hierarchicalLoggingEnabled\" to true if you want to " + "change the level on a non-root logger."));
      }
      if (this.parent == null && value == null) {
        dart.throw(new core.UnsupportedError.new("Cannot set the level to `null` on a logger with no parent."));
      }
      let isLevelChanged = !dart.equals(this[_level], value);
      this[_level] = value;
      if (isLevelChanged) {
        t42 = this[_levelChangedController];
        t42 == null ? null : t42.add(value);
      }
    }
    get onLevelChanged() {
      this[_levelChangedController] == null ? this[_levelChangedController] = T$.StreamControllerOfLevelN().broadcast({sync: true}) : null;
      return dart.nullCheck(this[_levelChangedController]).stream;
    }
    get onRecord() {
      return this[_getStream]();
    }
    clearListeners() {
      let t42;
      if (logger.hierarchicalLoggingEnabled || this.parent == null) {
        t42 = this[_controller$];
        t42 == null ? null : t42.close();
        this[_controller$] = null;
      } else {
        logger.Logger.root.clearListeners();
      }
    }
    isLoggable(value) {
      return value['>='](this.level);
    }
    log(logLevel, message, error = null, stackTrace = null, zone = null) {
      let object = null;
      if (this.isLoggable(logLevel)) {
        if (core.Function.is(message)) {
          message = T$.VoidToObjectN().as(message)();
        }
        let msg = null;
        if (typeof message == 'string') {
          msg = message;
        } else {
          msg = dart.toString(message);
          object = message;
        }
        if (stackTrace == null && logLevel['>='](logger.recordStackTraceAtLevel)) {
          stackTrace = core.StackTrace.current;
          error == null ? error = "autogenerated stack trace for " + dart.str(logLevel) + " " + dart.str(msg) : null;
        }
        zone == null ? zone = async.Zone.current : null;
        let record = new log_record.LogRecord.new(logLevel, msg, this.fullName, error, stackTrace, zone, object);
        if (this.parent == null) {
          this[_publish](record);
        } else if (!logger.hierarchicalLoggingEnabled) {
          logger.Logger.root[_publish](record);
        } else {
          let target = this;
          while (target != null) {
            target[_publish](record);
            target = target.parent;
          }
        }
      }
    }
    finest(message, error = null, stackTrace = null) {
      return this.log(level.Level.FINEST, message, error, stackTrace);
    }
    finer(message, error = null, stackTrace = null) {
      return this.log(level.Level.FINER, message, error, stackTrace);
    }
    fine(message, error = null, stackTrace = null) {
      return this.log(level.Level.FINE, message, error, stackTrace);
    }
    config(message, error = null, stackTrace = null) {
      return this.log(level.Level.CONFIG, message, error, stackTrace);
    }
    info(message, error = null, stackTrace = null) {
      return this.log(level.Level.INFO, message, error, stackTrace);
    }
    warning(message, error = null, stackTrace = null) {
      return this.log(level.Level.WARNING, message, error, stackTrace);
    }
    severe(message, error = null, stackTrace = null) {
      return this.log(level.Level.SEVERE, message, error, stackTrace);
    }
    shout(message, error = null, stackTrace = null) {
      return this.log(level.Level.SHOUT, message, error, stackTrace);
    }
    [_getStream]() {
      let t42;
      if (logger.hierarchicalLoggingEnabled || this.parent == null) {
        return (t42 = this[_controller$], t42 == null ? this[_controller$] = T$.StreamControllerOfLogRecord().broadcast({sync: true}) : t42).stream;
      } else {
        return logger.Logger.root[_getStream]();
      }
    }
    [_publish](record) {
      let t42;
      t42 = this[_controller$];
      return t42 == null ? null : t42.add(record);
    }
    static get attachedLoggers() {
      return logger.Logger._loggers[$values];
    }
  };
  (logger.Logger._internal = function(name, parent, children) {
    this[_level] = null;
    this[_controller$] = null;
    this[_levelChangedController] = null;
    this[name$2] = name;
    this[parent$] = parent;
    this[_children$] = children;
    this[children$] = new (T$.UnmodifiableMapViewOfString$Logger()).new(children);
    if (this.parent == null) {
      this[_level] = logger.defaultLevel;
    } else {
      dart.nullCheck(this.parent)[_children$][$_set](this.name, this);
    }
  }).prototype = logger.Logger.prototype;
  dart.addTypeTests(logger.Logger);
  dart.addTypeCaches(logger.Logger);
  dart.setMethodSignature(logger.Logger, () => ({
    __proto__: dart.getMethods(logger.Logger.__proto__),
    clearListeners: dart.fnType(dart.void, []),
    isLoggable: dart.fnType(core.bool, [level.Level]),
    log: dart.fnType(dart.void, [level.Level, dart.nullable(core.Object)], [dart.nullable(core.Object), dart.nullable(core.StackTrace), dart.nullable(async.Zone)]),
    finest: dart.fnType(dart.void, [dart.nullable(core.Object)], [dart.nullable(core.Object), dart.nullable(core.StackTrace)]),
    finer: dart.fnType(dart.void, [dart.nullable(core.Object)], [dart.nullable(core.Object), dart.nullable(core.StackTrace)]),
    fine: dart.fnType(dart.void, [dart.nullable(core.Object)], [dart.nullable(core.Object), dart.nullable(core.StackTrace)]),
    config: dart.fnType(dart.void, [dart.nullable(core.Object)], [dart.nullable(core.Object), dart.nullable(core.StackTrace)]),
    info: dart.fnType(dart.void, [dart.nullable(core.Object)], [dart.nullable(core.Object), dart.nullable(core.StackTrace)]),
    warning: dart.fnType(dart.void, [dart.nullable(core.Object)], [dart.nullable(core.Object), dart.nullable(core.StackTrace)]),
    severe: dart.fnType(dart.void, [dart.nullable(core.Object)], [dart.nullable(core.Object), dart.nullable(core.StackTrace)]),
    shout: dart.fnType(dart.void, [dart.nullable(core.Object)], [dart.nullable(core.Object), dart.nullable(core.StackTrace)]),
    [_getStream]: dart.fnType(async.Stream$(log_record.LogRecord), []),
    [_publish]: dart.fnType(dart.void, [log_record.LogRecord])
  }));
  dart.setStaticMethodSignature(logger.Logger, () => ['new', 'detached', '_named']);
  dart.setGetterSignature(logger.Logger, () => ({
    __proto__: dart.getGetters(logger.Logger.__proto__),
    fullName: core.String,
    level: level.Level,
    onLevelChanged: async.Stream$(dart.nullable(level.Level)),
    onRecord: async.Stream$(log_record.LogRecord)
  }));
  dart.setSetterSignature(logger.Logger, () => ({
    __proto__: dart.getSetters(logger.Logger.__proto__),
    level: dart.nullable(level.Level)
  }));
  dart.setStaticGetterSignature(logger.Logger, () => ['attachedLoggers']);
  dart.setLibraryUri(logger.Logger, I[54]);
  dart.setFieldSignature(logger.Logger, () => ({
    __proto__: dart.getFields(logger.Logger.__proto__),
    name: dart.finalFieldType(core.String),
    parent: dart.finalFieldType(dart.nullable(logger.Logger)),
    [_level]: dart.fieldType(dart.nullable(level.Level)),
    [_children$]: dart.finalFieldType(core.Map$(core.String, logger.Logger)),
    children: dart.finalFieldType(core.Map$(core.String, logger.Logger)),
    [_controller$]: dart.fieldType(dart.nullable(async.StreamController$(log_record.LogRecord))),
    [_levelChangedController]: dart.fieldType(dart.nullable(async.StreamController$(dart.nullable(level.Level))))
  }));
  dart.setStaticFieldSignature(logger.Logger, () => ['root', '_loggers']);
  dart.defineLazy(logger.Logger, {
    /*logger.Logger.root*/get root() {
      return logger.Logger.new("");
    },
    /*logger.Logger._loggers*/get _loggers() {
      return new (T$.IdentityMapOfString$Logger()).new();
    }
  }, false);
  dart.defineLazy(logger, {
    /*logger.hierarchicalLoggingEnabled*/get hierarchicalLoggingEnabled() {
      return false;
    },
    set hierarchicalLoggingEnabled(value) {},
    /*logger.recordStackTraceAtLevel*/get recordStackTraceAtLevel() {
      return level.Level.OFF;
    },
    set recordStackTraceAtLevel(value) {},
    /*logger.defaultLevel*/get defaultLevel() {
      return C[90] || CT.C90;
    }
  }, false);
  dart.trackLibraries("zapp_user_main", {
    "file:///zapp/project/.zapp_entry.dart": $46zapp_entry,
    "file:///zapp/project/lib/main.dart": main,
    "file:///zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart": web_plugin_registrant,
    "package:flutter_app/app.dart": app$1,
    "package:shared_preferences/shared_preferences.dart": shared_preferences,
    "package:shared_preferences_web/shared_preferences_web.dart": shared_preferences_web,
    "package:go_router/go_router.dart": go_router,
    "package:provider/provider.dart": provider,
    "package:flutter_app/app_router.dart": app_router,
    "package:flutter_app/app_state_provider.dart": app_state_provider,
    "package:flutter_app/app_theme.dart": app_theme,
    "package:shared_preferences_platform_interface/shared_preferences_platform_interface.dart": shared_preferences_platform_interface,
    "package:shared_preferences_platform_interface/types.dart": types,
    "package:go_router/src/go_router.dart": go_router$,
    "package:go_router/src/custom_transition_page.dart": custom_transition_page,
    "package:go_router/src/go_route.dart": go_route,
    "package:go_router/src/go_router_refresh_stream.dart": go_router_refresh_stream,
    "package:go_router/src/go_router_state.dart": go_router_state,
    "package:go_router/src/inherited_go_router.dart": inherited_go_router,
    "package:go_router/src/route_data.dart": route_data,
    "package:go_router/src/typedefs.dart": typedefs,
    "package:go_router/src/url_path_strategy.dart": url_path_strategy,
    "package:provider/src/async_provider.dart": async_provider,
    "package:provider/src/change_notifier_provider.dart": change_notifier_provider,
    "package:provider/src/consumer.dart": consumer,
    "package:provider/src/listenable_provider.dart": listenable_provider,
    "package:provider/src/provider.dart": provider$,
    "package:provider/src/proxy_provider.dart": proxy_provider,
    "package:provider/src/reassemble_handler.dart": reassemble_handler,
    "package:provider/src/selector.dart": selector$,
    "package:provider/src/value_listenable_provider.dart": value_listenable_provider,
    "package:flutter_app/router_utils.dart": router_utils,
    "package:flutter_app/home.dart": home,
    "package:flutter_app/onboard_screen.dart": onboard_screen,
    "package:flutter_app/auth_screen.dart": auth_screen,
    "package:plugin_platform_interface/plugin_platform_interface.dart": plugin_platform_interface,
    "package:shared_preferences_platform_interface/method_channel_shared_preferences.dart": method_channel_shared_preferences,
    "package:go_router/src/go_route_information_parser.dart": go_route_information_parser,
    "package:go_router/src/go_router_delegate.dart": go_router_delegate,
    "package:go_router/src/logging.dart": logging,
    "package:go_router/src/path_strategy_web.dart": path_strategy_web,
    "package:go_router/src/path_parser.dart": path_parser,
    "package:go_router/src/go_route_match.dart": go_route_match,
    "package:nested/nested.dart": nested,
    "package:flutter_app/auth_form_widget.dart": auth_form_widget,
    "package:go_router/src/go_router_cupertino.dart": go_router_cupertino,
    "package:go_router/src/go_router_error_page.dart": go_router_error_page,
    "package:go_router/src/go_router_material.dart": go_router_material,
    "package:logging/logging.dart": logging$,
    "package:flutter_app/auth_validators.dart": auth_validators,
    "package:logging/src/level.dart": level,
    "package:logging/src/log_record.dart": log_record,
    "package:logging/src/logger.dart": logger
  }, {
    "package:provider/src/provider.dart": ["deferred_inherited_provider.dart", "devtool.dart", "inherited_provider.dart"]
  }, '{"version":3,"sourceRoot":"","sources":["/zapp/project/.zapp_entry.dart","/zapp/project/lib/main.dart","/zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart","/zapp/project/lib/app.dart","/zapp/pub/.pub_cache/hosted/pub.dev/shared_preferences-2.2.2/lib/shared_preferences.dart","/zapp/pub/.pub_cache/hosted/pub.dev/plugin_platform_interface-2.1.6/lib/plugin_platform_interface.dart","/zapp/pub/.pub_cache/hosted/pub.dev/shared_preferences_platform_interface-2.3.1/lib/shared_preferences_platform_interface.dart","/zapp/pub/.pub_cache/hosted/pub.dev/shared_preferences_web-2.2.1/lib/shared_preferences_web.dart","/zapp/pub/.pub_cache/hosted/pub.dev/go_router-3.1.1/lib/go_router.dart","/zapp/project/lib/app_router.dart","/zapp/project/lib/app_state_provider.dart","/zapp/project/lib/app_theme.dart","/zapp/pub/.pub_cache/hosted/pub.dev/shared_preferences_platform_interface-2.3.1/lib/types.dart","/zapp/pub/.pub_cache/hosted/pub.dev/go_router-3.1.1/lib/src/go_router.dart","/zapp/pub/.pub_cache/hosted/pub.dev/go_router-3.1.1/lib/src/custom_transition_page.dart","/zapp/pub/.pub_cache/hosted/pub.dev/go_router-3.1.1/lib/src/go_route.dart","/zapp/pub/.pub_cache/hosted/pub.dev/go_router-3.1.1/lib/src/go_router_refresh_stream.dart","/zapp/pub/.pub_cache/hosted/pub.dev/go_router-3.1.1/lib/src/go_router_state.dart","/zapp/pub/.pub_cache/hosted/pub.dev/go_router-3.1.1/lib/src/inherited_go_router.dart","/zapp/pub/.pub_cache/hosted/pub.dev/go_router-3.1.1/lib/src/route_data.dart","/zapp/pub/.pub_cache/hosted/pub.dev/go_router-3.1.1/lib/src/url_path_strategy.dart","/zapp/pub/.pub_cache/hosted/pub.dev/nested-1.0.0/lib/nested.dart","/zapp/pub/.pub_cache/hosted/pub.dev/provider-6.1.1/lib/src/inherited_provider.dart","/zapp/pub/.pub_cache/hosted/pub.dev/provider-6.1.1/lib/src/deferred_inherited_provider.dart","/zapp/pub/.pub_cache/hosted/pub.dev/provider-6.1.1/lib/src/async_provider.dart","/zapp/pub/.pub_cache/hosted/pub.dev/provider-6.1.1/lib/src/listenable_provider.dart","/zapp/pub/.pub_cache/hosted/pub.dev/provider-6.1.1/lib/src/change_notifier_provider.dart","/zapp/pub/.pub_cache/hosted/pub.dev/provider-6.1.1/lib/src/consumer.dart","/zapp/pub/.pub_cache/hosted/pub.dev/provider-6.1.1/lib/src/provider.dart","/zapp/pub/.pub_cache/hosted/pub.dev/provider-6.1.1/lib/src/devtool.dart","/workspace/build/dart-sdk/packages/flutter/lib/src/widgets/framework.dart","/zapp/pub/.pub_cache/hosted/pub.dev/provider-6.1.1/lib/src/proxy_provider.dart","/zapp/pub/.pub_cache/hosted/pub.dev/provider-6.1.1/lib/src/reassemble_handler.dart","/zapp/pub/.pub_cache/hosted/pub.dev/provider-6.1.1/lib/src/selector.dart","/zapp/pub/.pub_cache/hosted/pub.dev/provider-6.1.1/lib/src/value_listenable_provider.dart","/zapp/project/lib/router_utils.dart","/zapp/project/lib/home.dart","/zapp/project/lib/onboard_screen.dart","/zapp/project/lib/auth_screen.dart","/zapp/pub/.pub_cache/hosted/pub.dev/shared_preferences_platform_interface-2.3.1/lib/method_channel_shared_preferences.dart","/zapp/pub/.pub_cache/hosted/pub.dev/go_router-3.1.1/lib/src/go_route_information_parser.dart","/zapp/pub/.pub_cache/hosted/pub.dev/go_router-3.1.1/lib/src/go_router_delegate.dart","/zapp/pub/.pub_cache/hosted/pub.dev/go_router-3.1.1/lib/src/logging.dart","/zapp/pub/.pub_cache/hosted/pub.dev/go_router-3.1.1/lib/src/path_strategy_web.dart","/zapp/pub/.pub_cache/hosted/pub.dev/go_router-3.1.1/lib/src/path_parser.dart","/zapp/pub/.pub_cache/hosted/pub.dev/go_router-3.1.1/lib/src/go_route_match.dart","/zapp/project/lib/auth_form_widget.dart","/zapp/pub/.pub_cache/hosted/pub.dev/go_router-3.1.1/lib/src/go_router_cupertino.dart","/zapp/pub/.pub_cache/hosted/pub.dev/go_router-3.1.1/lib/src/go_router_error_page.dart","/zapp/pub/.pub_cache/hosted/pub.dev/go_router-3.1.1/lib/src/go_router_material.dart","/zapp/project/lib/auth_validators.dart","/zapp/pub/.pub_cache/hosted/pub.dev/logging-1.2.0/lib/src/level.dart","/zapp/pub/.pub_cache/hosted/pub.dev/logging-1.2.0/lib/src/log_record.dart","/zapp/pub/.pub_cache/hosted/pub.dev/logging-1.2.0/lib/src/logger.dart"],"names":[],"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","file":"main.js"}');
  // Exports:
  return {
    zapp__project__$46zapp_entry: $46zapp_entry,
    zapp__project__lib__main: main,
    zapp__project__$46dart_tool__dartpad__web_plugin_registrant: web_plugin_registrant,
    app: app$1,
    shared_preferences: shared_preferences,
    shared_preferences_web: shared_preferences_web,
    go_router: go_router,
    provider: provider,
    app_router: app_router,
    app_state_provider: app_state_provider,
    app_theme: app_theme,
    shared_preferences_platform_interface: shared_preferences_platform_interface,
    types: types,
    src__go_router: go_router$,
    src__custom_transition_page: custom_transition_page,
    src__go_route: go_route,
    src__go_router_refresh_stream: go_router_refresh_stream,
    src__go_router_state: go_router_state,
    src__inherited_go_router: inherited_go_router,
    src__route_data: route_data,
    src__typedefs: typedefs,
    src__url_path_strategy: url_path_strategy,
    src__async_provider: async_provider,
    src__change_notifier_provider: change_notifier_provider,
    src__consumer: consumer,
    src__listenable_provider: listenable_provider,
    src__provider: provider$,
    src__proxy_provider: proxy_provider,
    src__reassemble_handler: reassemble_handler,
    src__selector: selector$,
    src__value_listenable_provider: value_listenable_provider,
    router_utils: router_utils,
    home: home,
    onboard_screen: onboard_screen,
    auth_screen: auth_screen,
    plugin_platform_interface: plugin_platform_interface,
    method_channel_shared_preferences: method_channel_shared_preferences,
    src__go_route_information_parser: go_route_information_parser,
    src__go_router_delegate: go_router_delegate,
    src__logging: logging,
    src__path_strategy_web: path_strategy_web,
    src__path_parser: path_parser,
    src__go_route_match: go_route_match,
    nested: nested,
    auth_form_widget: auth_form_widget,
    src__go_router_cupertino: go_router_cupertino,
    src__go_router_error_page: go_router_error_page,
    src__go_router_material: go_router_material,
    logging: logging$,
    auth_validators: auth_validators,
    src__level: level,
    src__log_record: log_record,
    src__logger: logger
  };
}));

//# sourceMappingURL=main.js.map
